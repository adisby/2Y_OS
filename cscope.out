cscope 15 $HOME/Ê°åÈù¢/coding/OS/MyOS/2Y_OS               0000693070
	@UnitTest/fs/v1.0/alloc_bit/alloc_bit.c

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dio.h
>

22 
	~"c⁄°.h
"

23 
	~"ty≥.h
"

24 
	~"fs.h
"

25 
	~"Æloc_bô.h
"

27 
	ghd
[
SECTOR_SIZE
 * 10];

29 
	gfsbuf
[
SECTOR_SIZE
];

31 
su≥r_block
 
	gsu≥r_block
[
NR_SUPER_BLOCK
] = {{273, 4096, 40257, 1,

36 
PUBLIC
 
su≥r_block
 * 
	$gë_su≥r_block
(
dev
)

38 
su≥r_block
 * 
sb
 = super_block;

39 ; 
sb
 < &
su≥r_block
[
NR_SUPER_BLOCK
]; sb++)

40 i‡(
sb
->
sb_dev
 =
dev
)

41  
sb
;

46 
	}
}

48 
PUBLIC
 
	$RD_SECT
(
dev
, 
£˘_ƒ
)

50 
	`mem˝y
(
fsbuf
,

51 
hd
 + 
£˘_ƒ
 * 
SECTOR_SIZE
,

52 
SECTOR_SIZE
);

53 
	}
}

55 
PUBLIC
 
	$WR_SECT
(
dev
, 
£˘_ƒ
)

57 
	`mem˝y
(
hd
 + 
£˘_ƒ
 * 
SECTOR_SIZE
,

58 
fsbuf
,

59 
SECTOR_SIZE
);

60 
	}
}

62 
PRIVATE
 
	$Æloc_bô
(
dev
)

64 
i
;

65 
j
;

66 
k
;

68 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

70 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

71 
Êag_bô_Æloc
 = 0;

72 
bô_Æloc
 = 0;

73 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

75 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

78 
j
 = 0; j < 
SECTOR_SIZE
 ; j++) {

80 i‡(
fsbuf
[
j
] != ()0xFF) {

81 
k
 = 0;

82 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

85 
fsbuf
[
j
] |(1 << 
k
);

86 
Êag_bô_Æloc
 = 1;

87 
bô_Æloc
 = 
i
 * 
SECTOR_SIZE
 + 
j
 * 8 + 
k
;

92 i‡(
Êag_bô_Æloc
) {

94 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

101  
bô_Æloc
;

102 
	}
}

114 
	$maö
 ( 
¨gc
, *
¨gv
[] )

116 
	`mem£t
(
hd
, 0, (hd));

117 
a
;

118 
	`sˇnf
("%c", &
a
)) {

119 
i
,
j
;

120 
a
) {

122 
	`¥ötf
("bôáŒoˇãd: %d\n", 
	`Æloc_bô
(800));

125 
	`¥ötf
("what bits do you wantÅo set\nfrom [from] [size]\n");

126 
	`sˇnf
("%d %d", &
i
, &
j
);

127 
	`mem£t
(
hd
 + 
i
, ()0xFF, 
j
);

131  
EXIT_SUCCESS
;

132 
	}
}

	@UnitTest/fs/v1.0/alloc_bit/alloc_bit.h

20 #i‚def 
_ORANGES_FS_H_


21 
	#_ORANGES_FS_H_


	)

23 
PUBLIC
 
su≥r_block
 * 
gë_su≥r_block
(
dev
);

29 
	sdev_drv_m≠
 {

30 
	mdrivî_ƒ
;

37 
	#MAGIC_V1
 0x111

	)

45 
	ssu≥r_block
 {

46 
u32
 
	mmagic
;

47 
u32
 
	mƒ_öodes
;

48 
u32
 
	mƒ_£˘s
;

49 
u32
 
	mƒ_im≠_£˘s
;

50 
u32
 
	mƒ_sm≠_£˘s
;

51 
u32
 
	mn_1°_£˘
;

52 
u32
 
	mƒ_öode_£˘s
;

53 
u32
 
	mroŸ_öode
;

54 
u32
 
	möode_size
;

55 
u32
 
	möode_isize_off
;

56 
u32
 
	möode_z⁄e_off
;

57 
u32
 
	mdú_ít_size
;

58 
u32
 
	mdú_ít_öode_off
;

59 
u32
 
	mdú_ít_‚ame_off
;

64 
	msb_dev
;

74 
	#SUPER_BLOCK_SIZE
 56

	)

87 
	söode
 {

88 
u32
 
	mi_mode
;

89 
u32
 
	mi_size
;

91 
u32
 
	mi_ƒ_£˘s
;

92 
z⁄e_t
 
	mi_z⁄e
[10];

93 
u8
 
	m_unu£d
[12];

96 
	mi_dev
;

97 
	mi_˙t
;

98 
	mi_num
;

108 
	#INODE_SIZE
 ((
öode
Ë- 12)

	)

115 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

122 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

129 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

136 
	#NO_ZONE
 0

	)

143 
	#DEV_ZONE
 0

	)

150 
	#NR_DIRECT_ZONE
 8

	)

157 
	#SECOND_LEVEL_ZONE
 8

	)

164 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

171 
	#THIRD_LEVEL_ZONE
 9

	)

179 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

186 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

192 
	sfûe_desc
 {

193 
	mfd_mode
;

194 
	mfd_pos
;

195 
	mfd_˙t
;

196 
öode
* 
	mfd_öode
;

	@UnitTest/fs/v1.0/alloc_bit/const.h

8 #i‚def 
_ORANGES_CONST_H_


9 
	#_ORANGES_CONST_H_


	)

12 #i‚de‡
NULL


13 
	#NULL
 ((*Ë0)

	)

17 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

18 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

26 
	#BLACK
 0x0

	)

27 
	#WHITE
 0x7

	)

28 
	#RED
 0x4

	)

29 
	#GREEN
 0x2

	)

30 
	#BLUE
 0x1

	)

31 
	#FLASH
 0x80

	)

32 
	#BRIGHT
 0x08

	)

33 
	#MAKE_COLOR
(
x
,
y
Ë((x<<4Ë| yË

	)

36 
	#GDT_SIZE
 128

	)

37 
	#IDT_SIZE
 256

	)

40 
	#PRIVILEGE_KRNL
 0

	)

41 
	#PRIVILEGE_TASK
 1

	)

42 
	#PRIVILEGE_USER
 3

	)

44 
	#RPL_KRNL
 
SA_RPL0


	)

45 
	#RPL_TASK
 
SA_RPL1


	)

46 
	#RPL_USER
 
SA_RPL3


	)

49 
	#SENDING
 0x02

	)

50 
	#RECEIVING
 0x04

	)

51 
	#WAITING
 0x08

	)

52 
	#HANGING
 0x10

	)

53 
	#FREE_SLOT
 0x20

	)

58 
	#NR_CONSOLES
 3

	)

61 
	#INT_M_CTL
 0x20

	)

62 
	#INT_M_CTLMASK
 0x21

	)

63 
	#INT_S_CTL
 0xA0

	)

64 
	#INT_S_CTLMASK
 0xA1

	)

67 
	#TIMER0
 0x40

	)

68 
	#TIMER_MODE
 0x43

	)

69 
	#RATE_GENERATOR
 0x34

	)

72 
	#TIMER_FREQ
 1193182L

	)

73 
	#HZ
 100

	)

77 
	#KB_DATA
 0x60

	)

80 
	#KB_CMD
 0x64

	)

83 
	#LED_CODE
 0xED

	)

84 
	#KB_ACK
 0xFA

	)

87 
	#CRTC_ADDR_REG
 0x3D4

	)

88 
	#CRTC_DATA_REG
 0x3D5

	)

89 
	#START_ADDR_H
 0xC

	)

90 
	#START_ADDR_L
 0xD

	)

91 
	#CURSOR_H
 0xE

	)

92 
	#CURSOR_L
 0xF

	)

93 
	#V_MEM_BASE
 0xB8000

	)

94 
	#V_MEM_SIZE
 0x8000

	)

97 
	#CLK_ELE
 0x70

	)

103 
	#CLK_IO
 0x71

	)

105 
	#YEAR
 9

	)

106 
	#MONTH
 8

	)

107 
	#DAY
 7

	)

108 
	#HOUR
 4

	)

109 
	#MINUTE
 2

	)

110 
	#SECOND
 0

	)

111 
	#CLK_STATUS
 0x0B

	)

112 
	#CLK_HEALTH
 0x0E

	)

124 
	#NR_IRQ
 16

	)

125 
	#CLOCK_IRQ
 0

	)

126 
	#KEYBOARD_IRQ
 1

	)

127 
	#CASCADE_IRQ
 2

	)

128 
	#ETHER_IRQ
 3

	)

129 
	#SECONDARY_IRQ
 3

	)

130 
	#RS232_IRQ
 4

	)

131 
	#XT_WINI_IRQ
 5

	)

132 
	#FLOPPY_IRQ
 6

	)

133 
	#PRINTER_IRQ
 7

	)

134 
	#AT_WINI_IRQ
 14

	)

138 
	#INVALID_DRIVER
 -20

	)

139 
	#INTERRUPT
 -10

	)

140 
	#TASK_TTY
 0

	)

141 
	#TASK_SYS
 1

	)

142 
	#TASK_HD
 2

	)

143 
	#TASK_FS
 3

	)

144 
	#TASK_MM
 4

	)

145 
	#INIT
 5

	)

146 
	#ANY
 (
NR_TASKS
 + 
NR_PROCS
 + 10)

	)

147 
	#NO_TASK
 (
NR_TASKS
 + 
NR_PROCS
 + 20)

	)

149 
	#MAX_TICKS
 0x7FFFABCD

	)

152 
	#NR_SYS_CALL
 3

	)

155 
	#SEND
 1

	)

156 
	#RECEIVE
 2

	)

157 
	#BOTH
 3

	)

160 
	#MAG_CH_PANIC
 '\002'

	)

161 
	#MAG_CH_ASSERT
 '\003'

	)

167 
	emsgty≥
 {

172 
	mHARD_INT
 = 1,

175 
	mGET_TICKS
, 
	mGET_PID
, 
	mGET_RTC_TIME
,

178 
	mMKDIR
, 
	mOPEN
, 
	mCLOSE
, 
	mREAD
, 
	mWRITE
, 
	mLSEEK
, 
	mSTAT
, 
	mUNLINK
,

181 
	mSUSPEND_PROC
, 
	mRESUME_PROC
,

184 
	mEXEC
, 
	mWAIT
, 
	mCHDIR
,

187 
	mFORK
, 
	mEXIT
,

190 
	mSYSCALL_RET
,

193 
	mDEV_OPEN
 = 1001,

194 
	mDEV_CLOSE
,

195 
	mDEV_READ
,

196 
	mDEV_WRITE
,

197 
	mDEV_IOCTL


201 
	#FD
 
u
.
m3
.
m3i1


	)

202 
	#PATHNAME
 
u
.
m3
.
m3p1


	)

203 
	#PATH
 
u
.
m3
.
m3p2


	)

204 
	#FLAGS
 
u
.
m3
.
m3i1


	)

205 
	#NAME_LEN
 
u
.
m3
.
m3i2


	)

206 
	#BUF_LEN
 
u
.
m3
.
m3i3


	)

207 
	#CNT
 
u
.
m3
.
m3i2


	)

208 
	#REQUEST
 
u
.
m3
.
m3i2


	)

209 
	#PROC_NR
 
u
.
m3
.
m3i3


	)

210 
	#DEVICE
 
u
.
m3
.
m3i4


	)

211 
	#POSITION
 
u
.
m3
.
m3l1


	)

212 
	#BUF
 
u
.
m3
.
m3p2


	)

213 
	#OFFSET
 
u
.
m3
.
m3i2


	)

214 
	#WHENCE
 
u
.
m3
.
m3i3


	)

216 
	#PID
 
u
.
m3
.
m3i2


	)

217 
	#RETVAL
 
u
.
m3
.
m3i1


	)

218 
	#STATUS
 
u
.
m3
.
m3i1


	)

228 
	#DIOCTL_GET_GEO
 1

	)

231 
	#INVALID_SECTOR
 -1

	)

232 
	#SECTOR_SIZE
 512

	)

233 
	#SECTOR_BITS
 (
SECTOR_SIZE
 * 8)

	)

234 
	#SECTOR_SIZE_SHIFT
 9

	)

237 
	#NO_DEV
 0

	)

238 
	#DEV_FLOPPY
 1

	)

239 
	#DEV_CDROM
 2

	)

240 
	#DEV_HD
 3

	)

241 
	#DEV_CHAR_TTY
 4

	)

242 
	#DEV_SCSI
 5

	)

244 
	#MAJOR_SHIFT
 8

	)

245 
	#MAKE_DEV
(
a
,
b
Ë(◊ << 
MAJOR_SHIFT
Ë| b)

	)

247 
	#MAJOR
(
x
Ë((x >> 
MAJOR_SHIFT
Ë& 0xFF)

	)

248 
	#MINOR
(
x
Ë(x & 0xFF)

	)

250 
	#INVALID_INODE
 0

	)

251 
	#ROOT_INODE
 1

	)

253 
	#MAX_DRIVES
 2

	)

254 
	#NR_PART_PER_DRIVE
 4

	)

255 
	#NR_SUB_PER_PART
 16

	)

256 
	#NR_SUB_PER_DRIVE
 (
NR_SUB_PER_PART
 * 
NR_PART_PER_DRIVE
)

	)

257 
	#NR_PRIM_PER_DRIVE
 (
NR_PART_PER_DRIVE
 + 1)

	)

265 
	#MAX_PRIM
 (
MAX_DRIVES
 * 
NR_PRIM_PER_DRIVE
 - 1)

	)

267 
	#MAX_SUBPARTITIONS
 (
NR_SUB_PER_DRIVE
 * 
MAX_DRIVES
)

	)

270 
	#MINOR_hd1a
 0x10

	)

271 
	#MINOR_hd2a
 (
MINOR_hd1a
+
NR_SUB_PER_PART
)

	)

273 
	#ROOT_DEV
 
	`MAKE_DEV
(
DEV_HD
, 
MINOR_BOOT
)

	)

275 
	#P_PRIMARY
 0

	)

276 
	#P_EXTENDED
 1

	)

278 
	#ORANGES_PART
 0x99

	)

279 
	#NO_PART
 0x00

	)

280 
	#EXT_PART
 0x05

	)

282 
	#NR_FILES
 64

	)

283 
	#NR_FILE_DESC
 64

	)

284 
	#NR_INODE
 64

	)

285 
	#NR_SUPER_BLOCK
 8

	)

289 
	#I_TYPE_MASK
 0170000

	)

290 
	#I_REGULAR
 0100000

	)

291 
	#I_BLOCK_SPECIAL
 0060000

	)

292 
	#I_DIRECTORY
 0040000

	)

293 
	#I_CHAR_SPECIAL
 0020000

	)

294 
	#I_NAMED_PIPE
 0010000

	)

296 
	#is_•ecül
(
m
Ë((((mË& 
I_TYPE_MASK
Ë=
I_BLOCK_SPECIAL
) || \

297 (((
m
Ë& 
I_TYPE_MASK
Ë=
I_CHAR_SPECIAL
))

	)

299 
	#NR_DEFAULT_FILE_SECTS
 2048

	)

	@UnitTest/fs/v1.0/alloc_bit/fs.h

10 #i‚def 
_ORANGES_FS_H_


11 
	#_ORANGES_FS_H_


	)

17 
	sdev_drv_m≠
 {

18 
	mdrivî_ƒ
;

25 
	#MAGIC_V1
 0x111

	)

33 
	ssu≥r_block
 {

34 
u32
 
	mmagic
;

35 
u32
 
	mƒ_öodes
;

36 
u32
 
	mƒ_£˘s
;

37 
u32
 
	mƒ_im≠_£˘s
;

38 
u32
 
	mƒ_sm≠_£˘s
;

39 
u32
 
	mn_1°_£˘
;

40 
u32
 
	mƒ_öode_£˘s
;

41 
u32
 
	mroŸ_öode
;

42 
u32
 
	möode_size
;

43 
u32
 
	möode_isize_off
;

44 
u32
 
	möode_z⁄e_off
;

45 
u32
 
	mdú_ít_size
;

46 
u32
 
	mdú_ít_öode_off
;

47 
u32
 
	mdú_ít_‚ame_off
;

52 
	msb_dev
;

62 
	#SUPER_BLOCK_SIZE
 56

	)

75 
	söode
 {

76 
u32
 
	mi_mode
;

77 
u32
 
	mi_size
;

79 
u32
 
	mi_ƒ_£˘s
;

80 
z⁄e_t
 
	mi_z⁄e
[10];

81 
u8
 
	m_unu£d
[12];

84 
	mi_dev
;

85 
	mi_˙t
;

86 
	mi_num
;

96 
	#INODE_SIZE
 ((
öode
Ë- 12)

	)

103 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

110 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

117 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

124 
	#NO_ZONE
 0

	)

131 
	#DEV_ZONE
 0

	)

138 
	#NR_DIRECT_ZONE
 8

	)

145 
	#SECOND_LEVEL_ZONE
 8

	)

152 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

159 
	#THIRD_LEVEL_ZONE
 9

	)

167 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

174 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

180 
	sfûe_desc
 {

181 
	mfd_mode
;

182 
	mfd_pos
;

183 
	mfd_˙t
;

184 
öode
* 
	mfd_öode
;

	@UnitTest/fs/v1.0/alloc_bit/type.h

8 #i‚de‡
_ORANGES_TYPE_H_


9 
	#_ORANGES_TYPE_H_


	)

12 
	#PUBLIC


	)

13 
	#PRIVATE
 

	)

15 
	tu64
;

16 
	tu32
;

17 
	tu16
;

18 
	tu8
;

20 * 
	tva_li°
;

22 (*
	göt_h™dÀr
) ();

23 (*
	gèsk_f
) ();

24 (*
	túq_h™dÀr
Ë(
	túq
);

26 * 
	tsy°em_ˇŒ
;

32 
	smess1
 {

33 
m1i1
;

34 
m1i2
;

35 
m1i3
;

36 
m1i4
;

38 
	smess2
 {

39 * 
m2p1
;

40 * 
m2p2
;

41 * 
m2p3
;

42 * 
m2p4
;

44 
	smess3
 {

45 
m3i1
;

46 
m3i2
;

47 
m3i3
;

48 
m3i4
;

49 
u64
 
m3l1
;

50 
u64
 
m3l2
;

51 * 
m3p1
;

52 * 
m3p2
;

55 
sour˚
;

56 
ty≥
;

58 
mess1
 
m1
;

59 
mess2
 
m2
;

60 
mess3
 
m3
;

61 } 
u
;

62 } 
	tMESSAGE
;

65 
	sboŸ_∑øms
 {

66 
mem_size
;

67 * 
kî√l_fûe
;

71 
u32
 
	tz⁄e_t
;

	@UnitTest/fs/v1.0/alloc_zone/alloc_zone.c

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dio.h
>

22 
	~"c⁄°.h
"

23 
	~"ty≥.h
"

24 
	~"fs.h
"

25 
	~"Æloc_z⁄e.h
"

27 
	ghd
[
SECTOR_SIZE
 * 1000];

29 
	gfsbuf
[
SECTOR_SIZE
];

31 
su≥r_block
 
	gsu≥r_block
[
NR_SUPER_BLOCK
] = {{273, 4096, 40257, 1,

36 
PUBLIC
 
su≥r_block
 * 
	$gë_su≥r_block
(
dev
)

38 
su≥r_block
 * 
sb
 = super_block;

39 ; 
sb
 < &
su≥r_block
[
NR_SUPER_BLOCK
]; sb++)

40 i‡(
sb
->
sb_dev
 =
dev
)

41  
sb
;

46 
	}
}

48 
PUBLIC
 
	$RD_SECT
(
dev
, 
£˘_ƒ
)

50 
	`mem˝y
(
fsbuf
,

51 
hd
 + 
£˘_ƒ
 * 
SECTOR_SIZE
,

52 
SECTOR_SIZE
);

53 
	}
}

55 
PUBLIC
 
	$WR_SECT
(
dev
, 
£˘_ƒ
)

57 
	`mem˝y
(
hd
 + 
£˘_ƒ
 * 
SECTOR_SIZE
,

58 
fsbuf
,

59 
SECTOR_SIZE
);

60 
	}
}

62 
PRIVATE
 
	$Æloc_bô
(
dev
)

64 
i
;

65 
j
;

66 
k
;

68 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

70 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

71 
Êag_bô_Æloc
 = 0;

72 
bô_Æloc
 = 0;

73 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

75 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

78 
j
 = 0; j < 
SECTOR_SIZE
 ; j++) {

80 i‡(
fsbuf
[
j
] != ()0xFF) {

81 
k
 = 0;

82 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

85 
fsbuf
[
j
] |(1 << 
k
);

86 
Êag_bô_Æloc
 = 1;

87 
bô_Æloc
 = 
i
 * 
SECTOR_SIZE
 + 
j
 * 8 + 
k
;

92 i‡(
Êag_bô_Æloc
) {

94 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

101  
bô_Æloc
;

102 
	}
}

111 
PRIVATE
 

112 
	$Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 )

115 
Æloˇãd_£˘
 = 
	`Æloc_bô
(
dev
);

116 i‡(
INVALID_SECTOR
 =
Æloˇãd_£˘
) {

119 *
£˘‹_±r
 = 
Æloˇãd_£˘
;

120 
	}
}

133 
PRIVATE
 

134 
	$Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_íd
, 
z⁄e_t
 * 
i_z⁄e
)

136 
i
, 
j
;

137 
Êag_no_z⁄e
 = 0;

139 i‡(
Æloc_°¨t
 < 
NR_DIRECT_ZONE
) {

140 
dúe˘_íd
 = 
NR_DIRECT_ZONE
 - 1;

142 
Êag_dúe˘_z⁄e
 = 0;

143 i‡(
Æloc_íd
 <
dúe˘_íd
) {

145 
Êag_dúe˘_z⁄e
 = 1;

146 
dúe˘_íd
 = 
Æloc_íd
;

148 
i
 = 
Æloc_°¨t
; i <
dúe˘_íd
; i++) {

149 i‡(
NO_ZONE
 =
i_z⁄e
[
i
]) {

150 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
i
]);

153 i‡(
Êag_dúe˘_z⁄e
) {

154  
Æloc_íd
 - 
Æloc_°¨t
 + 1;

159 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

161 i‡(
Æloc_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

162 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

163 
£c⁄d_Àvñ_íd
 = 
NR_SECOND_LEVEL_ZONE
 - 1;

165 
Êag_£c⁄d_Àvñ
 = 0;

166 i‡(
Æloc_íd
 <
£c⁄d_Àvñ_íd
) {

168 
Êag_£c⁄d_Àvñ
 = 1;

169 
£c⁄d_Àvñ_íd
 = 
Æloc_íd
;

171 i‡(
Æloc_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

172 
£c⁄d_Àvñ_°¨t
 = 
Æloc_°¨t
;

176 
£c⁄d_Àvñ_°¨t
 -
NR_DIRECT_ZONE
;

177 
£c⁄d_Àvñ_íd
 -
NR_DIRECT_ZONE
;

180 
Êag_no_z⁄e
 = 0;

181 i‡(
NO_ZONE
 =
i_z⁄e
[
SECOND_LEVEL_ZONE
]) {

183 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

184 
Êag_no_z⁄e
 = 1;

187 
	`RD_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

188 
	`mem˝y
((*)
£˘‹s
,

189 (*)
fsbuf
,

190 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * (
z⁄e_t
) );

192 i‡(
Êag_no_z⁄e
) {

193 
i
 = 0; i < 
NR_SECT_PER_SECOND_LEVEL_ZONE
; i++) {

194 
£˘‹s
[
i
] = 
NO_ZONE
;

198 
i
 = 
£c⁄d_Àvñ_°¨t
; i <
£c⁄d_Àvñ_íd
; i++) {

199 i‡(
NO_ZONE
 =
£˘‹s
[
i
]) {

200 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
i
]);

205 
	`mem˝y
((*)
fsbuf
,

206 (*)
£˘‹s
,

207 
NR_SECOND_LEVEL_ZONE
 * () );

208 
	`WR_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

211 i‡(
Êag_£c⁄d_Àvñ
) {

212  
Æloc_íd
 - 
Æloc_°¨t
;

216 i‡(
Æloc_íd
 < 
NR_THIRD_LEVEL_ZONE
) {

218 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

219 
thúd_Àvñ_íd
 = 
NR_THIRD_LEVEL_ZONE
 - 1;

221 
Êag_thúd_Àvñ
 = 0;

222 i‡(
Æloc_íd
 <
thúd_Àvñ_íd
) {

224 
Êag_thúd_Àvñ
 = 1;

225 
thúd_Àvñ_íd
 = 
Æloc_íd
;

227 i‡(
Æloc_°¨t
 > 
thúd_Àvñ_°¨t
) {

228 
thúd_Àvñ_°¨t
 = 
Æloc_°¨t
;

232 
thúd_Àvñ_°¨t
 -
NR_SECOND_LEVEL_ZONE
;

233 
thúd_Àvñ_íd
 -
NR_SECOND_LEVEL_ZONE
;

236 
Êag_no_z⁄e
 = 0;

237 i‡(
NO_ZONE
 =
i_z⁄e
[
THIRD_LEVEL_ZONE
]) {

239 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

240 
Êag_no_z⁄e
 = 1;

243 
	`RD_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

244 
	`mem˝y
((*)
£˘‹s
,

245 (*)
fsbuf
,

246 
NR_ZONE_PER_SECT
 * () );

248 i‡(
Êag_no_z⁄e
) {

249 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

250 
£˘‹s
[
i
] = 
NO_ZONE
;

254 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

255 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

256 
i
 = 
thúd_Àvñ_°¨t
; i <
thúd_Àvñ_íd
; i++) {

257 
£c⁄d_Àvñ_ödex
 =

258 
i
 / 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

259 
thúd_Àvñ_ödex
 =

260 
i
 % 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

262 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


263 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£˘‹s
[
£c⁄d_Àvñ_ödex
]){

265 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

268 
	`mem˝y
((*)
fsbuf
,

269 (*)
cuºít_z⁄es
,

270 
NR_ZONE_PER_SECT
 * () );

271 
	`WR_SECT
(
dev
, 
cuºít_£c⁄d_Àvñ_z⁄e
);

275 
Êag_no_z⁄e
 = 0;

276 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_ödex
]) {

277 
Êag_no_z⁄e
 = 1;

278 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

280 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
£˘‹s
[
£c⁄d_Àvñ_ödex
];

282 
	`RD_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

283 
	`mem˝y
((*)
cuºít_z⁄es
,

284 (*)
fsbuf
,

285 
NR_ZONE_PER_SECT
 * () );

287 i‡(
Êag_no_z⁄e
) {

288 
j
 = 0; j < 
NR_ZONE_PER_SECT
; j++) {

289 
cuºít_z⁄es
[
j
] = 
NO_ZONE
;

294 i‡(
NO_ZONE
 =
cuºít_z⁄es
[
thúd_Àvñ_ödex
]) {

295 
	`Æloc_£˘
(
dev
, &
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

300 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

303 
	`mem˝y
((*)
fsbuf
,

304 (*)
cuºít_z⁄es
,

305 
NR_ZONE_PER_SECT
 * () );

306 
	`WR_SECT
(
dev
, 
cuºít_£c⁄d_Àvñ_z⁄e
);

310 
	`mem˝y
((*)
fsbuf
,

311 (*)
£˘‹s
,

312 
NR_ZONE_PER_SECT
 * () );

313 
	`WR_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

316 i‡(
Êag_thúd_Àvñ
) {

317  
Æloc_íd
 - 
Æloc_°¨t
;

322 i‡(
Æloc_íd
 >
NR_THIRD_LEVEL_ZONE
) {

328 
	}
}

340 
	$maö
 ( 
¨gc
, *
¨gv
[] )

342 
	`mem£t
(
hd
, 0, (hd));

343 
a
;

344 
	`¥ötf
("printá(alloc_bit), b(set bit), or c(alloc zone)\n");

345 
	`sˇnf
("%c", &
a
)) {

346 
i
,
j
;

347 
z⁄e_t
 
i_z⁄e
[
NR_ZONE_PER_INODE
] = {
NO_ZONE
};

348 
a
) {

350 
	`¥ötf
("bôáŒoˇãd: %d\n", 
	`Æloc_bô
(800));

353 
	`¥ötf
("what bits do you wantÅo set\nfrom [from] [size]\n");

354 
	`sˇnf
("%d %d", &
i
, &
j
);

355 
	`mem£t
(
hd
 + 
i
, ()0xFF, 
j
);

358 
	`¥ötf
("alloc zone\n [alloc_start] [alloc_end]\n");

359 
	`sˇnf
("%d %d", &
i
, &
j
);

360 
	`Æloc_z⁄e
(800, 
i
, 
j
, 
i_z⁄e
);

363 
	`¥ötf
("printá(alloc_bit), b(set bit), or c(alloc zone)\n");

365  
EXIT_SUCCESS
;

366 
	}
}

	@UnitTest/fs/v1.0/alloc_zone/alloc_zone.h

20 #i‚def 
_ORANGES_FS_H_


21 
	#_ORANGES_FS_H_


	)

23 
PUBLIC
 
su≥r_block
 * 
gë_su≥r_block
(
dev
);

29 
	sdev_drv_m≠
 {

30 
	mdrivî_ƒ
;

37 
	#MAGIC_V1
 0x111

	)

45 
	ssu≥r_block
 {

46 
u32
 
	mmagic
;

47 
u32
 
	mƒ_öodes
;

48 
u32
 
	mƒ_£˘s
;

49 
u32
 
	mƒ_im≠_£˘s
;

50 
u32
 
	mƒ_sm≠_£˘s
;

51 
u32
 
	mn_1°_£˘
;

52 
u32
 
	mƒ_öode_£˘s
;

53 
u32
 
	mroŸ_öode
;

54 
u32
 
	möode_size
;

55 
u32
 
	möode_isize_off
;

56 
u32
 
	möode_z⁄e_off
;

57 
u32
 
	mdú_ít_size
;

58 
u32
 
	mdú_ít_öode_off
;

59 
u32
 
	mdú_ít_‚ame_off
;

64 
	msb_dev
;

74 
	#SUPER_BLOCK_SIZE
 56

	)

87 
	söode
 {

88 
u32
 
	mi_mode
;

89 
u32
 
	mi_size
;

91 
u32
 
	mi_ƒ_£˘s
;

92 
z⁄e_t
 
	mi_z⁄e
[10];

93 
u8
 
	m_unu£d
[12];

96 
	mi_dev
;

97 
	mi_˙t
;

98 
	mi_num
;

108 
	#INODE_SIZE
 ((
öode
Ë- 12)

	)

115 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

122 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

129 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

136 
	#NO_ZONE
 0

	)

143 
	#DEV_ZONE
 0

	)

150 
	#NR_DIRECT_ZONE
 8

	)

157 
	#SECOND_LEVEL_ZONE
 8

	)

164 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

171 
	#THIRD_LEVEL_ZONE
 9

	)

179 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

186 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

192 
	sfûe_desc
 {

193 
	mfd_mode
;

194 
	mfd_pos
;

195 
	mfd_˙t
;

196 
öode
* 
	mfd_öode
;

	@UnitTest/fs/v1.0/alloc_zone/const.h

8 #i‚def 
_ORANGES_CONST_H_


9 
	#_ORANGES_CONST_H_


	)

12 #i‚de‡
NULL


13 
	#NULL
 ((*Ë0)

	)

17 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

18 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

26 
	#BLACK
 0x0

	)

27 
	#WHITE
 0x7

	)

28 
	#RED
 0x4

	)

29 
	#GREEN
 0x2

	)

30 
	#BLUE
 0x1

	)

31 
	#FLASH
 0x80

	)

32 
	#BRIGHT
 0x08

	)

33 
	#MAKE_COLOR
(
x
,
y
Ë((x<<4Ë| yË

	)

36 
	#GDT_SIZE
 128

	)

37 
	#IDT_SIZE
 256

	)

40 
	#PRIVILEGE_KRNL
 0

	)

41 
	#PRIVILEGE_TASK
 1

	)

42 
	#PRIVILEGE_USER
 3

	)

44 
	#RPL_KRNL
 
SA_RPL0


	)

45 
	#RPL_TASK
 
SA_RPL1


	)

46 
	#RPL_USER
 
SA_RPL3


	)

49 
	#SENDING
 0x02

	)

50 
	#RECEIVING
 0x04

	)

51 
	#WAITING
 0x08

	)

52 
	#HANGING
 0x10

	)

53 
	#FREE_SLOT
 0x20

	)

58 
	#NR_CONSOLES
 3

	)

61 
	#INT_M_CTL
 0x20

	)

62 
	#INT_M_CTLMASK
 0x21

	)

63 
	#INT_S_CTL
 0xA0

	)

64 
	#INT_S_CTLMASK
 0xA1

	)

67 
	#TIMER0
 0x40

	)

68 
	#TIMER_MODE
 0x43

	)

69 
	#RATE_GENERATOR
 0x34

	)

72 
	#TIMER_FREQ
 1193182L

	)

73 
	#HZ
 100

	)

77 
	#KB_DATA
 0x60

	)

80 
	#KB_CMD
 0x64

	)

83 
	#LED_CODE
 0xED

	)

84 
	#KB_ACK
 0xFA

	)

87 
	#CRTC_ADDR_REG
 0x3D4

	)

88 
	#CRTC_DATA_REG
 0x3D5

	)

89 
	#START_ADDR_H
 0xC

	)

90 
	#START_ADDR_L
 0xD

	)

91 
	#CURSOR_H
 0xE

	)

92 
	#CURSOR_L
 0xF

	)

93 
	#V_MEM_BASE
 0xB8000

	)

94 
	#V_MEM_SIZE
 0x8000

	)

97 
	#CLK_ELE
 0x70

	)

103 
	#CLK_IO
 0x71

	)

105 
	#YEAR
 9

	)

106 
	#MONTH
 8

	)

107 
	#DAY
 7

	)

108 
	#HOUR
 4

	)

109 
	#MINUTE
 2

	)

110 
	#SECOND
 0

	)

111 
	#CLK_STATUS
 0x0B

	)

112 
	#CLK_HEALTH
 0x0E

	)

124 
	#NR_IRQ
 16

	)

125 
	#CLOCK_IRQ
 0

	)

126 
	#KEYBOARD_IRQ
 1

	)

127 
	#CASCADE_IRQ
 2

	)

128 
	#ETHER_IRQ
 3

	)

129 
	#SECONDARY_IRQ
 3

	)

130 
	#RS232_IRQ
 4

	)

131 
	#XT_WINI_IRQ
 5

	)

132 
	#FLOPPY_IRQ
 6

	)

133 
	#PRINTER_IRQ
 7

	)

134 
	#AT_WINI_IRQ
 14

	)

138 
	#INVALID_DRIVER
 -20

	)

139 
	#INTERRUPT
 -10

	)

140 
	#TASK_TTY
 0

	)

141 
	#TASK_SYS
 1

	)

142 
	#TASK_HD
 2

	)

143 
	#TASK_FS
 3

	)

144 
	#TASK_MM
 4

	)

145 
	#INIT
 5

	)

146 
	#ANY
 (
NR_TASKS
 + 
NR_PROCS
 + 10)

	)

147 
	#NO_TASK
 (
NR_TASKS
 + 
NR_PROCS
 + 20)

	)

149 
	#MAX_TICKS
 0x7FFFABCD

	)

152 
	#NR_SYS_CALL
 3

	)

155 
	#SEND
 1

	)

156 
	#RECEIVE
 2

	)

157 
	#BOTH
 3

	)

160 
	#MAG_CH_PANIC
 '\002'

	)

161 
	#MAG_CH_ASSERT
 '\003'

	)

167 
	emsgty≥
 {

172 
	mHARD_INT
 = 1,

175 
	mGET_TICKS
, 
	mGET_PID
, 
	mGET_RTC_TIME
,

178 
	mMKDIR
, 
	mOPEN
, 
	mCLOSE
, 
	mREAD
, 
	mWRITE
, 
	mLSEEK
, 
	mSTAT
, 
	mUNLINK
,

181 
	mSUSPEND_PROC
, 
	mRESUME_PROC
,

184 
	mEXEC
, 
	mWAIT
, 
	mCHDIR
,

187 
	mFORK
, 
	mEXIT
,

190 
	mSYSCALL_RET
,

193 
	mDEV_OPEN
 = 1001,

194 
	mDEV_CLOSE
,

195 
	mDEV_READ
,

196 
	mDEV_WRITE
,

197 
	mDEV_IOCTL


201 
	#FD
 
u
.
m3
.
m3i1


	)

202 
	#PATHNAME
 
u
.
m3
.
m3p1


	)

203 
	#PATH
 
u
.
m3
.
m3p2


	)

204 
	#FLAGS
 
u
.
m3
.
m3i1


	)

205 
	#NAME_LEN
 
u
.
m3
.
m3i2


	)

206 
	#BUF_LEN
 
u
.
m3
.
m3i3


	)

207 
	#CNT
 
u
.
m3
.
m3i2


	)

208 
	#REQUEST
 
u
.
m3
.
m3i2


	)

209 
	#PROC_NR
 
u
.
m3
.
m3i3


	)

210 
	#DEVICE
 
u
.
m3
.
m3i4


	)

211 
	#POSITION
 
u
.
m3
.
m3l1


	)

212 
	#BUF
 
u
.
m3
.
m3p2


	)

213 
	#OFFSET
 
u
.
m3
.
m3i2


	)

214 
	#WHENCE
 
u
.
m3
.
m3i3


	)

216 
	#PID
 
u
.
m3
.
m3i2


	)

217 
	#RETVAL
 
u
.
m3
.
m3i1


	)

218 
	#STATUS
 
u
.
m3
.
m3i1


	)

228 
	#DIOCTL_GET_GEO
 1

	)

231 
	#INVALID_SECTOR
 -1

	)

232 
	#SECTOR_SIZE
 512

	)

233 
	#SECTOR_BITS
 (
SECTOR_SIZE
 * 8)

	)

234 
	#SECTOR_SIZE_SHIFT
 9

	)

237 
	#NO_DEV
 0

	)

238 
	#DEV_FLOPPY
 1

	)

239 
	#DEV_CDROM
 2

	)

240 
	#DEV_HD
 3

	)

241 
	#DEV_CHAR_TTY
 4

	)

242 
	#DEV_SCSI
 5

	)

244 
	#MAJOR_SHIFT
 8

	)

245 
	#MAKE_DEV
(
a
,
b
Ë(◊ << 
MAJOR_SHIFT
Ë| b)

	)

247 
	#MAJOR
(
x
Ë((x >> 
MAJOR_SHIFT
Ë& 0xFF)

	)

248 
	#MINOR
(
x
Ë(x & 0xFF)

	)

250 
	#INVALID_INODE
 0

	)

251 
	#ROOT_INODE
 1

	)

253 
	#MAX_DRIVES
 2

	)

254 
	#NR_PART_PER_DRIVE
 4

	)

255 
	#NR_SUB_PER_PART
 16

	)

256 
	#NR_SUB_PER_DRIVE
 (
NR_SUB_PER_PART
 * 
NR_PART_PER_DRIVE
)

	)

257 
	#NR_PRIM_PER_DRIVE
 (
NR_PART_PER_DRIVE
 + 1)

	)

265 
	#MAX_PRIM
 (
MAX_DRIVES
 * 
NR_PRIM_PER_DRIVE
 - 1)

	)

267 
	#MAX_SUBPARTITIONS
 (
NR_SUB_PER_DRIVE
 * 
MAX_DRIVES
)

	)

270 
	#MINOR_hd1a
 0x10

	)

271 
	#MINOR_hd2a
 (
MINOR_hd1a
+
NR_SUB_PER_PART
)

	)

273 
	#ROOT_DEV
 
	`MAKE_DEV
(
DEV_HD
, 
MINOR_BOOT
)

	)

275 
	#P_PRIMARY
 0

	)

276 
	#P_EXTENDED
 1

	)

278 
	#ORANGES_PART
 0x99

	)

279 
	#NO_PART
 0x00

	)

280 
	#EXT_PART
 0x05

	)

282 
	#NR_FILES
 64

	)

283 
	#NR_FILE_DESC
 64

	)

284 
	#NR_INODE
 64

	)

285 
	#NR_SUPER_BLOCK
 8

	)

289 
	#I_TYPE_MASK
 0170000

	)

290 
	#I_REGULAR
 0100000

	)

291 
	#I_BLOCK_SPECIAL
 0060000

	)

292 
	#I_DIRECTORY
 0040000

	)

293 
	#I_CHAR_SPECIAL
 0020000

	)

294 
	#I_NAMED_PIPE
 0010000

	)

296 
	#is_•ecül
(
m
Ë((((mË& 
I_TYPE_MASK
Ë=
I_BLOCK_SPECIAL
) || \

297 (((
m
Ë& 
I_TYPE_MASK
Ë=
I_CHAR_SPECIAL
))

	)

299 
	#NR_DEFAULT_FILE_SECTS
 2048

	)

	@UnitTest/fs/v1.0/alloc_zone/fs.h

10 #i‚def 
_ORANGES_FS_H_


11 
	#_ORANGES_FS_H_


	)

17 
	sdev_drv_m≠
 {

18 
	mdrivî_ƒ
;

25 
	#MAGIC_V1
 0x111

	)

33 
	ssu≥r_block
 {

34 
u32
 
	mmagic
;

35 
u32
 
	mƒ_öodes
;

36 
u32
 
	mƒ_£˘s
;

37 
u32
 
	mƒ_im≠_£˘s
;

38 
u32
 
	mƒ_sm≠_£˘s
;

39 
u32
 
	mn_1°_£˘
;

40 
u32
 
	mƒ_öode_£˘s
;

41 
u32
 
	mroŸ_öode
;

42 
u32
 
	möode_size
;

43 
u32
 
	möode_isize_off
;

44 
u32
 
	möode_z⁄e_off
;

45 
u32
 
	mdú_ít_size
;

46 
u32
 
	mdú_ít_öode_off
;

47 
u32
 
	mdú_ít_‚ame_off
;

52 
	msb_dev
;

62 
	#SUPER_BLOCK_SIZE
 56

	)

75 
	söode
 {

76 
u32
 
	mi_mode
;

77 
u32
 
	mi_size
;

79 
u32
 
	mi_ƒ_£˘s
;

80 
z⁄e_t
 
	mi_z⁄e
[10];

81 
u8
 
	m_unu£d
[12];

84 
	mi_dev
;

85 
	mi_˙t
;

86 
	mi_num
;

96 
	#INODE_SIZE
 ((
öode
Ë- 12)

	)

103 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

110 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

117 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

124 
	#NO_ZONE
 0

	)

131 
	#DEV_ZONE
 0

	)

138 
	#NR_DIRECT_ZONE
 8

	)

145 
	#SECOND_LEVEL_ZONE
 8

	)

152 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

159 
	#THIRD_LEVEL_ZONE
 9

	)

167 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

174 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

180 
	sfûe_desc
 {

181 
	mfd_mode
;

182 
	mfd_pos
;

183 
	mfd_˙t
;

184 
öode
* 
	mfd_öode
;

	@UnitTest/fs/v1.0/alloc_zone/type.h

8 #i‚de‡
_ORANGES_TYPE_H_


9 
	#_ORANGES_TYPE_H_


	)

12 
	#PUBLIC


	)

13 
	#PRIVATE
 

	)

15 
	tu64
;

16 
	tu32
;

17 
	tu16
;

18 
	tu8
;

20 * 
	tva_li°
;

22 (*
	göt_h™dÀr
) ();

23 (*
	gèsk_f
) ();

24 (*
	túq_h™dÀr
Ë(
	túq
);

26 * 
	tsy°em_ˇŒ
;

32 
	smess1
 {

33 
m1i1
;

34 
m1i2
;

35 
m1i3
;

36 
m1i4
;

38 
	smess2
 {

39 * 
m2p1
;

40 * 
m2p2
;

41 * 
m2p3
;

42 * 
m2p4
;

44 
	smess3
 {

45 
m3i1
;

46 
m3i2
;

47 
m3i3
;

48 
m3i4
;

49 
u64
 
m3l1
;

50 
u64
 
m3l2
;

51 * 
m3p1
;

52 * 
m3p2
;

55 
sour˚
;

56 
ty≥
;

58 
mess1
 
m1
;

59 
mess2
 
m2
;

60 
mess3
 
m3
;

61 } 
u
;

62 } 
	tMESSAGE
;

65 
	sboŸ_∑øms
 {

66 
mem_size
;

67 * 
kî√l_fûe
;

71 
u32
 
	tz⁄e_t
;

	@UnitTest/fs/v1.0/rdwt_zone/const.h

8 #i‚def 
_ORANGES_CONST_H_


9 
	#_ORANGES_CONST_H_


	)

12 #i‚de‡
NULL


13 
	#NULL
 ((*Ë0)

	)

17 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

18 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

26 
	#BLACK
 0x0

	)

27 
	#WHITE
 0x7

	)

28 
	#RED
 0x4

	)

29 
	#GREEN
 0x2

	)

30 
	#BLUE
 0x1

	)

31 
	#FLASH
 0x80

	)

32 
	#BRIGHT
 0x08

	)

33 
	#MAKE_COLOR
(
x
,
y
Ë((x<<4Ë| yË

	)

36 
	#GDT_SIZE
 128

	)

37 
	#IDT_SIZE
 256

	)

40 
	#PRIVILEGE_KRNL
 0

	)

41 
	#PRIVILEGE_TASK
 1

	)

42 
	#PRIVILEGE_USER
 3

	)

44 
	#RPL_KRNL
 
SA_RPL0


	)

45 
	#RPL_TASK
 
SA_RPL1


	)

46 
	#RPL_USER
 
SA_RPL3


	)

49 
	#SENDING
 0x02

	)

50 
	#RECEIVING
 0x04

	)

51 
	#WAITING
 0x08

	)

52 
	#HANGING
 0x10

	)

53 
	#FREE_SLOT
 0x20

	)

58 
	#NR_CONSOLES
 3

	)

61 
	#INT_M_CTL
 0x20

	)

62 
	#INT_M_CTLMASK
 0x21

	)

63 
	#INT_S_CTL
 0xA0

	)

64 
	#INT_S_CTLMASK
 0xA1

	)

67 
	#TIMER0
 0x40

	)

68 
	#TIMER_MODE
 0x43

	)

69 
	#RATE_GENERATOR
 0x34

	)

72 
	#TIMER_FREQ
 1193182L

	)

73 
	#HZ
 100

	)

77 
	#KB_DATA
 0x60

	)

80 
	#KB_CMD
 0x64

	)

83 
	#LED_CODE
 0xED

	)

84 
	#KB_ACK
 0xFA

	)

87 
	#CRTC_ADDR_REG
 0x3D4

	)

88 
	#CRTC_DATA_REG
 0x3D5

	)

89 
	#START_ADDR_H
 0xC

	)

90 
	#START_ADDR_L
 0xD

	)

91 
	#CURSOR_H
 0xE

	)

92 
	#CURSOR_L
 0xF

	)

93 
	#V_MEM_BASE
 0xB8000

	)

94 
	#V_MEM_SIZE
 0x8000

	)

97 
	#CLK_ELE
 0x70

	)

103 
	#CLK_IO
 0x71

	)

105 
	#YEAR
 9

	)

106 
	#MONTH
 8

	)

107 
	#DAY
 7

	)

108 
	#HOUR
 4

	)

109 
	#MINUTE
 2

	)

110 
	#SECOND
 0

	)

111 
	#CLK_STATUS
 0x0B

	)

112 
	#CLK_HEALTH
 0x0E

	)

124 
	#NR_IRQ
 16

	)

125 
	#CLOCK_IRQ
 0

	)

126 
	#KEYBOARD_IRQ
 1

	)

127 
	#CASCADE_IRQ
 2

	)

128 
	#ETHER_IRQ
 3

	)

129 
	#SECONDARY_IRQ
 3

	)

130 
	#RS232_IRQ
 4

	)

131 
	#XT_WINI_IRQ
 5

	)

132 
	#FLOPPY_IRQ
 6

	)

133 
	#PRINTER_IRQ
 7

	)

134 
	#AT_WINI_IRQ
 14

	)

138 
	#INVALID_DRIVER
 -20

	)

139 
	#INTERRUPT
 -10

	)

140 
	#TASK_TTY
 0

	)

141 
	#TASK_SYS
 1

	)

142 
	#TASK_HD
 2

	)

143 
	#TASK_FS
 3

	)

144 
	#TASK_MM
 4

	)

145 
	#INIT
 5

	)

146 
	#ANY
 (
NR_TASKS
 + 
NR_PROCS
 + 10)

	)

147 
	#NO_TASK
 (
NR_TASKS
 + 
NR_PROCS
 + 20)

	)

149 
	#MAX_TICKS
 0x7FFFABCD

	)

152 
	#NR_SYS_CALL
 3

	)

155 
	#SEND
 1

	)

156 
	#RECEIVE
 2

	)

157 
	#BOTH
 3

	)

160 
	#MAG_CH_PANIC
 '\002'

	)

161 
	#MAG_CH_ASSERT
 '\003'

	)

167 
	emsgty≥
 {

172 
	mHARD_INT
 = 1,

175 
	mGET_TICKS
, 
	mGET_PID
, 
	mGET_RTC_TIME
,

178 
	mMKDIR
, 
	mOPEN
, 
	mCLOSE
, 
	mREAD
, 
	mWRITE
, 
	mLSEEK
, 
	mSTAT
, 
	mUNLINK
,

181 
	mSUSPEND_PROC
, 
	mRESUME_PROC
,

184 
	mEXEC
, 
	mWAIT
, 
	mCHDIR
,

187 
	mFORK
, 
	mEXIT
,

190 
	mSYSCALL_RET
,

193 
	mDEV_OPEN
 = 1001,

194 
	mDEV_CLOSE
,

195 
	mDEV_READ
,

196 
	mDEV_WRITE
,

197 
	mDEV_IOCTL


201 
	#FD
 
u
.
m3
.
m3i1


	)

202 
	#PATHNAME
 
u
.
m3
.
m3p1


	)

203 
	#PATH
 
u
.
m3
.
m3p2


	)

204 
	#FLAGS
 
u
.
m3
.
m3i1


	)

205 
	#NAME_LEN
 
u
.
m3
.
m3i2


	)

206 
	#BUF_LEN
 
u
.
m3
.
m3i3


	)

207 
	#CNT
 
u
.
m3
.
m3i2


	)

208 
	#REQUEST
 
u
.
m3
.
m3i2


	)

209 
	#PROC_NR
 
u
.
m3
.
m3i3


	)

210 
	#DEVICE
 
u
.
m3
.
m3i4


	)

211 
	#POSITION
 
u
.
m3
.
m3l1


	)

212 
	#BUF
 
u
.
m3
.
m3p2


	)

213 
	#OFFSET
 
u
.
m3
.
m3i2


	)

214 
	#WHENCE
 
u
.
m3
.
m3i3


	)

216 
	#PID
 
u
.
m3
.
m3i2


	)

217 
	#RETVAL
 
u
.
m3
.
m3i1


	)

218 
	#STATUS
 
u
.
m3
.
m3i1


	)

228 
	#DIOCTL_GET_GEO
 1

	)

231 
	#INVALID_SECTOR
 -1

	)

232 
	#SECTOR_SIZE
 512

	)

233 
	#SECTOR_BITS
 (
SECTOR_SIZE
 * 8)

	)

234 
	#SECTOR_SIZE_SHIFT
 9

	)

237 
	#NO_DEV
 0

	)

238 
	#DEV_FLOPPY
 1

	)

239 
	#DEV_CDROM
 2

	)

240 
	#DEV_HD
 3

	)

241 
	#DEV_CHAR_TTY
 4

	)

242 
	#DEV_SCSI
 5

	)

244 
	#MAJOR_SHIFT
 8

	)

245 
	#MAKE_DEV
(
a
,
b
Ë(◊ << 
MAJOR_SHIFT
Ë| b)

	)

247 
	#MAJOR
(
x
Ë((x >> 
MAJOR_SHIFT
Ë& 0xFF)

	)

248 
	#MINOR
(
x
Ë(x & 0xFF)

	)

250 
	#INVALID_INODE
 0

	)

251 
	#ROOT_INODE
 1

	)

253 
	#MAX_DRIVES
 2

	)

254 
	#NR_PART_PER_DRIVE
 4

	)

255 
	#NR_SUB_PER_PART
 16

	)

256 
	#NR_SUB_PER_DRIVE
 (
NR_SUB_PER_PART
 * 
NR_PART_PER_DRIVE
)

	)

257 
	#NR_PRIM_PER_DRIVE
 (
NR_PART_PER_DRIVE
 + 1)

	)

265 
	#MAX_PRIM
 (
MAX_DRIVES
 * 
NR_PRIM_PER_DRIVE
 - 1)

	)

267 
	#MAX_SUBPARTITIONS
 (
NR_SUB_PER_DRIVE
 * 
MAX_DRIVES
)

	)

270 
	#MINOR_hd1a
 0x10

	)

271 
	#MINOR_hd2a
 (
MINOR_hd1a
+
NR_SUB_PER_PART
)

	)

273 
	#ROOT_DEV
 
	`MAKE_DEV
(
DEV_HD
, 
MINOR_BOOT
)

	)

275 
	#P_PRIMARY
 0

	)

276 
	#P_EXTENDED
 1

	)

278 
	#ORANGES_PART
 0x99

	)

279 
	#NO_PART
 0x00

	)

280 
	#EXT_PART
 0x05

	)

282 
	#NR_FILES
 64

	)

283 
	#NR_FILE_DESC
 64

	)

284 
	#NR_INODE
 64

	)

285 
	#NR_SUPER_BLOCK
 8

	)

289 
	#I_TYPE_MASK
 0170000

	)

290 
	#I_REGULAR
 0100000

	)

291 
	#I_BLOCK_SPECIAL
 0060000

	)

292 
	#I_DIRECTORY
 0040000

	)

293 
	#I_CHAR_SPECIAL
 0020000

	)

294 
	#I_NAMED_PIPE
 0010000

	)

296 
	#is_•ecül
(
m
Ë((((mË& 
I_TYPE_MASK
Ë=
I_BLOCK_SPECIAL
) || \

297 (((
m
Ë& 
I_TYPE_MASK
Ë=
I_CHAR_SPECIAL
))

	)

299 
	#NR_DEFAULT_FILE_SECTS
 2048

	)

	@UnitTest/fs/v1.0/rdwt_zone/fs.h

10 #i‚def 
_ORANGES_FS_H_


11 
	#_ORANGES_FS_H_


	)

17 
	sdev_drv_m≠
 {

18 
	mdrivî_ƒ
;

25 
	#MAGIC_V1
 0x111

	)

33 
	ssu≥r_block
 {

34 
u32
 
	mmagic
;

35 
u32
 
	mƒ_öodes
;

36 
u32
 
	mƒ_£˘s
;

37 
u32
 
	mƒ_im≠_£˘s
;

38 
u32
 
	mƒ_sm≠_£˘s
;

39 
u32
 
	mn_1°_£˘
;

40 
u32
 
	mƒ_öode_£˘s
;

41 
u32
 
	mroŸ_öode
;

42 
u32
 
	möode_size
;

43 
u32
 
	möode_isize_off
;

44 
u32
 
	möode_z⁄e_off
;

45 
u32
 
	mdú_ít_size
;

46 
u32
 
	mdú_ít_öode_off
;

47 
u32
 
	mdú_ít_‚ame_off
;

52 
	msb_dev
;

62 
	#SUPER_BLOCK_SIZE
 56

	)

75 
	söode
 {

76 
u32
 
	mi_mode
;

77 
u32
 
	mi_size
;

79 
u32
 
	mi_ƒ_£˘s
;

80 
z⁄e_t
 
	mi_z⁄e
[10];

81 
u8
 
	m_unu£d
[12];

84 
	mi_dev
;

85 
	mi_˙t
;

86 
	mi_num
;

96 
	#INODE_SIZE
 ((
öode
Ë- 12)

	)

103 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

110 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

117 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

124 
	#NO_ZONE
 0

	)

131 
	#DEV_ZONE
 0

	)

138 
	#NR_DIRECT_ZONE
 8

	)

145 
	#SECOND_LEVEL_ZONE
 8

	)

152 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

159 
	#THIRD_LEVEL_ZONE
 9

	)

167 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

174 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

180 
	sfûe_desc
 {

181 
	mfd_mode
;

182 
	mfd_pos
;

183 
	mfd_˙t
;

184 
öode
* 
	mfd_öode
;

187 
	#phys_c›y
 
mem˝y


	)

	@UnitTest/fs/v1.0/rdwt_zone/rdwt_zone.c

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dio.h
>

22 
	~"c⁄°.h
"

23 
	~"ty≥.h
"

24 
	~"fs.h
"

25 
	~"rdwt_z⁄e.h
"

27 
	ghd
[
SECTOR_SIZE
 * 1000];

29 
	gfsbuf
[
SECTOR_SIZE
];

31 
	gfûe
[
SECTOR_SIZE
 * 521];

33 
öode
 
	gpö
 = {0, 0, 0, {0}, {0}, 800, 0, 0};

35 
su≥r_block
 
	gsu≥r_block
[
NR_SUPER_BLOCK
] = {{273, 4096, 40257, 1,

47 
	$va2œ
 (
i
, * 
buf
)

49  
buf
;

50 
	}
}

52 
PUBLIC
 
su≥r_block
 * 
	$gë_su≥r_block
(
dev
)

54 
su≥r_block
 * 
sb
 = super_block;

55 ; 
sb
 < &
su≥r_block
[
NR_SUPER_BLOCK
]; sb++)

56 i‡(
sb
->
sb_dev
 =
dev
)

57  
sb
;

62 
	}
}

64 
PUBLIC
 
	$RD_SECT
(
dev
, 
£˘_ƒ
)

66 
	`mem˝y
(
fsbuf
,

67 
hd
 + 
£˘_ƒ
 * 
SECTOR_SIZE
,

68 
SECTOR_SIZE
);

69 
	}
}

71 
PUBLIC
 
	$WR_SECT
(
dev
, 
£˘_ƒ
)

73 
	`mem˝y
(
hd
 + 
£˘_ƒ
 * 
SECTOR_SIZE
,

74 
fsbuf
,

75 
SECTOR_SIZE
);

76 
	}
}

78 
PRIVATE
 
	$Æloc_bô
(
dev
)

80 
i
;

81 
j
;

82 
k
;

84 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

86 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

87 
Êag_bô_Æloc
 = 0;

88 
bô_Æloc
 = 0;

89 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

91 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

94 
j
 = 0; j < 
SECTOR_SIZE
 ; j++) {

96 i‡(
fsbuf
[
j
] != ()0xFF) {

97 
k
 = 0;

98 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

101 
fsbuf
[
j
] |(1 << 
k
);

102 
Êag_bô_Æloc
 = 1;

103 
bô_Æloc
 = 
i
 * 
SECTOR_SIZE
 + 
j
 * 8 + 
k
;

108 i‡(
Êag_bô_Æloc
) {

110 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

117  
bô_Æloc
;

118 
	}
}

127 
PRIVATE
 

128 
	$Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 )

131 
Æloˇãd_£˘
 = 
	`Æloc_bô
(
dev
);

132 i‡(
INVALID_SECTOR
 =
Æloˇãd_£˘
) {

135 *
£˘‹_±r
 = 
Æloˇãd_£˘
;

136 
	}
}

149 
PRIVATE
 

150 
	$Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_ƒ
, 
z⁄e_t
 * 
i_z⁄e
)

152 
i
;

153 
Êag_no_z⁄e
 = 0;

154 
ƒ_£˘
 = 
Æloc_°¨t
 + 
Æloc_ƒ
;

156 i‡(
Æloc_°¨t
 < 
NR_DIRECT_ZONE
) {

158 
Êag_dúe˘_z⁄e
 = 1;

161 
dúe˘_Æloc_ƒ
 = 
Æloc_ƒ
;

162 i‡(
ƒ_£˘
 > 
NR_DIRECT_ZONE
) {

164 
Êag_dúe˘_z⁄e
 = 0;

165 
dúe˘_Æloc_ƒ
 = 
NR_DIRECT_ZONE
 - 
Æloc_°¨t
;

166 
Æloc_ƒ
 -
dúe˘_Æloc_ƒ
;

168 
i
 = 0; i < 
dúe˘_Æloc_ƒ
; i++) {

169 i‡(
NO_ZONE
 =
i_z⁄e
[
Æloc_°¨t
 + 
i
]) {

170 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
Æloc_°¨t
 + 
i
]);

173 i‡(
Êag_dúe˘_z⁄e
) {

174  
ƒ_£˘
 - 
Æloc_°¨t
;

179 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

181 i‡(
Æloc_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

182 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

183 i‡(
Æloc_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

184 
£c⁄d_Àvñ_°¨t
 = 
Æloc_°¨t
;

188 
Êag_£c⁄d_Àvñ
 = 1;

189 
£c⁄d_Æloc_ƒ
 = 
Æloc_ƒ
;

190 i‡(
ƒ_£˘
 > 
NR_SECOND_LEVEL_ZONE
) {

192 
Êag_£c⁄d_Àvñ
 = 0;

193 
£c⁄d_Æloc_ƒ
 = 
NR_SECOND_LEVEL_ZONE
 - 
£c⁄d_Àvñ_°¨t
;

194 
Æloc_ƒ
 -
£c⁄d_Æloc_ƒ
;

198 
£c⁄d_Àvñ_°¨t
 -
NR_DIRECT_ZONE
;

201 
Êag_no_z⁄e
 = 0;

202 i‡(
NO_ZONE
 =
i_z⁄e
[
SECOND_LEVEL_ZONE
]) {

204 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

205 
Êag_no_z⁄e
 = 1;

208 
	`RD_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

209 
	`mem˝y
((*)
£˘‹s
,

210 (*)
fsbuf
,

211 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

213 i‡(
Êag_no_z⁄e
) {

214 
i
 = 0; i < 
NR_SECT_PER_SECOND_LEVEL_ZONE
; i++) {

215 
£˘‹s
[
i
] = 
NO_ZONE
;

219 
i
 = 0; i < 
£c⁄d_Æloc_ƒ
; i++) {

220 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]) {

221 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]);

226 
	`mem˝y
((*)
fsbuf
,

227 (*)
£˘‹s
,

228 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

229 
	`WR_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

232 i‡(
Êag_£c⁄d_Àvñ
) {

233  
ƒ_£˘
 - 
Æloc_°¨t
;

237 i‡(
Æloc_°¨t
 < 
NR_THIRD_LEVEL_ZONE
) {

239 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

240 i‡(
Æloc_°¨t
 > 
thúd_Àvñ_°¨t
) {

241 
thúd_Àvñ_°¨t
 = 
Æloc_°¨t
;

244 
Êag_thúd_Àvñ
 = 1;

245 
thúd_Æloc_ƒ
 = 
Æloc_ƒ
;

246 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

248 
Êag_thúd_Àvñ
 = 0;

249 
thúd_Æloc_ƒ
 = 
NR_THIRD_LEVEL_ZONE
 - 
thúd_Àvñ_°¨t
;

250 
Æloc_ƒ
 -
thúd_Æloc_ƒ
;

254 
thúd_Àvñ_°¨t
 -
NR_SECOND_LEVEL_ZONE
;

257 
Êag_no_z⁄e
 = 0;

258 i‡(
NO_ZONE
 =
i_z⁄e
[
THIRD_LEVEL_ZONE
]) {

260 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

261 
Êag_no_z⁄e
 = 1;

264 
	`RD_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

265 
	`mem˝y
((*)
£˘‹s
,

266 (*)
fsbuf
,

267 
NR_ZONE_PER_SECT
 * () );

269 i‡(
Êag_no_z⁄e
) {

270 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

271 
£˘‹s
[
i
] = 
NO_ZONE
;

275 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

276 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

277 
i
 = 0; i < 
thúd_Æloc_ƒ
; i++) {

278 
£c⁄d_Àvñ_ödex
 =

279 (
thúd_Àvñ_°¨t
 + 
i
) /

280 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

281 
thúd_Àvñ_ödex
 =

282 (
thúd_Àvñ_°¨t
 + 
i
) %

283 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

285 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


286 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

288 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

291 
	`mem˝y
((*)
fsbuf
,

292 (*)
cuºít_z⁄es
,

293 
NR_ZONE_PER_SECT
 * () );

294 
	`WR_SECT
(
dev
, 
cuºít_£c⁄d_Àvñ_z⁄e
);

298 
Êag_no_z⁄e
 = 0;

299 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_ödex
]) {

300 
Êag_no_z⁄e
 = 1;

301 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

303 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
£˘‹s
[
£c⁄d_Àvñ_ödex
];

305 
	`RD_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

306 
	`mem˝y
((*)
cuºít_z⁄es
,

307 (*)
fsbuf
,

308 
NR_ZONE_PER_SECT
 * () );

311 i‡(
Êag_no_z⁄e
) {

312 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

313 
cuºít_z⁄es
[
i
] = 
NO_ZONE
;

317 i‡(
NO_ZONE
 =
cuºít_z⁄es
[
thúd_Àvñ_ödex
]) {

318 
	`Æloc_£˘
(
dev
, &
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

323 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

326 
	`mem˝y
((*)
fsbuf
,

327 (*)
cuºít_z⁄es
,

328 
NR_ZONE_PER_SECT
 * () );

329 
	`WR_SECT
(
dev
, 
cuºít_£c⁄d_Àvñ_z⁄e
);

333 
	`mem˝y
((*)
fsbuf
,

334 (*)
£˘‹s
,

335 
NR_ZONE_PER_SECT
 * () );

336 
	`WR_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

339 i‡(
Êag_thúd_Àvñ
) {

340  
ƒ_£˘
 - 
Æloc_°¨t
;

345 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

351 
	}
}

353 
PRIVATE
 

354 
	$rdwt_z⁄es
 ( 
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
)

359 
i
;

360 
cou¡
 = 0;

361 
pos_íd
 = 
pos
 + 
Àn
;

363 
ƒ_£˘_°¨t
 = 
pos
 >> 
SECTOR_SIZE_SHIFT
;

364 
ƒ_rw_£˘
 = 
Àn
 >> 
SECTOR_SIZE_SHIFT
;

365 
off
 = 
pos_íd
 % 
SECTOR_SIZE
;

368 i‡(
off
 > 0) {

369 
ƒ_rw_£˘
 ++;

372 
ƒ_£˘
 = 
ƒ_£˘_°¨t
 + 
ƒ_rw_£˘
;

375 i‡(
ƒ_£˘
 > 
pö
->
i_ƒ_£˘s
) {

377 
u32
 
z⁄e_amou¡
 = 
	`Æloc_z⁄e
(
pö
->
i_dev
,Öö->
i_ƒ_£˘s
, 
ƒ_£˘
 -Öö->i_ƒ_£˘s,Öö->
i_z⁄e
);

379 
pö
->
i_ƒ_£˘s
 +
z⁄e_amou¡
;

382 i‡(
ƒ_£˘_°¨t
 < 
NR_DIRECT_ZONE
) {

384 
Êag_dúe˘_z⁄e
 = 1;

387 
dúe˘_ƒ_rw_£˘
 = 
ƒ_rw_£˘
;

388 i‡(
ƒ_£˘
 > 
NR_DIRECT_ZONE
) {

390 
Êag_dúe˘_z⁄e
 = 0;

391 
dúe˘_ƒ_rw_£˘
 = 
NR_DIRECT_ZONE
 - 
ƒ_£˘_°¨t
;

392 
ƒ_rw_£˘
 -
dúe˘_ƒ_rw_£˘
;

394 
i
 = 0; i < 
dúe˘_ƒ_rw_£˘
; i++) {

395 i‡(
WRITE
 =
mode
) {

396 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

397 (*)
	`va2œ
(
§c
, 
buf
 + 
i
 * 
SECTOR_SIZE
),

398 
SECTOR_SIZE
);

399 
	`WR_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
ƒ_£˘_°¨t
 + 
i
]);

400 } i‡(
READ
 =
mode
) {

401 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
ƒ_£˘_°¨t
 + 
i
]);

402 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
i
 * 
SECTOR_SIZE
),

403 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

404 
SECTOR_SIZE
);

407 i‡(
Êag_dúe˘_z⁄e
) {

408  
off
 ? ((
ƒ_rw_£˘
 - 1Ë* 
SECTOR_SIZE
 + off)

409 :(
ƒ_rw_£˘
 * 
SECTOR_SIZE
);

414 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

416 i‡(
ƒ_£˘_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

417 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

418 i‡(
ƒ_£˘_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

419 
£c⁄d_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

422 
Êag_£c⁄d_Àvñ
 = 1;

423 
£c⁄d_ƒ_rw_£˘
 = 
ƒ_rw_£˘
;

424 i‡(
ƒ_£˘
 > 
NR_SECOND_LEVEL_ZONE
) {

426 
Êag_£c⁄d_Àvñ
 = 0;

427 
£c⁄d_ƒ_rw_£˘
 = 
NR_SECOND_LEVEL_ZONE
 - 
£c⁄d_Àvñ_°¨t
;

428 
ƒ_rw_£˘
 -
£c⁄d_ƒ_rw_£˘
;

432 
£c⁄d_Àvñ_°¨t
 -
NR_DIRECT_ZONE
;

434 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

435 
	`mem˝y
((*)
£˘‹s
,

436 (*)
fsbuf
,

437 
NR_ZONE_PER_SECT
 * () );

439 
i
 = 0; i < 
£c⁄d_ƒ_rw_£˘
; i++) {

440 i‡(
WRITE
 =
mode
) {

441 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

442 (*)
	`va2œ
(
§c
, 
buf
 + 
i
 * 
SECTOR_SIZE
),

443 
SECTOR_SIZE
);

444 
	`WR_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]);

445 } if(
READ
 =
mode
) {

446 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]);

447 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
i
 * 
SECTOR_SIZE
),

448 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

449 
SECTOR_SIZE
);

455 i‡(
Êag_£c⁄d_Àvñ
) {

456  
off
 ? ((
ƒ_rw_£˘
 - 1Ë* 
SECTOR_SIZE
 + off)

457 :(
ƒ_rw_£˘
 * 
SECTOR_SIZE
);

461 i‡(
ƒ_£˘_°¨t
 < 
NR_THIRD_LEVEL_ZONE
) {

463 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

464 i‡(
ƒ_£˘_°¨t
 > 
thúd_Àvñ_°¨t
) {

465 
thúd_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

468 
Êag_thúd_Àvñ
 = 1;

469 
thúd_ƒ_rw_£˘
 = 
ƒ_rw_£˘
;

470 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

472 
Êag_thúd_Àvñ
 = 0;

473 
thúd_ƒ_rw_£˘
 = 
NR_THIRD_LEVEL_ZONE
 - 
thúd_Àvñ_°¨t
;

474 
ƒ_rw_£˘
 -
thúd_ƒ_rw_£˘
;

478 
thúd_Àvñ_°¨t
 -
NR_SECOND_LEVEL_ZONE
;

480 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

481 
	`mem˝y
((*)
£˘‹s
,

482 (*)
fsbuf
,

483 
NR_ZONE_PER_SECT
 * () );

485 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

486 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

487 
i
 = 0; i < 
thúd_ƒ_rw_£˘
; i++) {

488 
£c⁄d_Àvñ_ödex
 =

489 (
thúd_Àvñ_°¨t
 + 
i
) /

490 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

491 
thúd_Àvñ_ödex
 =

492 (
thúd_Àvñ_°¨t
 + 
i
) %

493 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

495 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


496 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

497 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

498 
	`mem˝y
((*)
cuºít_z⁄es
,

499 (*)
fsbuf
,

500 
NR_ZONE_PER_SECT
 * () );

505 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
£˘‹s
[
£c⁄d_Àvñ_ödex
];

507 i‡(
WRITE
 =
mode
) {

508 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

509 (*)
	`va2œ
(
§c
, 
buf
 + 
i
 * 
SECTOR_SIZE
),

510 
SECTOR_SIZE
);

511 
	`WR_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

512 } if(
READ
 =
mode
) {

513 
	`RD_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

514 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
i
 * 
SECTOR_SIZE
),

515 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

516 
SECTOR_SIZE
);

522 i‡(
Êag_thúd_Àvñ
) {

523  
off
 ? ((
ƒ_rw_£˘
 - 1Ë* 
SECTOR_SIZE
 + off)

524 :(
ƒ_rw_£˘
 * 
SECTOR_SIZE
);

528 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

534 
	}
}

546 
	$maö
 ( 
¨gc
, *
¨gv
[] )

548 
	`mem£t
(
hd
, 0, (hd));

549 
	`mem£t
(
fûe
, 'a', (file));

550 
a
;

551 
	`¥ötf
("printá(alloc_bit), b(set bit), c(alloc zone) or d(rdwt zone )\n");

552 
	`sˇnf
("%c", &
a
)) {

553 
i
,
j
;

554 
z⁄e_t
 
i_z⁄e
[
NR_ZONE_PER_INODE
] = {
NO_ZONE
};

555 
a
) {

557 
	`¥ötf
("bôáŒoˇãd: %d\n", 
	`Æloc_bô
(800));

560 
	`¥ötf
("what bits do you wantÅo set\nfrom [from] [size]\n");

561 
	`sˇnf
("%d %d", &
i
, &
j
);

562 
	`mem£t
(
hd
 + 
i
, ()0xFF, 
j
);

565 
	`¥ötf
("alloc zone\n [alloc_start] [alloc_end]\n");

566 
	`sˇnf
("%d %d", &
i
, &
j
);

567 
	`Æloc_z⁄e
(800, 
i
, 
j
, 
i_z⁄e
);

570 
	`¥ötf
("rdwt zone\n [pos] [len] \n");

571 
	`sˇnf
("%d %d", &
i
, &
j
);

572 
	`rdwt_z⁄es
(
i
, 
j
, 0, 
fûe
, &
pö
, 
WRITE
);

575 
	`¥ötf
("printá(alloc_bit), b(set bit), or c(alloc zone)\n");

577  
EXIT_SUCCESS
;

578 
	}
}

	@UnitTest/fs/v1.0/rdwt_zone/rdwt_zone.h

20 #i‚def 
_ORANGES_FS_H_


21 
	#_ORANGES_FS_H_


	)

23 
PUBLIC
 
su≥r_block
 * 
gë_su≥r_block
(
dev
);

29 
	sdev_drv_m≠
 {

30 
	mdrivî_ƒ
;

37 
	#MAGIC_V1
 0x111

	)

45 
	ssu≥r_block
 {

46 
u32
 
	mmagic
;

47 
u32
 
	mƒ_öodes
;

48 
u32
 
	mƒ_£˘s
;

49 
u32
 
	mƒ_im≠_£˘s
;

50 
u32
 
	mƒ_sm≠_£˘s
;

51 
u32
 
	mn_1°_£˘
;

52 
u32
 
	mƒ_öode_£˘s
;

53 
u32
 
	mroŸ_öode
;

54 
u32
 
	möode_size
;

55 
u32
 
	möode_isize_off
;

56 
u32
 
	möode_z⁄e_off
;

57 
u32
 
	mdú_ít_size
;

58 
u32
 
	mdú_ít_öode_off
;

59 
u32
 
	mdú_ít_‚ame_off
;

64 
	msb_dev
;

74 
	#SUPER_BLOCK_SIZE
 56

	)

87 
	söode
 {

88 
u32
 
	mi_mode
;

89 
u32
 
	mi_size
;

91 
u32
 
	mi_ƒ_£˘s
;

92 
z⁄e_t
 
	mi_z⁄e
[10];

93 
u8
 
	m_unu£d
[12];

96 
	mi_dev
;

97 
	mi_˙t
;

98 
	mi_num
;

108 
	#INODE_SIZE
 ((
öode
Ë- 12)

	)

115 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

122 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

129 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

136 
	#NO_ZONE
 0

	)

143 
	#DEV_ZONE
 0

	)

150 
	#NR_DIRECT_ZONE
 8

	)

157 
	#SECOND_LEVEL_ZONE
 8

	)

164 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

171 
	#THIRD_LEVEL_ZONE
 9

	)

179 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

186 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

192 
	sfûe_desc
 {

193 
	mfd_mode
;

194 
	mfd_pos
;

195 
	mfd_˙t
;

196 
öode
* 
	mfd_öode
;

	@UnitTest/fs/v1.0/rdwt_zone/type.h

8 #i‚de‡
_ORANGES_TYPE_H_


9 
	#_ORANGES_TYPE_H_


	)

12 
	#PUBLIC


	)

13 
	#PRIVATE
 

	)

15 
	tu64
;

16 
	tu32
;

17 
	tu16
;

18 
	tu8
;

20 * 
	tva_li°
;

22 (*
	göt_h™dÀr
) ();

23 (*
	gèsk_f
) ();

24 (*
	túq_h™dÀr
Ë(
	túq
);

26 * 
	tsy°em_ˇŒ
;

32 
	smess1
 {

33 
m1i1
;

34 
m1i2
;

35 
m1i3
;

36 
m1i4
;

38 
	smess2
 {

39 * 
m2p1
;

40 * 
m2p2
;

41 * 
m2p3
;

42 * 
m2p4
;

44 
	smess3
 {

45 
m3i1
;

46 
m3i2
;

47 
m3i3
;

48 
m3i4
;

49 
u64
 
m3l1
;

50 
u64
 
m3l2
;

51 * 
m3p1
;

52 * 
m3p2
;

55 
sour˚
;

56 
ty≥
;

58 
mess1
 
m1
;

59 
mess2
 
m2
;

60 
mess3
 
m3
;

61 } 
u
;

62 } 
	tMESSAGE
;

65 
	sboŸ_∑øms
 {

66 
mem_size
;

67 * 
kî√l_fûe
;

71 
u32
 
	tz⁄e_t
;

	@UnitTest/fs/v1.0/read_write.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"dúít.h
"

17 
	~"uni°d.h
"

18 
	~"°dlib.h
"

19 
	~"¥oc.h
"

20 
	~"ây.h
"

21 
	~"c⁄sﬁe.h
"

22 
	~"globÆ.h
"

23 
	~"keybﬂrd.h
"

24 
	~"¥Ÿo.h
"

26 
PRIVATE
 
Æloc_bô
 (
dev
);

27 
PRIVATE
 
Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 );

28 
PRIVATE
 
Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_íd
, 
z⁄e_t
 * 
i_z⁄e
);

29 
PRIVATE
 
rdwt_z⁄es
 (
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
);

45 
PRIVATE
 

46 
	$rdwt_z⁄es
 ( 
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
)

49 
	`as£π
(
WRITE
 =
mode
 || 
READ
 == mode);

51 
i
;

52 
cou¡
 = 0;

53 
pos_íd
 = 
pos
 + 
Àn
;

55 
ƒ_£˘_°¨t
 = 
pos
 >> 
SECTOR_SIZE_SHIFT
;

56 
ƒ_£˘_íd
 = 
pos_íd
 >> 
SECTOR_SIZE_SHIFT
;

57 
off
 = 
pos_íd
 % 
SECTOR_SIZE
;

58 i‡(
off
 != 0) {

59 
ƒ_£˘_íd
++;

63 i‡(
ƒ_£˘_íd
 > 
pö
->
i_ƒ_£˘s
) {

65 
u32
 
z⁄e_amou¡
 = 
	`Æloc_z⁄e
(
pö
->
i_dev
,Öö->
i_ƒ_£˘s
, 
ƒ_£˘_íd
,Öö->
i_z⁄e
);

66 
	`as£π
((
ƒ_£˘_íd
 - 
pö
->
i_ƒ_£˘s
 + 1Ë=
z⁄e_amou¡
);

67 
pö
->
i_ƒ_£˘s
 +
z⁄e_amou¡
;

70 i‡(
ƒ_£˘_°¨t
 < 
NR_DIRECT_ZONE
) {

71 
dúe˘_íd
 = 
NR_DIRECT_ZONE
 - 1;

73 
Êag_dúe˘_z⁄e
 = 0;

74 i‡(
ƒ_£˘_íd
 <
dúe˘_íd
) {

76 
Êag_dúe˘_z⁄e
 = 1;

77 
dúe˘_íd
 = 
ƒ_£˘_íd
;

79 
i
 = 
ƒ_£˘_°¨t
; i <
dúe˘_íd
; i++, 
cou¡
++) {

80 i‡(
WRITE
 =
mode
) {

81 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

82 (*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

83 
SECTOR_SIZE
);

84 
	`WR_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
i
]);

85 } i‡(
READ
 =
mode
) {

86 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
i
]);

87 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

88 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

89 
SECTOR_SIZE
);

92 i‡(
Êag_dúe˘_z⁄e
) {

93  (
ƒ_£˘_íd
 - 
ƒ_£˘_°¨t
)

94 * 
SECTOR_SIZE


95 + 
off
;

100 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

102 i‡(
ƒ_£˘_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

103 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

104 
£c⁄d_Àvñ_íd
 = 
NR_SECOND_LEVEL_ZONE
 - 1;

106 
Êag_£c⁄d_Àvñ
 = 0;

107 i‡(
ƒ_£˘_íd
 <
£c⁄d_Àvñ_íd
) {

109 
Êag_£c⁄d_Àvñ
 = 1;

110 
£c⁄d_Àvñ_íd
 = 
ƒ_£˘_íd
;

112 i‡(
ƒ_£˘_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

113 
£c⁄d_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

116 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

117 
	`mem˝y
((*)
£˘‹s
,

118 (*)
fsbuf
,

119 
NR_SECOND_LEVEL_ZONE
 * () );

121 
i
 = 
£c⁄d_Àvñ_°¨t
; i <
£c⁄d_Àvñ_íd
; i++, 
cou¡
++) {

122 i‡(
WRITE
 =
mode
) {

123 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

124 (*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

125 
SECTOR_SIZE
);

126 
	`WR_SECT
(
pö
->
i_dev
, 
£˘‹s
[
i
]);

127 } if(
READ
 =
mode
) {

128 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
i
]);

129 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

130 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

131 
SECTOR_SIZE
);

137 i‡(
Êag_£c⁄d_Àvñ
) {

138  (
ƒ_£˘_íd
 - 
ƒ_£˘_°¨t
)

139 * 
SECTOR_SIZE


140 + 
off
;

144 i‡(
ƒ_£˘_íd
 < 
NR_THIRD_LEVEL_ZONE
) {

146 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

147 
thúd_Àvñ_íd
 = 
NR_THIRD_LEVEL_ZONE
 - 1;

149 
Êag_thúd_Àvñ
 = 0;

150 i‡(
ƒ_£˘_íd
 <
thúd_Àvñ_íd
) {

152 
Êag_thúd_Àvñ
 = 1;

153 
thúd_Àvñ_íd
 = 
ƒ_£˘_íd
;

155 i‡(
ƒ_£˘_°¨t
 > 
thúd_Àvñ_°¨t
) {

156 
thúd_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

159 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

160 
	`mem˝y
((*)
£˘‹s
,

161 (*)
fsbuf
,

162 
NR_ZONE_PER_SECT
 * () );

164 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

165 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

166 
i
 = 
thúd_Àvñ_°¨t
; i <
thúd_Àvñ_íd
; i++, 
cou¡
++) {

167 
£c⁄d_Àvñ_ödex
 =

168 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë/ 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

169 
thúd_Àvñ_ödex
 =

170 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë% 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

172 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


173 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

174 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

175 
	`mem˝y
((*)
cuºít_z⁄es
,

176 (*)
fsbuf
,

177 
NR_ZONE_PER_SECT
 * () );

179 i‡(
WRITE
 =
mode
) {

180 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

181 (*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

182 
SECTOR_SIZE
);

183 
	`WR_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

184 } if(
READ
 =
mode
) {

185 
	`RD_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

186 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

187 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

188 
SECTOR_SIZE
);

194 i‡(
Êag_thúd_Àvñ
) {

195  (
ƒ_£˘_íd
 - 
ƒ_£˘_°¨t
)

196 * 
SECTOR_SIZE


197 + 
off
;

201 i‡(
ƒ_£˘_íd
 >
NR_THIRD_LEVEL_ZONE
) {

203 
	`∑nic
("buf isÅooÜarge");

207 
	}
}

220 
PUBLIC
 
	$do_rdwt
()

222 
fd
 = 
fs_msg
.
FD
;

223 * 
buf
 = 
fs_msg
.
BUF
;

224 
Àn
 = 
fs_msg
.
CNT
;

226 
§c
 = 
fs_msg
.
sour˚
;

228 
	`as£π
((
pˇŒî
->
fûp
[
fd
] >&
f_desc_èbÀ
[0]) &&

229 (
pˇŒî
->
fûp
[
fd
] < &
f_desc_èbÀ
[
NR_FILE_DESC
]));

231 i‡(!(
pˇŒî
->
fûp
[
fd
]->
fd_mode
 & 
O_RDWR
))

234 
pos
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

236 
öode
 * 
pö
 = 
pˇŒî
->
fûp
[
fd
]->
fd_öode
;

238 
	`as£π
(
pö
 >&
öode_èbÀ
[0] &&Öö < &öode_èbÀ[
NR_INODE
]);

240 
imode
 = 
pö
->
i_mode
 & 
I_TYPE_MASK
;

242 i‡(
imode
 =
I_CHAR_SPECIAL
) {

243 
t
 = 
fs_msg
.
ty≥
 =
READ
 ? 
DEV_READ
 : 
DEV_WRITE
;

244 
fs_msg
.
ty≥
 = 
t
;

246 
dev
 = 
pö
->
i_z⁄e
[
DEV_ZONE
];

247 
	`as£π
(
	`MAJOR
(
dev
) == 4);

249 
fs_msg
.
DEVICE
 = 
	`MINOR
(
dev
);

250 
fs_msg
.
BUF
 = 
buf
;

251 
fs_msg
.
CNT
 = 
Àn
;

252 
fs_msg
.
PROC_NR
 = 
§c
;

253 
	`as£π
(
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
 !
INVALID_DRIVER
);

254 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, &
fs_msg
);

255 
	`as£π
(
fs_msg
.
CNT
 =
Àn
);

257  
fs_msg
.
CNT
;

260 
	`as£π
(
pö
->
i_mode
 =
I_REGULAR
 ||Öö->i_modê=
I_DIRECTORY
);

261 
	`as£π
((
fs_msg
.
ty≥
 =
READ
Ë|| (fs_msg.ty≥ =
WRITE
));

312 
ƒ_£˘
 = 
	`rdwt_z⁄es
 (
pos
, 
Àn
, 
§c
, 
buf
, 
pö
, 
fs_msg
.
ty≥
);

314 i‡(
pˇŒî
->
fûp
[
fd
]->
fd_pos
 > 
pö
->
i_size
) {

316 
pö
->
i_size
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

318 
	`sync_öode
(
pö
);

322  
ƒ_£˘
;

324 
	}
}

334 
PRIVATE
 

335 
	$Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 )

338 
Æloˇãd_£˘
 = 
	`Æloc_bô
(
dev
);

339 i‡(
INVALID_SECTOR
 =
Æloˇãd_£˘
) {

340 
	`∑nic
("noÉnough sector");

342 *
£˘‹_±r
 = 
Æloˇãd_£˘
;

343 
	}
}

356 
PRIVATE
 

357 
	$Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_íd
, 
z⁄e_t
 * 
i_z⁄e
)

359 
i
;

360 
Êag_no_z⁄e
 = 0;

362 i‡(
Æloc_°¨t
 < 
NR_DIRECT_ZONE
) {

363 
dúe˘_íd
 = 
NR_DIRECT_ZONE
 - 1;

365 
Êag_dúe˘_z⁄e
 = 0;

366 i‡(
Æloc_íd
 <
dúe˘_íd
) {

368 
Êag_dúe˘_z⁄e
 = 1;

369 
dúe˘_íd
 = 
Æloc_íd
;

371 
i
 = 
Æloc_°¨t
; i <
dúe˘_íd
; i++) {

372 i‡(
NO_ZONE
 =
i_z⁄e
[
i
]) {

373 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
i
]);

376 i‡(
Êag_dúe˘_z⁄e
) {

377  
Æloc_íd
 - 
Æloc_°¨t
 + 1;

382 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

384 i‡(
Æloc_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

385 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

386 
£c⁄d_Àvñ_íd
 = 
NR_SECOND_LEVEL_ZONE
 - 1;

388 
Êag_£c⁄d_Àvñ
 = 0;

389 i‡(
Æloc_íd
 <
£c⁄d_Àvñ_íd
) {

391 
Êag_£c⁄d_Àvñ
 = 1;

392 
£c⁄d_Àvñ_íd
 = 
Æloc_íd
;

394 i‡(
Æloc_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

395 
£c⁄d_Àvñ_°¨t
 = 
Æloc_°¨t
;

399 
Êag_no_z⁄e
 = 0;

400 i‡(
NO_ZONE
 =
i_z⁄e
[
SECOND_LEVEL_ZONE
]) {

402 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

403 
Êag_no_z⁄e
 = 1;

406 
	`RD_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

407 
	`mem˝y
((*)
£˘‹s
,

408 (*)
fsbuf
,

409 
NR_SECOND_LEVEL_ZONE
 * () );

411 i‡(
Êag_no_z⁄e
) {

412 
i
 = 0; i < 
NR_SECOND_LEVEL_ZONE
; i++) {

413 
£˘‹s
[
i
] = 
NO_ZONE
;

417 
i
 = 
£c⁄d_Àvñ_°¨t
; i <
£c⁄d_Àvñ_íd
; i++) {

418 i‡(
NO_ZONE
 =
i_z⁄e
[
i
]) {

419 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
i
]);

424 
	`mem˝y
((*)
£˘‹s
,

425 (*)
fsbuf
,

426 
NR_SECOND_LEVEL_ZONE
 * () );

427 
	`WR_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

430 i‡(
Êag_£c⁄d_Àvñ
) {

431  
Æloc_íd
 - 
Æloc_°¨t
;

435 i‡(
Æloc_íd
 < 
NR_THIRD_LEVEL_ZONE
) {

437 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

438 
thúd_Àvñ_íd
 = 
NR_THIRD_LEVEL_ZONE
 - 1;

440 
Êag_thúd_Àvñ
 = 0;

441 i‡(
Æloc_íd
 <
thúd_Àvñ_íd
) {

443 
Êag_thúd_Àvñ
 = 1;

444 
thúd_Àvñ_íd
 = 
Æloc_íd
;

446 i‡(
Æloc_°¨t
 > 
thúd_Àvñ_°¨t
) {

447 
thúd_Àvñ_°¨t
 = 
Æloc_°¨t
;

451 
Êag_no_z⁄e
 = 0;

452 i‡(
NO_ZONE
 =
i_z⁄e
[
THIRD_LEVEL_ZONE
]) {

454 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

455 
Êag_no_z⁄e
 = 1;

458 
	`RD_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

459 
	`mem˝y
((*)
£˘‹s
,

460 (*)
fsbuf
,

461 
NR_ZONE_PER_SECT
 * () );

463 i‡(
Êag_no_z⁄e
) {

464 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

465 
£˘‹s
[
i
] = 
NO_ZONE
;

469 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

470 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

471 
i
 = 
thúd_Àvñ_°¨t
; i <
thúd_Àvñ_íd
; i++) {

472 
£c⁄d_Àvñ_ödex
 =

473 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë/ 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

474 
thúd_Àvñ_ödex
 =

475 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë% 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

477 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


478 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

480 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

483 
	`mem˝y
((*)
cuºít_z⁄es
,

484 (*)
fsbuf
,

485 
NR_ZONE_PER_SECT
 * () );

486 
	`WR_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

490 
Êag_no_z⁄e
 = 0;

491 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_ödex
]) {

492 
Êag_no_z⁄e
 = 1;

493 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

495 
	`RD_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

496 
	`mem˝y
((*)
cuºít_z⁄es
,

497 (*)
fsbuf
,

498 
NR_ZONE_PER_SECT
 * () );

499 i‡(
Êag_no_z⁄e
) {

500 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

501 
cuºít_z⁄es
[
i
] = 
NO_ZONE
;

505 i‡(
NO_ZONE
 =
cuºít_z⁄es
[
thúd_Àvñ_ödex
]) {

506 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
i
]);

511 
	`mem˝y
((*)
£˘‹s
,

512 (*)
fsbuf
,

513 
NR_ZONE_PER_SECT
 * () );

514 
	`WR_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

517 i‡(
Êag_thúd_Àvñ
) {

518  
Æloc_íd
 - 
Æloc_°¨t
;

523 i‡(
Æloc_íd
 >
NR_THIRD_LEVEL_ZONE
) {

525 
	`∑nic
("file isÅooÜarge");

529 
	}
}

543 
PRIVATE
 
	$Æloc_bô
(
dev
)

545 
i
;

546 
j
;

547 
k
;

549 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

551 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

552 
Êag_bô_Æloc
 = 0;

553 
bô_Æloc
 = 0;

554 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

556 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

559 
j
 = 0; j < 
SECTOR_SIZE
 ; j++) {

561 i‡(
fsbuf
[
j
] != 0xFF) {

562 
k
 = 0;

563 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

565 
	`as£π
(((
fsbuf
[
j
] >> 
k
) & 1) == 0);

566 
fsbuf
[
j
] |(1 << 
k
);

567 
Êag_bô_Æloc
 = 1;

568 
bô_Æloc
 = 
i
 * 
SECTOR_SIZE
 + 
j
 * 8 + 
k
;

573 i‡(
Êag_bô_Æloc
) {

575 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

580 
	`as£π
(
Êag_bô_Æloc
 == 1);

582  
bô_Æloc
;

583 
	}
}

	@UnitTest/read_write.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"dúít.h
"

17 
	~"uni°d.h
"

18 
	~"°dlib.h
"

19 
	~"¥oc.h
"

20 
	~"ây.h
"

21 
	~"c⁄sﬁe.h
"

22 
	~"globÆ.h
"

23 
	~"keybﬂrd.h
"

24 
	~"¥Ÿo.h
"

26 
PRIVATE
 
Æloc_bô
 (
dev
);

27 
PRIVATE
 
Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 );

28 
PRIVATE
 
Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_íd
, 
z⁄e_t
 * 
i_z⁄e
);

29 
PRIVATE
 
rdwt_z⁄es
 (
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
);

45 
PRIVATE
 

46 
	$rdwt_z⁄es
 ( 
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
)

49 
	`as£π
(
WRITE
 =
mode
 || 
READ
 == mode);

51 
i
;

52 
cou¡
 = 0;

53 
pos_íd
 = 
pos
 + 
Àn
;

55 
ƒ_£˘_°¨t
 = 
pos
 >> 
SECTOR_SIZE_SHIFT
;

56 
ƒ_£˘_íd
 = 
pos_íd
 >> 
SECTOR_SIZE_SHIFT
;

57 
off
 = 
pos_íd
 % 
SECTOR_SIZE
;

58 i‡(
off
 != 0) {

59 
ƒ_£˘_íd
++;

63 i‡(
ƒ_£˘_íd
 > 
pö
->
i_ƒ_£˘s
) {

65 
u32
 
z⁄e_amou¡
 = 
	`Æloc_z⁄e
(
pö
->
i_dev
,Öö->
i_ƒ_£˘s
, 
ƒ_£˘_íd
,Öö->
i_z⁄e
);

66 
	`as£π
((
ƒ_£˘_íd
 - 
pö
->
i_ƒ_£˘s
 + 1Ë=
z⁄e_amou¡
);

67 
pö
->
i_ƒ_£˘s
 +
z⁄e_amou¡
;

70 i‡(
ƒ_£˘_°¨t
 < 
NR_DIRECT_ZONE
) {

71 
dúe˘_íd
 = 
NR_DIRECT_ZONE
 - 1;

73 
Êag_dúe˘_z⁄e
 = 0;

74 i‡(
ƒ_£˘_íd
 <
dúe˘_íd
) {

76 
Êag_dúe˘_z⁄e
 = 1;

77 
dúe˘_íd
 = 
ƒ_£˘_íd
;

79 
i
 = 
ƒ_£˘_°¨t
; i <
dúe˘_íd
; i++, 
cou¡
++) {

80 i‡(
WRITE
 =
mode
) {

81 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

82 (*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

83 
SECTOR_SIZE
);

84 
	`WR_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
i
]);

85 } i‡(
READ
 =
mode
) {

86 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
i
]);

87 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

88 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

89 
SECTOR_SIZE
);

92 i‡(
Êag_dúe˘_z⁄e
) {

93  (
ƒ_£˘_íd
 - 
ƒ_£˘_°¨t
)

94 * 
SECTOR_SIZE


95 + 
off
;

100 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

102 i‡(
ƒ_£˘_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

103 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

104 
£c⁄d_Àvñ_íd
 = 
NR_SECOND_LEVEL_ZONE
 - 1;

106 
Êag_£c⁄d_Àvñ
 = 0;

107 i‡(
ƒ_£˘_íd
 <
£c⁄d_Àvñ_íd
) {

109 
Êag_£c⁄d_Àvñ
 = 1;

110 
£c⁄d_Àvñ_íd
 = 
ƒ_£˘_íd
;

112 i‡(
ƒ_£˘_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

113 
£c⁄d_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

116 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

117 
	`mem˝y
((*)
£˘‹s
,

118 (*)
fsbuf
,

119 
NR_SECOND_LEVEL_ZONE
 * () );

121 
i
 = 
£c⁄d_Àvñ_°¨t
; i <
£c⁄d_Àvñ_íd
; i++, 
cou¡
++) {

122 i‡(
WRITE
 =
mode
) {

123 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

124 (*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

125 
SECTOR_SIZE
);

126 
	`WR_SECT
(
pö
->
i_dev
, 
£˘‹s
[
i
]);

127 } if(
READ
 =
mode
) {

128 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
i
]);

129 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

130 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

131 
SECTOR_SIZE
);

137 i‡(
Êag_£c⁄d_Àvñ
) {

138  (
ƒ_£˘_íd
 - 
ƒ_£˘_°¨t
)

139 * 
SECTOR_SIZE


140 + 
off
;

144 i‡(
ƒ_£˘_íd
 < 
NR_THIRD_LEVEL_ZONE
) {

146 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

147 
thúd_Àvñ_íd
 = 
NR_THIRD_LEVEL_ZONE
 - 1;

149 
Êag_thúd_Àvñ
 = 0;

150 i‡(
ƒ_£˘_íd
 <
thúd_Àvñ_íd
) {

152 
Êag_thúd_Àvñ
 = 1;

153 
thúd_Àvñ_íd
 = 
ƒ_£˘_íd
;

155 i‡(
ƒ_£˘_°¨t
 > 
thúd_Àvñ_°¨t
) {

156 
thúd_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

159 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

160 
	`mem˝y
((*)
£˘‹s
,

161 (*)
fsbuf
,

162 
NR_ZONE_PER_SECT
 * () );

164 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

165 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

166 
i
 = 
thúd_Àvñ_°¨t
; i <
thúd_Àvñ_íd
; i++, 
cou¡
++) {

167 
£c⁄d_Àvñ_ödex
 =

168 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë/ 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

169 
thúd_Àvñ_ödex
 =

170 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë% 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

172 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


173 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

174 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

175 
	`mem˝y
((*)
cuºít_z⁄es
,

176 (*)
fsbuf
,

177 
NR_ZONE_PER_SECT
 * () );

179 i‡(
WRITE
 =
mode
) {

180 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

181 (*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

182 
SECTOR_SIZE
);

183 
	`WR_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

184 } if(
READ
 =
mode
) {

185 
	`RD_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

186 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
cou¡
 * 
SECTOR_SIZE
),

187 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

188 
SECTOR_SIZE
);

194 i‡(
Êag_thúd_Àvñ
) {

195  (
ƒ_£˘_íd
 - 
ƒ_£˘_°¨t
)

196 * 
SECTOR_SIZE


197 + 
off
;

201 i‡(
ƒ_£˘_íd
 >
NR_THIRD_LEVEL_ZONE
) {

203 
	`∑nic
("buf isÅooÜarge");

207 
	}
}

220 
PUBLIC
 
	$do_rdwt
()

222 
fd
 = 
fs_msg
.
FD
;

223 * 
buf
 = 
fs_msg
.
BUF
;

224 
Àn
 = 
fs_msg
.
CNT
;

226 
§c
 = 
fs_msg
.
sour˚
;

228 
	`as£π
((
pˇŒî
->
fûp
[
fd
] >&
f_desc_èbÀ
[0]) &&

229 (
pˇŒî
->
fûp
[
fd
] < &
f_desc_èbÀ
[
NR_FILE_DESC
]));

231 i‡(!(
pˇŒî
->
fûp
[
fd
]->
fd_mode
 & 
O_RDWR
))

234 
pos
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

236 
öode
 * 
pö
 = 
pˇŒî
->
fûp
[
fd
]->
fd_öode
;

238 
	`as£π
(
pö
 >&
öode_èbÀ
[0] &&Öö < &öode_èbÀ[
NR_INODE
]);

240 
imode
 = 
pö
->
i_mode
 & 
I_TYPE_MASK
;

242 i‡(
imode
 =
I_CHAR_SPECIAL
) {

243 
t
 = 
fs_msg
.
ty≥
 =
READ
 ? 
DEV_READ
 : 
DEV_WRITE
;

244 
fs_msg
.
ty≥
 = 
t
;

246 
dev
 = 
pö
->
i_z⁄e
[
DEV_ZONE
];

247 
	`as£π
(
	`MAJOR
(
dev
) == 4);

249 
fs_msg
.
DEVICE
 = 
	`MINOR
(
dev
);

250 
fs_msg
.
BUF
 = 
buf
;

251 
fs_msg
.
CNT
 = 
Àn
;

252 
fs_msg
.
PROC_NR
 = 
§c
;

253 
	`as£π
(
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
 !
INVALID_DRIVER
);

254 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, &
fs_msg
);

255 
	`as£π
(
fs_msg
.
CNT
 =
Àn
);

257  
fs_msg
.
CNT
;

260 
	`as£π
(
pö
->
i_mode
 =
I_REGULAR
 ||Öö->i_modê=
I_DIRECTORY
);

261 
	`as£π
((
fs_msg
.
ty≥
 =
READ
Ë|| (fs_msg.ty≥ =
WRITE
));

312 
ƒ_£˘
 = 
	`rdwt_z⁄es
 (
pos
, 
Àn
, 
§c
, 
buf
, 
pö
, 
fs_msg
.
ty≥
);

314 i‡(
pˇŒî
->
fûp
[
fd
]->
fd_pos
 > 
pö
->
i_size
) {

316 
pö
->
i_size
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

318 
	`sync_öode
(
pö
);

322  
ƒ_£˘
;

324 
	}
}

334 
PRIVATE
 

335 
	$Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 )

338 
Æloˇãd_£˘
 = 
	`Æloc_bô
(
dev
);

339 i‡(
INVALID_SECTOR
 =
Æloˇãd_£˘
) {

340 
	`∑nic
("noÉnough sector");

342 *
£˘‹_±r
 = 
Æloˇãd_£˘
;

343 
	}
}

356 
PRIVATE
 

357 
	$Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_íd
, 
z⁄e_t
 * 
i_z⁄e
)

359 
i
;

360 
Êag_no_z⁄e
 = 0;

362 i‡(
Æloc_°¨t
 < 
NR_DIRECT_ZONE
) {

363 
dúe˘_íd
 = 
NR_DIRECT_ZONE
 - 1;

365 
Êag_dúe˘_z⁄e
 = 0;

366 i‡(
Æloc_íd
 <
dúe˘_íd
) {

368 
Êag_dúe˘_z⁄e
 = 1;

369 
dúe˘_íd
 = 
Æloc_íd
;

371 
i
 = 
Æloc_°¨t
; i <
dúe˘_íd
; i++) {

372 i‡(
NO_ZONE
 =
i_z⁄e
[
i
]) {

373 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
i
]);

376 i‡(
Êag_dúe˘_z⁄e
) {

377  
Æloc_íd
 - 
Æloc_°¨t
 + 1;

382 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

384 i‡(
Æloc_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

385 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

386 
£c⁄d_Àvñ_íd
 = 
NR_SECOND_LEVEL_ZONE
 - 1;

388 
Êag_£c⁄d_Àvñ
 = 0;

389 i‡(
Æloc_íd
 <
£c⁄d_Àvñ_íd
) {

391 
Êag_£c⁄d_Àvñ
 = 1;

392 
£c⁄d_Àvñ_íd
 = 
Æloc_íd
;

394 i‡(
Æloc_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

395 
£c⁄d_Àvñ_°¨t
 = 
Æloc_°¨t
;

399 
Êag_no_z⁄e
 = 0;

400 i‡(
NO_ZONE
 =
i_z⁄e
[
SECOND_LEVEL_ZONE
]) {

402 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

403 
Êag_no_z⁄e
 = 1;

406 
	`RD_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

407 
	`mem˝y
((*)
£˘‹s
,

408 (*)
fsbuf
,

409 
NR_SECOND_LEVEL_ZONE
 * () );

411 i‡(
Êag_no_z⁄e
) {

412 
i
 = 0; i < 
NR_SECOND_LEVEL_ZONE
; i++) {

413 
£˘‹s
[
i
] = 
NO_ZONE
;

417 
i
 = 
£c⁄d_Àvñ_°¨t
; i <
£c⁄d_Àvñ_íd
; i++) {

418 i‡(
NO_ZONE
 =
i_z⁄e
[
i
]) {

419 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
i
]);

424 
	`mem˝y
((*)
£˘‹s
,

425 (*)
fsbuf
,

426 
NR_SECOND_LEVEL_ZONE
 * () );

427 
	`WR_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

430 i‡(
Êag_£c⁄d_Àvñ
) {

431  
Æloc_íd
 - 
Æloc_°¨t
;

435 i‡(
Æloc_íd
 < 
NR_THIRD_LEVEL_ZONE
) {

437 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

438 
thúd_Àvñ_íd
 = 
NR_THIRD_LEVEL_ZONE
 - 1;

440 
Êag_thúd_Àvñ
 = 0;

441 i‡(
Æloc_íd
 <
thúd_Àvñ_íd
) {

443 
Êag_thúd_Àvñ
 = 1;

444 
thúd_Àvñ_íd
 = 
Æloc_íd
;

446 i‡(
Æloc_°¨t
 > 
thúd_Àvñ_°¨t
) {

447 
thúd_Àvñ_°¨t
 = 
Æloc_°¨t
;

451 
Êag_no_z⁄e
 = 0;

452 i‡(
NO_ZONE
 =
i_z⁄e
[
THIRD_LEVEL_ZONE
]) {

454 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

455 
Êag_no_z⁄e
 = 1;

458 
	`RD_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

459 
	`mem˝y
((*)
£˘‹s
,

460 (*)
fsbuf
,

461 
NR_ZONE_PER_SECT
 * () );

463 i‡(
Êag_no_z⁄e
) {

464 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

465 
£˘‹s
[
i
] = 
NO_ZONE
;

469 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

470 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

471 
i
 = 
thúd_Àvñ_°¨t
; i <
thúd_Àvñ_íd
; i++) {

472 
£c⁄d_Àvñ_ödex
 =

473 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë/ 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

474 
thúd_Àvñ_ödex
 =

475 (
i
 - 
NR_SECOND_LEVEL_ZONE
Ë% 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

477 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


478 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

480 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

483 
	`mem˝y
((*)
cuºít_z⁄es
,

484 (*)
fsbuf
,

485 
NR_ZONE_PER_SECT
 * () );

486 
	`WR_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

490 
Êag_no_z⁄e
 = 0;

491 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_ödex
]) {

492 
Êag_no_z⁄e
 = 1;

493 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

495 
	`RD_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

496 
	`mem˝y
((*)
cuºít_z⁄es
,

497 (*)
fsbuf
,

498 
NR_ZONE_PER_SECT
 * () );

499 i‡(
Êag_no_z⁄e
) {

500 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

501 
cuºít_z⁄es
[
i
] = 
NO_ZONE
;

505 i‡(
NO_ZONE
 =
cuºít_z⁄es
[
thúd_Àvñ_ödex
]) {

506 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
i
]);

511 
	`mem˝y
((*)
£˘‹s
,

512 (*)
fsbuf
,

513 
NR_ZONE_PER_SECT
 * () );

514 
	`WR_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

517 i‡(
Êag_thúd_Àvñ
) {

518  
Æloc_íd
 - 
Æloc_°¨t
;

523 i‡(
Æloc_íd
 >
NR_THIRD_LEVEL_ZONE
) {

525 
	`∑nic
("file isÅooÜarge");

529 
	}
}

543 
PRIVATE
 
	$Æloc_bô
(
dev
)

545 
i
;

546 
j
;

547 
k
;

549 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

551 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

552 
Êag_bô_Æloc
 = 0;

553 
bô_Æloc
 = 0;

554 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

556 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

559 
j
 = 0; j < 
SECTOR_SIZE
 ; j++) {

561 i‡(
fsbuf
[
j
] != 0xFF) {

562 
k
 = 0;

563 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

565 
	`as£π
(((
fsbuf
[
j
] >> 
k
) & 1) == 0);

566 
fsbuf
[
j
] |(1 << 
k
);

567 
Êag_bô_Æloc
 = 1;

568 
bô_Æloc
 = 
i
 * 
SECTOR_SIZE
 + 
j
 * 8 + 
k
;

573 i‡(
Êag_bô_Æloc
) {

575 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

580 
	`as£π
(
Êag_bô_Æloc
 == 1);

582  
bô_Æloc
;

583 
	}
}

	@command/echo.c

1 
	~"°dio.h
"

3 
	$maö
(
¨gc
, * 
¨gv
[])

5 
i
;

6 
i
 = 1; i < 
¨gc
; i++)

7 
	`¥ötf
("%s%s", 
i
 =1 ? "" : " ", 
¨gv
[i]);

8 
	`¥ötf
("\n");

11 
	}
}

	@command/ls.c

1 
	~"ty≥.h
"

2 
	~"dúít.h
"

3 
	~"°dio.h
"

4 
	~"°dlib.h
"

5 
	~"°rög.h
"

7 
	gã°1
[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

8 
	gã°2
[10] = {0};

10 
	$maö
(
¨gc
, * 
¨gv
[])

12 * 
∑th«me
;

13 
	`¥ötf
("ls.¯¨g¯%d\n", 
¨gc
);

14 i‡(
¨gc
 < 2) {

15 
∑th«me
 = ".";

17 
∑th«me
 = 
¨gv
[1];

19 
DIR
 * 
dp
;

20 
dúít
 * 
dúp
;

21 
dp
 = 
	`›ídú
(
∑th«me
);

24 
dúp
 = 
	`ªaddú
(
dp
);

25 
	`¥ötf
("%s\n", 
dúp
->
d_«me
);

26 } 
NULL
 !
dúp
);

28 
	`˛o£dú
(
dp
);

30 
	}
}

	@command/mkdir.c

1 
	~"ty≥.h
"

2 
	~"°dio.h
"

4 
	$maö
(
¨gc
, * 
¨gv
[])

6 i‡(
¨gc
 < 2) {

7 
	`¥ötf
("ußge: %†∑th«me\n", 
¨gv
[0]);

11 
	`mkdú
(
¨gv
[1], 0);

14 
	}
}

	@command/pwd.c

1 
	~"ty≥.h
"

2 
	~"°dio.h
"

3 
	~"dúít.h
"

4 
	~"°dlib.h
"

6 
	#PATH_MAX
 255

	)

8 
	$maö
(
¨gc
, * 
¨gv
[])

10 
buf
[
PATH_MAX
];

11 *
cwd
 = 
	`gëcwd
(
buf
, 
PATH_MAX
);

12 i‡(
NULL
 =
cwd
) {

13 
	`¥ötf
("get current directory failed\n");

16 
	`¥ötf
("%s\n", 
cwd
);

18 
	}
}

	@command/rm.c

20 
	~"°dio.h
"

32 
	$maö
 ( 
¨gc
, *
¨gv
[] )

34 i‡(
¨gc
 < 2) {

35 
	`¥ötf
("ußgê: %†∑th\n", 
¨gv
[0]);

39 
	`u∆ök
(
¨gv
[1]);

41 
	}
}

	@fs/disklog.c

10 
	~"ty≥.h
"

11 
	~"c⁄fig.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"keybﬂrd.h
"

26 
	~"¥Ÿo.h
"

27 
	~"hd.h
"

29 
	#DISKLOG_RD_SECT
(
dev
,
£˘_ƒ
Ë
	`rw_£˘‹
(
DEV_READ
, \

30 
dev
, \

31 (
£˘_ƒ
Ë* 
SECTOR_SIZE
, \

32 
SECTOR_SIZE
, \

33 
	`gëpid
(), \

34 
logdiskbuf
);

	)

35 
	#DISKLOG_WR_SECT
(
dev
,
£˘_ƒ
Ë
	`rw_£˘‹
(
DEV_WRITE
, \

36 
dev
, \

37 (
£˘_ƒ
Ë* 
SECTOR_SIZE
, \

38 
SECTOR_SIZE
, \

39 
	`gëpid
(), \

40 
logdiskbuf
);

	)

75 
PUBLIC
 
	$disklog
(* 
log°r
)

77 
devi˚
 = 
roŸ_öode
->
i_dev
;

78 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
devi˚
);

79 
ƒ_log_blk0_ƒ
 = 
sb
->
ƒ_£˘s
 - 
NR_SECTS_FOR_LOG
;

81 
pos
 = 0;

82 i‡(!
pos
) {

84 #ifde‡
SET_LOG_SECT_SMAP_AT_STARTUP


89 
bôs_≥r_£˘
 = 
SECTOR_SIZE
 * 8;

91 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

92 
£˘_ƒ
 = 
sm≠_blk0_ƒ
 + 
ƒ_log_blk0_ƒ
 / 
bôs_≥r_£˘
;

93 
byã_off
 = (
ƒ_log_blk0_ƒ
 % 
bôs_≥r_£˘
) / 8;

94 
bô_off
 = (
ƒ_log_blk0_ƒ
 % 
bôs_≥r_£˘
) % 8;

95 
£˘_˙t
 = 
NR_SECTS_FOR_LOG
 / 
bôs_≥r_£˘
 + 2;

96 
bôs_À·

NR_SECTS_FOR_LOG
;

98 
i
;

99 
i
 = 0; i < 
£˘_˙t
; i++) {

100 
	`DISKLOG_RD_SECT
(
devi˚
, 
£˘_ƒ
 + 
i
);

102 ; 
byã_off
 < 
SECTOR_SIZE
 && 
bôs_À·
 > 0; byte_off++) {

103 ; 
bô_off
 < 8; bit_off++) {

104 
	`as£π
(((
logdiskbuf
[
byã_off
] >> 
bô_off
) & 1) == 0);

105 
logdiskbuf
[
byã_off
] |(1 << 
bô_off
);

106 i‡(--
bôs_À·
 == 0)

109 
bô_off
 = 0;

111 
byã_off
 = 0;

112 
bô_off
 = 0;

114 
	`DISKLOG_WR_SECT
(
devi˚
, 
£˘_ƒ
 + 
i
);

116 i‡(
bôs_À·
 == 0)

119 
	`as£π
(
bôs_À·
 == 0);

122 
pos
 = 0x40;

124 #ifde‡
MEMSET_LOG_SECTS


126 
chunk
 = 
	`mö
(
MAX_IO_BYTES
, 
LOGDISKBUF_SIZE
 >> 
SECTOR_SIZE_SHIFT
);

127 
	`as£π
(
chunk
 == 256);

128 
£˘s_À·
 = 
NR_SECTS_FOR_LOG
;

129 
i
 = 
ƒ_log_blk0_ƒ
;

130 
i
 < 
ƒ_log_blk0_ƒ
 + 
NR_SECTS_FOR_LOG
;

131 
i
 +
chunk
) {

132 
	`mem£t
(
logdiskbuf
, 0x20, 
chunk
*
SECTOR_SIZE
);

133 
	`rw_£˘‹
(
DEV_WRITE
,

134 
devi˚
,

135 
i
 * 
SECTOR_SIZE
,

136 
chunk
 * 
SECTOR_SIZE
,

137 
	`gëpid
(),

138 
logdiskbuf
);

139 
£˘s_À·
 -
chunk
;

141 i‡(
£˘s_À·
 != 0)

142 
	`∑nic
("£˘s_À· should bê0, cuºít: %d.", 
£˘s_À·
);

146 * 
p
 = 
log°r
;

147 
byãs_À·
 = 
	`°æí
(
log°r
);

149 
£˘_ƒ
 = 
ƒ_log_blk0_ƒ
 + (
pos
 >> 
SECTOR_SIZE_SHIFT
);

151 
byãs_À·
) {

152 
	`DISKLOG_RD_SECT
(
devi˚
, 
£˘_ƒ
);

154 
off
 = 
pos
 % 
SECTOR_SIZE
;

155 
byãs
 = 
	`mö
(
byãs_À·
, 
SECTOR_SIZE
 - 
off
);

157 
	`mem˝y
(&
logdiskbuf
[
off
], 
p
, 
byãs
);

158 
off
 +
byãs
;

159 
byãs_À·
 -
byãs
;

161 
	`DISKLOG_WR_SECT
(
devi˚
, 
£˘_ƒ
);

162 
£˘_ƒ
++;

163 
pos
 +
byãs
;

164 
p
 +
byãs
;

167 
time
 
t
;

168 
MESSAGE
 
msg
;

169 
msg
.
ty≥
 = 
GET_RTC_TIME
;

170 
msg
.
BUF
&
t
;

171 
	`£nd_ªcv
(
BOTH
, 
TASK_SYS
, &
msg
);

174 
	`DISKLOG_RD_SECT
(
devi˚
, 
ƒ_log_blk0_ƒ
);

176 
	`•rötf
((*)
logdiskbuf
, "%8d\n", 
pos
);

177 
	`mem£t
(
logdiskbuf
+9, ' ', 22);

178 
logdiskbuf
[31] = '\n';

180 
	`•rötf
((*)
logdiskbuf
+32, "<%d-%02d-%02d %02d:%02d:%02d>\n",

181 
t
.
yór
,

182 
t
.
m⁄th
,

183 
t
.
day
,

184 
t
.
hour
,

185 
t
.
möuã
,

186 
t
.
£c⁄d
);

187 
	`mem£t
(
logdiskbuf
+32+22, ' ', 9);

188 
logdiskbuf
[63] = '\n';

190 
	`DISKLOG_WR_SECT
(
devi˚
, 
ƒ_log_blk0_ƒ
);

191 
	`mem£t
(
logdiskbuf
+64,Üogdiskbuf[32+19], 512-64);

192 
	`DISKLOG_WR_SECT
(
devi˚
, 
ƒ_log_blk0_ƒ
 + 
NR_SECTS_FOR_LOG
 - 1);

194  
pos
;

195 
	}
}

252 
	#LOG_PROCS
 1

	)

254 
	#LOG_FD_TABLE
 1

	)

255 
	#LOG_INODE_TABLE
 1

	)

256 
	#LOG_SMAP
 1

	)

257 
	#LOG_IMAP
 1

	)

258 
	#LOG_INODE_ARRAY
 1

	)

259 
	#LOG_ROOT_DIR
 1

	)

261 
	#LOG_MSG_SRC2DST
 1

	)

262 
	#LOG_ARROW_PARENT_CHILD
 1

	)

264 
	#LOG_ARROW_PROC_FD
 1

	)

265 
	#LOG_ARROW_FD_INODE
 1

	)

266 
	#LOG_ARROW_INODE_INODEARRAY
 1

	)

268 #i‡(
LOG_SMAP
 =1 || 
LOG_IMAP
 =1 || 
LOG_INODE_ARRAY
 || 
LOG_ROOT_DIR
 == 1)

269 
	g_buf
[
SECTOR_SIZE
];

281 
PUBLIC
 
	$dump_fd_gøph
(c⁄° * 
fmt
, ...)

283 
i
;

284 
logbuÂos
 = 0;

285 
tôÀ
[
STR_DEFAULT_LEN
];

287 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

291 
i
 = 
	`v•rötf
(
tôÀ
, 
fmt
, 
¨g
);

292 
	`as£π
(
	`°æí
(
tôÀ
Ë=
i
);

294 
	`¥öé
("dump_fd_gøph: %s\n", 
tôÀ
);

296 
¥oc
* 
p_¥oc
;

298 
ˇŒîpid
 = 
	`gëpid
();

302 
	`¥öé
("<|");

304 
	`dißbÀ_öt
();

306 
tcks
[
NR_TASKS
 + 
NR_PROCS
];

307 
¥io
[
NR_TASKS
 + 
NR_PROCS
];

308 
p_¥oc
 = 
¥oc_èbÀ
;

309 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++,
p_¥oc
++) {

310 i‡(
p_¥oc
->
p_Êags
 =
FREE_SLOT
)

312 i‡((
i
 =
TASK_TTY
) ||

313 (
i
 =
TASK_SYS
) ||

314 (
i
 =
TASK_HD
) ||

316 (
i
 =
ˇŒîpid
))

319 
tcks
[
i
] = 
p_¥oc
->
ticks
;

320 
¥io
[
i
] = 
p_¥oc
->
¥i‹ôy
;

321 
p_¥oc
->
ticks
 = 0;

322 
p_¥oc
->
¥i‹ôy
 = 0;

325 
gøph_idx
 = 0;

327 #i‡(
LOG_ROOT_DIR
 == 1)

328 
fûíame
[
MAX_FILENAME_LEN
+1];

331 * 
¥oc_Êags
[32];

332 
i
 = 0; i < (
¥oc_Êags
) / (proc_flags[0]); i++) {

333 
¥oc_Êags
[
i
] = "__NOT_DEFINED__";

335 
¥oc_Êags
[0] = "RUNNING";

336 
¥oc_Êags
[
SENDING
] = "SENDING";

337 
¥oc_Êags
[
RECEIVING
] = "RECEIVING";

338 
¥oc_Êags
[
WAITING
] = "WAITING";

339 
¥oc_Êags
[
HANGING
] = "HANGING";

340 
¥oc_Êags
[
FREE_SLOT
] = "FREE_SLOT";

342 
¥oc_Êags
[
SENDING
+
WAITING
] = "SENDING, WAITING";

343 
¥oc_Êags
[
RECEIVING
+
WAITING
] = "RECEIVING, WAITING";

344 
¥oc_Êags
[
RECEIVING
+
HANGING
] = "RECEIVING, HANGING";

349 #i‡(
LOG_PROCS
 =1 || 
LOG_ARROW_PARENT_CHILD
 == 1)

350 
	s¥oc_∑ª¡_m≠
 {

351 
pid
;

352 
µid
;

353 } 
µm
[256];

354 
µm_idx
 = 0;

357 #i‡(
LOG_PROCS
 =1 || 
LOG_ARROW_PROC_FD
 == 1)

358 
	s¥oc_fdesc_m≠
 {

359 
pid
;

360 
fûp
;

361 
desc
;

362 } 
pfm
[256];

363 
pfm_idx
 = 0;

366 #i‡(
LOG_FD_TABLE
 =1 || 
LOG_ARROW_FD_INODE
 == 1)

367 
	sfdesc_öode_m≠
 {

368 
desc
;

369 
öode
;

370 } 
fim
[256];

371 
fim_idx
 = 0;

374 
	smsg_§c_d°
 {

375 
§c
;

376 
d°
;

377 
dú
;

378 } 
msd
[256];

379 
msd_idx
 = 0;

380 
	`¥öé
("|_|");

383 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos,

384 "digøph fûedesc%02d {\n", 
gøph_idx
++);

385 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\tgraph [\n");

386 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "Ñankdir = \"LR\"\n");

387 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, " ];\n");

388 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "Çode [\n");

389 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, " fontsize = \"16\"\n");

390 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, " shape = \"ellipse\"\n");

391 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, " ];\n");

392 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "Édge [\n");

393 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, " ];\n");

395 #i‡(
LOG_PROCS
 == 1)

396 
k
;

397 
p_¥oc
 = 
¥oc_èbÀ
;

398 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_0 {\n");

399 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++,
p_¥oc
++) {

401 i‡(
p_¥oc
->
p_Êags
 =
FREE_SLOT
)

412 i‡(
p_¥oc
->
p_∑ª¡
 !
NO_TASK
) {

413 
µm
[
µm_idx
].
pid
 = 
i
;

414 
µm
[
µm_idx
].
µid
 = 
p_¥oc
->
p_∑ª¡
;

415 
µm_idx
++;

418 i‡(
p_¥oc
->
p_Êags
 & 
RECEIVING
) {

419 
msd
[
msd_idx
].
§c
 = 
p_¥oc
->
p_ªcv‰om
;

420 
msd
[
msd_idx
].
d°
 = 
	`¥oc2pid
(
p_¥oc
);

421 
msd
[
msd_idx
].
dú
 = 
RECEIVING
;

422 
msd_idx
++;

424 i‡(
p_¥oc
->
p_Êags
 & 
SENDING
) {

425 
msd
[
msd_idx
].
§c
 = 
	`¥oc2pid
(
p_¥oc
);

426 
msd
[
msd_idx
].
d°
 = 
p_¥oc
->
p_£ndto
;

427 
msd
[
msd_idx
].
dú
 = 
SENDING
;

428 
msd_idx
++;

431 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos,

437 
i
,

438 
p_¥oc
->
«me
,

439 
i
,

440 
p_¥oc
->
p_Êags
,

441 
¥oc_Êags
[
p_¥oc
->
p_Êags
],

442 
p_¥oc
->
p_∑ª¡
,

443 
p_¥oc
->
p_∑ª¡
 =
NO_TASK
 ? "(NO_TASK)" : "",

444 
p_¥oc
->
ªgs
.
eù
);

446 
‚r
 = 3;

447 
k
 = 0; k < 
NR_FILES
; k++) {

448 i‡(
p_¥oc
->
fûp
[
k
] == 0)

451 
fdesc_tbl_idx
 = 
p_¥oc
->
fûp
[
k
] - 
f_desc_èbÀ
;

452 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t|<f%d> filp[%d]: %d",

453 
‚r
,

454 
k
,

455 
fdesc_tbl_idx
);

456 
pfm
[
pfm_idx
].
pid
 = 
i
;

457 
pfm
[
pfm_idx
].
fûp
 = 
‚r
;

458 
pfm
[
pfm_idx
].
desc
 = 
fdesc_tbl_idx
;

459 
‚r
++;

460 
pfm_idx
++;

463 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

464 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

465 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

467 
i
 = 
ANY
;

468 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"¥oc%d\" [\n", 
i
);

469 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0>ANY |<f1> ");

470 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

471 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

472 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

474 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\tlabel = \"procs\";\n");

475 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

478 
	`¥öé
("0");

480 #i‡(
LOG_FD_TABLE
 == 1)

481 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_1 {\n");

482 
i
 = 0; i < 
NR_FILE_DESC
; i++) {

483 i‡(
f_desc_èbÀ
[
i
].
fd_öode
 == 0)

486 
öode_tbl_idx
 = 
f_desc_èbÀ
[
i
].
fd_öode
 - 
öode_èbÀ
;

487 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"fûedesc%d\" [\n", 
i
);

488 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0>filedesc %d"

493 
i
,

494 
f_desc_èbÀ
[
i
].
fd_mode
,

495 
f_desc_èbÀ
[
i
].
fd_pos
,

496 
f_desc_èbÀ
[
i
].
fd_˙t
,

497 
öode_tbl_idx
);

498 
fim
[
fim_idx
].
desc
 = 
i
;

499 
fim
[
fim_idx
].
öode
 = 
öode_tbl_idx
;

500 
fim_idx
++;

502 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

503 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

504 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

506 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\tlabel = \"filedescs\";\n");

507 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

510 
	`¥öé
("1");

512 #i‡(
LOG_INODE_TABLE
 == 1)

513 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_2 {\n");

514 
i
 = 0; i < 
NR_INODE
; i++) {

515 i‡(
öode_èbÀ
[
i
].
i_˙t
 == 0)

518 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"öode%d\" [\n", 
i
);

519 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0>inode %d"

527 
i
,

528 
öode_èbÀ
[
i
].
i_mode
,

529 
öode_èbÀ
[
i
].
i_size
,

530 
öode_èbÀ
[
i
].
i_z⁄e
[0],

531 
öode_èbÀ
[
i
].
i_ƒ_£˘s
,

532 
öode_èbÀ
[
i
].
i_dev
,

533 
öode_èbÀ
[
i
].
i_˙t
,

534 
öode_èbÀ
[
i
].
i_num
);

536 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

537 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

538 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

540 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\tlabel = \"inodes\";\n");

541 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

544 
	`¥öé
("2");

546 
	`íabÀ_öt
();

548 #i‡(
LOG_SMAP
 == 1)

549 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_3 {\n");

550 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tstyle=filled;\n");

551 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tcolor=lightgrey;\n");

552 
sm≠_Êag
 = 0;

553 
bô_°¨t
 = 0;

555 
j
;

557 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
roŸ_öode
->
i_dev
);

558 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

559 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

560 
	`DISKLOG_RD_SECT
(
roŸ_öode
->
i_dev
, 
sm≠_blk0_ƒ
 + 
i
);

561 
	`mem˝y
(
_buf
, 
logdiskbuf
, 
SECTOR_SIZE
);

562 
j
 = 0; j < 
SECTOR_SIZE
; j++) {

563 
k
 = 0; k < 8; k++) {

564 i‡(!
sm≠_Êag
) {

565 i‡((
_buf
[
j
] >> 
k
 ) & 1) {

566 
sm≠_Êag
 = 1;

567 
bô_°¨t
 = (
i
 * 
SECTOR_SIZE
 + 
j
Ë* 8 + 
k
;

574 i‡((
_buf
[
j
] >> 
k
 ) & 1) {

578 
sm≠_Êag
 = 0;

579 
bô_íd
 = (
i
 * 
SECTOR_SIZE
 + 
j
Ë* 8 + 
k
 - 1;

580 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"£˘‹ %xh\" [\n", 
bô_°¨t
);

581 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0>sect %xh-%xh",

582 
bô_°¨t
,

583 
bô_íd
);

584 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

585 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

586 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

592 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\éabñ = \"£˘‹ m≠ (dev size: %xh)\";\n", 
sb
->
ƒ_£˘s
);

593 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

596 
	`¥öé
("3");

598 #i‡(
LOG_IMAP
 == 1)

599 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_4 {\n");

600 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tstyle=filled;\n");

601 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tcolor=lightgrey;\n");

602 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\"imap\" [\n");

603 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0>bits");

607 
im≠_blk0_ƒ
 = 1 + 1;

608 
i
 = 0; i < 
sb
->
ƒ_im≠_£˘s
; i++) {

609 
	`DISKLOG_RD_SECT
(
roŸ_öode
->
i_dev
, 
im≠_blk0_ƒ
 + 
i
);

610 
	`mem˝y
(
_buf
, 
logdiskbuf
, 
SECTOR_SIZE
);

611 
j
 = 0; j < 
SECTOR_SIZE
; j++) {

612 
k
 = 0; k < 8; k++) {

613 i‡((
_buf
[
j
] >> 
k
 ) & 1) {

614 
bô_ƒ
 = (
i
 * 
SECTOR_SIZE
 + 
j
Ë* 8 + 
k
;

615 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "| %xh ", 
bô_ƒ
);

620 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

621 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

622 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

623 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\tlabel = \"inode map\";\n");

624 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

627 
	`¥öé
("4");

629 #i‡(
LOG_INODE_ARRAY
 == 1)

630 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_5 {\n");

631 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tstyle=filled;\n");

632 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tcolor=lightgrey;\n");

633 
sb
 = 
	`gë_su≥r_block
(
roŸ_öode
->
i_dev
);

634 
blk_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
 + sb->
ƒ_sm≠_£˘s
;

635 
	`DISKLOG_RD_SECT
(
roŸ_öode
->
i_dev
, 
blk_ƒ
);

636 
	`mem˝y
(
_buf
, 
logdiskbuf
, 
SECTOR_SIZE
);

638 * 
p
 = 
_buf
;

639 
i
 = 0; i < 
SECTOR_SIZE
 / (
öode
); i++,
p
+=
INODE_SIZE
) {

640 
öode
 * 
pöode
 = (öode*)
p
;

641 i‡(
pöode
->
i_z⁄e
[0] == 0)

643 
°¨t_£˘
;

644 
íd_£˘
;

645 i‡(
pöode
->
i_mode
) {

646 i‡(
pöode
->
i_z⁄e
[0] < 
sb
->
n_1°_£˘
) {

647 
	`∑nic
("shouldÇot happen: %x < %x.",

648 
pöode
->
i_z⁄e
[0],

649 
sb
->
n_1°_£˘
);

651 
°¨t_£˘
 = 
pöode
->
i_z⁄e
[0] - 
sb
->
n_1°_£˘
 + 1;

652 
íd_£˘
 = 
°¨t_£˘
 + 
pöode
->
i_ƒ_£˘s
 - 1;

653 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"öodóºay%d\" [\n", 
i
+1);

654 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0> %d"

657 
i
+1,

658 
pöode
->
i_size
,

659 
°¨t_£˘
,

660 
íd_£˘
);

662 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

663 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

664 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

667 
°¨t_£˘
 = 
	`MAJOR
(
pöode
->
i_z⁄e
[0]);

668 
íd_£˘
 = 
	`MINOR
(
pöode
->
i_z⁄e
[0]);

669 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"öodóºay%d\" [\n", 
i
+1);

670 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0> %d"

673 
i
+1,

674 
pöode
->
i_size
,

675 
°¨t_£˘
,

676 
íd_£˘
);

678 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

679 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

680 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

683 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\tlabel = \"inodeárray\";\n");

684 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

687 
	`¥öé
("5");

689 #i‡(
LOG_ROOT_DIR
 == 1)

690 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\tsubgraph cluster_6 {\n");

691 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tstyle=filled;\n");

692 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\n\t\tcolor=lightgrey;\n");

693 
sb
 = 
	`gë_su≥r_block
(
roŸ_öode
->
i_dev
);

694 
dú_blk0_ƒ
 = 
roŸ_öode
->
i_z⁄e
[0];

695 
ƒ_dú_blks
 = (
roŸ_öode
->
i_size
 + 
SECTOR_SIZE
 - 1) / SECTOR_SIZE;

696 
ƒ_dú_íåõs
 =

697 
roŸ_öode
->
i_size
 / 
DIRENT_SIZE
;

702 
m
 = 0;

703 
dúít
 * 
pde
;

704 
i
 = 0; i < 
ƒ_dú_blks
; i++) {

705 
	`DISKLOG_RD_SECT
(
roŸ_öode
->
i_dev
, 
dú_blk0_ƒ
 + 
i
);

706 
	`mem˝y
(
_buf
, 
logdiskbuf
, 
SECTOR_SIZE
);

707 
pde
 = (
dúít
 *)
_buf
;

708 
j
 = 0; j < 
SECTOR_SIZE
 / 
DIRENT_SIZE
; j++,
pde
++) {

709 i‡(
pde
->
d_öo
) {

710 
	`mem˝y
(
fûíame
, 
pde
->
d_«me
, 
MAX_FILENAME_LEN
);

711 i‡(
fûíame
[0] == '.')

712 
fûíame
[0] = '/';

713 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\t\t\"roŸdúít%d\" [\n", 
pde
->
d_öo
);

714 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tlabel = \"<f0> %d"

716 
pde
->
d_öo
,

717 
fûíame
);

718 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"\n");

719 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t\tshape = \"record\"\n");

720 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\t];\n");

722 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t"

727 
pde
->
d_öo
,Öde->d_ino);

730 i‡(
m
 > 
ƒ_dú_íåõs
)

734 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\tlabel = \"root dir\";\n");

735 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t}\n");

738 
	`¥öé
("6");

740 #i‡(
LOG_MSG_SRC2DST
 == 1)

741 
i
 = 0; i < 
msd_idx
; i++) {

742 i‡(
msd
[
i
].
dú
 =
RECEIVING
)

743 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"proc%d\":f0 -> \"proc%d\":f0 "

745 
msd
[
i
].
d°
,

746 
msd
[
i
].
§c
,

747 
i
);

748 i‡(
msd
[
i
].
dú
 =
SENDING
)

749 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"proc%d\":f0 -> \"proc%d\":f0 "

751 
msd
[
i
].
§c
,

752 
msd
[
i
].
d°
,

753 
i
);

755 
	`as£π
(0);

759 #i‡(
LOG_ARROW_PARENT_CHILD
 == 1)

760 
i
 = 0; i < 
µm_idx
; i++) {

761 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"proc%d\":f0 -> \"proc%d\":f0 "

763 
µm
[
i
].
µid
,

764 
µm
[
i
].
pid
);

768 #i‡(
LOG_ARROW_PROC_FD
 == 1)

769 
i
 = 0; i < 
pfm_idx
; i++) {

770 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"proc%d\":f%d -> \"filedesc%d\":f3;\n",

771 
pfm
[
i
].
pid
,

772 
pfm
[
i
].
fûp
,

773 
pfm
[
i
].
desc
);

777 #i‡(
LOG_ARROW_FD_INODE
 == 1)

778 
i
 = 0; i < 
fim_idx
; i++) {

779 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"filedesc%d\":f4 -> \"inode%d\":f6;\n",

780 
fim
[
i
].
desc
,

781 
fim
[
i
].
öode
);

785 #i‡(
LOG_ARROW_INODE_INODEARRAY
 == 1)

786 
i
 = 0; i < 
NR_INODE
; i++) {

787 i‡(
öode_èbÀ
[
i
].
i_˙t
 != 0)

788 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "\t\"inode%d\":f7 -> \"inodearray%d\":f0;\n",

789 
i
,

790 
öode_èbÀ
[
i
].
i_num
);

799 
logbuÂos
 +
	`•rötf
(
logbuf
 +ÜogbuÂos, "\éabñ = \"%s\";\n", 
tôÀ
);

800 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "}\n");

803 
logbuÂos
 +
	`•rötf
(
logbuf
 +Üogbufpos, "--separator--\n");

805 
	`as£π
(
logbuÂos
 < 
LOGBUF_SIZE
);

807 
logbuf
[
logbuÂos
] = 0;

808 
tmp
[
STR_DEFAULT_LEN
/2];

809 
byãs_À·
 = 
logbuÂos
;

810 
pos
 = 0;

811 
byãs_À·
) {

812 
byãs
 = 
	`mö
(
byãs_À·
, 
STR_DEFAULT_LEN
/2 - 1);

813 
	`mem˝y
(
tmp
, 
logbuf
 + 
pos
, 
byãs
);

814 
tmp
[
byãs
] = 0;

815 
	`disklog
(
tmp
);

816 
pos
 +
byãs
;

817 
byãs_À·
 -
byãs
;

820 
	`dißbÀ_öt
();

821 
p_¥oc
 = 
¥oc_èbÀ
;

822 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++,
p_¥oc
++) {

823 i‡(
p_¥oc
->
p_Êags
 =
FREE_SLOT
)

825 i‡((
i
 =
TASK_TTY
) ||

826 (
i
 =
TASK_SYS
) ||

827 (
i
 =
TASK_HD
) ||

829 (
i
 =
	`gëpid
()))

831 
p_¥oc
->
ticks
 = 
tcks
[
i
];

832 
p_¥oc
->
¥i‹ôy
 = 
¥io
[
i
];

834 
	`íabÀ_öt
();

836 
	`¥öé
("|>");

840 
	}
}

	@fs/fs_stat.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"keybﬂrd.h
"

34 
	~"¥Ÿo.h
"

35 
	~"ñf.h
"

43 
PRIVATE
 
ch™ge_¥oc_dú
 (
öode
 ** 
w‹k_dú
, öodê* 
roŸ_dú
, * 
dú_«me
, 
Àn
 );

64 
PUBLIC
 

65 
	$do_chdú
 ()

67 
§c
 = 
fs_msg
.
sour˚
;

68 i‡(
TASK_MM
 =
§c
) {

70 
¥oc
 * 
ch™ge_to_¥oc
 = &
¥oc_èbÀ
[
fs_msg
.
PROC_NR
];

72 
	`as£π
(
NULL
 !
ch™ge_to_¥oc
->
roŸ
);

73 
p_¥oc_ªady
->
roŸ
->
i_˙t
--;

74 
ch™ge_to_¥oc
->
roŸ
->
i_˙t
++;

75 
p_¥oc_ªady
->
roŸ
 = 
ch™ge_to_¥oc
->root;

77 
	`as£π
(
NULL
 !
ch™ge_to_¥oc
->
pwd
);

78 
p_¥oc_ªady
->
pwd
->
i_˙t
--;

79 
ch™ge_to_¥oc
->
pwd
->
i_˙t
++;

80 
p_¥oc_ªady
->
pwd
 = 
ch™ge_to_¥oc
->pwd;

85 
∑th
[
MAX_PATH
];

86 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
∑th
),

87 (*)
	`va2œ
(
§c
, 
fs_msg
.
PATH
),

88 
fs_msg
.
NAME_LEN
);

89 
∑th
[
fs_msg
.
NAME_LEN
] = '\0';

91 
¥oc
 * 
ˇŒî
 = &
¥oc_èbÀ
[
§c
];

92 
	`ch™ge_¥oc_dú
(&(
ˇŒî
->
pwd
), cÆÀr->
roŸ
, 
∑th
, 
fs_msg
.
NAME_LEN
);

94 
	}
}

106 
PRIVATE
 

107 
	$ch™ge_¥oc_dú
 (
öode
 ** 
w‹k_dú
,

108 
öode
 * 
roŸ_dú
,

109 * 
dú_«me
,

110 
Àn
 )

113 
d_öo
 = 
	`£¨ch_fûe
(
dú_«me
);

114 i‡(
INVALID_INODE
 =
d_öo
) {

115 
	`¥öé
("no such file or directory\n");

121 
öode
 * 
dú_öode
 = 
	`gë_öode
((*
w‹k_dú
)->
i_dev
, 
d_öo
);

122 i‡(
NULL
 =
dú_öode
) {

123 
	`¥öé
("can't getÅhe inode struct ofÅhis directory\n");

131 
	`as£π
(*
w‹k_dú
 !
dú_öode
);

132 
	`put_öode
(*
w‹k_dú
);

135 *
w‹k_dú
 = 
dú_öode
;

139 
	}
}

	@fs/link.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

39 
PUBLIC
 
	$do_u∆ök
()

41 
∑th«me
[
MAX_PATH
];

44 
«me_Àn
 = 
fs_msg
.
NAME_LEN
;

45 
§c
 = 
fs_msg
.
sour˚
;

46 
	`as£π
(
«me_Àn
 < 
MAX_PATH
);

47 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
∑th«me
),

48 (*)
	`va2œ
(
§c
, 
fs_msg
.
PATHNAME
),

49 
«me_Àn
);

50 
∑th«me
[
«me_Àn
] = 0;

52 i‡(
	`°rcmp
(
∑th«me
 , "/") == 0) {

53 
	`¥öé
("{FS} FS:do_unlink():: cannot unlinkÅheÑoot\n");

57 
öode_ƒ
 = 
	`£¨ch_fûe
(
∑th«me
);

58 i‡(
öode_ƒ
 =
INVALID_INODE
) {

59 
	`¥öé
("{FS} FS::do_unlink():: search_file()Ñeturns "

60 "övÆid inode: %s\n", 
∑th«me
);

64 
fûíame
[
MAX_PATH
];

65 
öode
 * 
dú_öode
;

68 
¥oc
 * 
p
 = &
¥oc_èbÀ
[
§c
];

69 i‡('/' !
∑th«me
[0]) {

70 
dú_öode
 = 
p
->
pwd
;

72 
dú_öode
 = 
p
->
roŸ
;

74 i‡(
	`°rù_∑th
(
fûíame
, 
∑th«me
, &
dú_öode
) != 0)

77 
öode
 * 
pö
 = 
	`gë_öode
(
dú_öode
->
i_dev
, 
öode_ƒ
);

79 i‡(
pö
->
i_mode
 !
I_REGULAR
 &&Öö->i_modê!
I_DIRECTORY
) {

80 
	`¥öé
("{FS} cannotÑemove file %s, because "

82 
∑th«me
);

83 
	`put_öode
(
pö
);

87 i‡(
pö
->
i_˙t
 > 1) {

88 
	`¥öé
("{FS} cannotÑemove file %s, becauseÖin->i_cnt is %d.\n",

89 
∑th«me
, 
pö
->
i_˙t
);

90 
	`put_öode
(
pö
);

94 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
pö
->
i_dev
);

99 
byã_idx
 = 
öode_ƒ
 / 8;

100 
bô_idx
 = 
öode_ƒ
 % 8;

101 
	`as£π
(
byã_idx
 < 
SECTOR_SIZE
);

103 
	`RD_SECT
(
pö
->
i_dev
, 2);

104 
	`as£π
(
fsbuf
[
byã_idx
 % 
SECTOR_SIZE
] & (1 << 
bô_idx
));

105 
fsbuf
[
byã_idx
 % 
SECTOR_SIZE
] &~(1 << 
bô_idx
);

106 
	`WR_SECT
(
pö
->
i_dev
, 2);

123 
bô_idx
 = 
pö
->
i_z⁄e
[
NO_ZONE
] - 
sb
->
n_1°_£˘
 + 1;

124 
byã_idx
 = 
bô_idx
 / 8;

125 
bôs_À·
 = 
pö
->
i_ƒ_£˘s
;

126 
byã_˙t
 = (
bôs_À·
 - (8 - (
bô_idx
 % 8))) / 8;

129 
s
 = 2

130 + 
sb
->
ƒ_im≠_£˘s
 + 
byã_idx
 / 
SECTOR_SIZE
;

132 
	`RD_SECT
(
pö
->
i_dev
, 
s
);

134 
i
;

136 
i
 = 
bô_idx
 % 8; (ò< 8Ë&& 
bôs_À·
; i++,bits_left--) {

137 
	`as£π
((
fsbuf
[
byã_idx
 % 
SECTOR_SIZE
] >> 
i
 & 1) == 1);

138 
fsbuf
[
byã_idx
 % 
SECTOR_SIZE
] &~(1 << 
i
);

142 
k
;

143 
i
 = (
byã_idx
 % 
SECTOR_SIZE
) + 1;

144 
k
 = 0; k < 
byã_˙t
; k++,
i
++,
bôs_À·
-=8) {

145 i‡(
i
 =
SECTOR_SIZE
) {

146 
i
 = 0;

147 
	`WR_SECT
(
pö
->
i_dev
, 
s
);

148 
	`RD_SECT
(
pö
->
i_dev
, ++
s
);

150 
	`as£π
(
fsbuf
[
i
] == 0xFF);

151 
fsbuf
[
i
] = 0;

155 i‡(
i
 =
SECTOR_SIZE
) {

156 
i
 = 0;

157 
	`WR_SECT
(
pö
->
i_dev
, 
s
);

158 
	`RD_SECT
(
pö
->
i_dev
, ++
s
);

160 
mask
 = ~(()(~0Ë<< 
bôs_À·
);

161 
	`as£π
((
fsbuf
[
i
] & 
mask
) == mask);

162 
fsbuf
[
i
] &(~0Ë<< 
bôs_À·
;

163 
	`WR_SECT
(
pö
->
i_dev
, 
s
);

168 
pö
->
i_mode
 = 0;

169 
pö
->
i_size
 = 0;

170 
	`mem£t
(
pö
->
i_z⁄e
,

171 (
z⁄e_t
)
NO_ZONE
,

172 (
z⁄e_t
Ë* (
THIRD_LEVEL_ZONE
 + 1));

173 
pö
->
i_ƒ_£˘s
 = 0;

174 
	`sync_öode
(
pö
);

176 
	`put_öode
(
pö
);

181 
ƒ_dú_blks
 = (
dú_öode
->
i_size
 + 
SECTOR_SIZE
) / SECTOR_SIZE;

182 
ƒ_dú_íåõs
 =

183 
dú_öode
->
i_size
 / 
DIRENT_SIZE
;

188 
m
 = 0;

189 
dúít
 * 
pde
 = 0;

190 
Êg
 = 0;

191 
dú_size
 = 0;

193 
i
 = 0; i < 
ƒ_dú_blks
; i++) {

194 
	`RD_SECT
(
dú_öode
->
i_dev
, dú_öode->
i_z⁄e
[
i
]);

196 
pde
 = (
dúít
 *)
fsbuf
;

197 
j
;

198 
j
 = 0; j < 
SECTOR_SIZE
 / 
DIRENT_SIZE
; j++,
pde
++) {

199 i‡(++
m
 > 
ƒ_dú_íåõs
)

202 i‡(
pde
->
d_öo
 =
öode_ƒ
) {

204 
	`mem£t
(
pde
, 0, 
DIRENT_SIZE
);

205 
	`WR_SECT
(
dú_öode
->
i_dev
, dú_öode->
i_z⁄e
[
i
]);

206 
Êg
 = 1;

210 i‡(
pde
->
d_öo
 !
INVALID_INODE
)

211 
dú_size
 +
DIRENT_SIZE
;

214 i‡(
m
 > 
ƒ_dú_íåõs
 ||

215 
Êg
)

218 
	`as£π
(
Êg
);

219 i‡(
m
 =
ƒ_dú_íåõs
) {

220 
dú_öode
->
i_size
 = 
dú_size
;

221 
	`sync_öode
(
dú_öode
);

225 
	}
}

	@fs/ls.c

11 
	~"ty≥.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"keybﬂrd.h
"

26 
	~"¥Ÿo.h
"

36 
PUBLIC
 
	$do_ls
()

38 *
∑th
 = "/";

39 
fûíame
[
MAX_PATH
];

40 
	`mem£t
(
fûíame
, 0, 
MAX_FILENAME_LEN
);

41 
öode
 * 
dú_öode
;

42 i‡(
	`°rù_∑th
(
fûíame
, 
∑th
, &
dú_öode
)) {

46 
dú_blk0_ƒ
 = 
dú_öode
->
i_°¨t_£˘
;

47 
ƒ_dú_blks
 = (
dú_öode
->
i_size
 + 
SECTOR_SIZE
 - 1) / SECTOR_SIZE;

48 
ƒ_dú_íåõs
 =

49 
dú_öode
->
i_size
 / 
DIRENT_SIZE
;

51 
m
 = 0;

52 
dúít
 * 
pde
;

53 
i
, 
j
;

54 
i
 = 0; i < 
ƒ_dú_blks
; i++) {

55 
	`RD_SECT
(
dú_öode
->
i_dev
, 
dú_blk0_ƒ
 + 
i
);

56 
pde
 = (
dúít
 *)
fsbuf
;

57 
j
 = 0; j < 
SECTOR_SIZE
 / 
DIRENT_SIZE
; j++,
pde
++) {

58 
	`¥öé
("%s\n", 
pde
->
d_«me
);

59 i‡(++
m
 > 
ƒ_dú_íåõs
)

62 i‡(
m
 > 
ƒ_dú_íåõs
)

65 
	}
}

	@fs/main.c

10 
	~"ty≥.h
"

11 
	~"c⁄fig.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"¥Ÿo.h
"

27 
	~"hd.h
"

29 
PRIVATE
 
öô_fs
();

30 
PRIVATE
 
mkfs
();

31 
PRIVATE
 
ªad_su≥r_block
(
dev
);

32 
PRIVATE
 
fs_f‹k
();

33 
PRIVATE
 
fs_exô
();

42 
PUBLIC
 
	$èsk_fs
()

44 
	`¥öé
("{FS} Task FS begins.\n");

46 
	`öô_fs
();

49 
	`£nd_ªcv
(
RECEIVE
, 
ANY
, &
fs_msg
);

51 
msgty≥
 = 
fs_msg
.
ty≥
;

52 
§c
 = 
fs_msg
.
sour˚
;

53 
pˇŒî
 = &
¥oc_èbÀ
[
§c
];

55 
msgty≥
) {

56 
OPEN
:

57 
fs_msg
.
FD
 = 
	`do_›í
();

59 
CLOSE
:

60 
fs_msg
.
RETVAL
 = 
	`do_˛o£
();

62 
READ
:

63 
WRITE
:

64 
fs_msg
.
CNT
 = 
	`do_rdwt
();

66 
MKDIR
:

67 
fs_msg
.
RETVAL
 = 
	`do_mkdú
();

69 
UNLINK
:

70 
fs_msg
.
RETVAL
 = 
	`do_u∆ök
();

72 
RESUME_PROC
:

73 
§c
 = 
fs_msg
.
PROC_NR
;

75 
FORK
:

76 
fs_msg
.
RETVAL
 = 
	`fs_f‹k
();

78 
EXIT
:

79 
fs_msg
.
RETVAL
 = 
	`fs_exô
();

81 
LSEEK
:

82 
fs_msg
.
OFFSET
 = 
	`do_l£ek
();

84 
STAT
:

85 
fs_msg
.
RETVAL
 = 
	`do_°©
();

87 
CHDIR
:

88 
fs_msg
.
RETVAL
 = 
	`do_chdú
();

91 
	`dump_msg
("FS::unknow¿mesßge:", &
fs_msg
);

92 
	`as£π
(0);

96 #ifde‡
ENABLE_DISK_LOG


97 * 
msg«me
[128];

98 
msg«me
[
OPEN
] = "OPEN";

99 
msg«me
[
CLOSE
] = "CLOSE";

100 
msg«me
[
READ
] = "READ";

101 
msg«me
[
WRITE
] = "WRITE";

102 
msg«me
[
LSEEK
] = "LSEEK";

103 
msg«me
[
UNLINK
] = "UNLINK";

104 
msg«me
[
FORK
] = "FORK";

105 
msg«me
[
EXIT
] = "EXIT";

106 
msg«me
[
STAT
] = "STAT";

108 
msgty≥
) {

109 
UNLINK
:

110 
	`dump_fd_gøph
("%s just finished. (pid:%d)",

111 
msg«me
[
msgty≥
], 
§c
);

113 
MKDIR
:

114 
OPEN
:

115 
CLOSE
:

116 
READ
:

117 
WRITE
:

118 
FORK
:

119 
EXIT
:

120 
LSEEK
:

121 
STAT
:

122 
CHDIR
:

124 
RESUME_PROC
:

127 
	`as£π
(0);

132 i‡(
fs_msg
.
ty≥
 !
SUSPEND_PROC
) {

133 
fs_msg
.
ty≥
 = 
SYSCALL_RET
;

134 
	`£nd_ªcv
(
SEND
, 
§c
, &
fs_msg
);

137 
	}
}

146 
PRIVATE
 
	$öô_fs
()

148 
i
;

151 
i
 = 0; i < 
NR_FILE_DESC
; i++)

152 
	`mem£t
(&
f_desc_èbÀ
[
i
], 0, (
fûe_desc
));

155 
i
 = 0; i < 
NR_INODE
; i++)

156 
	`mem£t
(&
öode_èbÀ
[
i
], 0, (
öode
));

159 
su≥r_block
 * 
sb
 = super_block;

160 ; 
sb
 < &
su≥r_block
[
NR_SUPER_BLOCK
]; sb++)

161 
sb
->
sb_dev
 = 
NO_DEV
;

164 
MESSAGE
 
drivî_msg
;

165 
drivî_msg
.
ty≥
 = 
DEV_OPEN
;

166 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
ROOT_DEV
);

167 
	`as£π
(
dd_m≠
[
	`MAJOR
(
ROOT_DEV
)].
drivî_ƒ
 !
INVALID_DRIVER
);

168 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
ROOT_DEV
)].
drivî_ƒ
, &
drivî_msg
);

171 
	`RD_SECT
(
ROOT_DEV
, 1);

173 
Êag_su≥r_block_ªad
 = 0;

174 
sb
 = (
su≥r_block
 *)
fsbuf
;

175 i‡(
sb
->
magic
 !
MAGIC_V1
) {

176 
	`¥öé
("{FS} mkfs\n");

177 
Êag_su≥r_block_ªad
 = 1;

178 
	`mkfs
();

181 i‡(!
Êag_su≥r_block_ªad
) {

183 
	`ªad_su≥r_block
(
ROOT_DEV
);

186 
sb
 = 
	`gë_su≥r_block
(
ROOT_DEV
);

187 
	`as£π
(
sb
->
magic
 =
MAGIC_V1
);

189 
roŸ_öode
 = 
	`gë_öode
(
ROOT_DEV
, 
ROOT_INODE
);

190 
	`¥öé
("{FS} initÉnd\n");

191 
	}
}

206 
PRIVATE
 
	$mkfs
()

208 
MESSAGE
 
drivî_msg
;

209 
i
, 
j
;

215 
∑π_öfo
 
geo
;

216 
drivî_msg
.
ty≥
 = 
DEV_IOCTL
;

217 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
ROOT_DEV
);

218 
drivî_msg
.
REQUEST
 = 
DIOCTL_GET_GEO
;

219 
drivî_msg
.
BUF
 = &
geo
;

220 
drivî_msg
.
PROC_NR
 = 
TASK_FS
;

221 
	`as£π
(
dd_m≠
[
	`MAJOR
(
ROOT_DEV
)].
drivî_ƒ
 !
INVALID_DRIVER
);

222 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
ROOT_DEV
)].
drivî_ƒ
, &
drivî_msg
);

224 
	`¥öé
("{FS} dev size: 0x%x se˘‹s\n", 
geo
.
size
);

226 
bôs_≥r_£˘
 = 
SECTOR_SIZE
 * 8;

228 
su≥r_block
 
sb
;

229 
sb
.
magic
 = 
MAGIC_V1
;

230 
sb
.
ƒ_öodes
 = 
bôs_≥r_£˘
;

231 
sb
.
ƒ_öode_£˘s
 = sb.
ƒ_öodes
 * 
INODE_SIZE
 / 
SECTOR_SIZE
;

232 
sb
.
ƒ_£˘s
 = 
geo
.
size
;

233 
sb
.
ƒ_im≠_£˘s
 = 1;

234 
sb
.
ƒ_sm≠_£˘s
 = sb.
ƒ_£˘s
 / 
bôs_≥r_£˘
 + 1;

235 
sb
.
n_1°_£˘
 = 1 + 1 +

236 
sb
.
ƒ_im≠_£˘s
 + sb.
ƒ_sm≠_£˘s
 + sb.
ƒ_öode_£˘s
;

237 
sb
.
roŸ_öode
 = 
ROOT_INODE
;

238 
sb
.
öode_size
 = 
INODE_SIZE
;

239 
öode
 
x
;

240 
sb
.
öode_isize_off
()&
x
.
i_size
 - ()&x;

241 
sb
.
öode_z⁄e_off
()&
x
.
i_z⁄e
 - ()&x;

242 
sb
.
dú_ít_size
 = 
DIRENT_SIZE
;

243 
dúít
 
de
;

244 
sb
.
dú_ít_öode_off
 = ()&
de
.
d_öo
 - ()&de;

245 
sb
.
dú_ít_‚ame_off
 = ()&
de
.
d_«me
 - ()&de;

247 
	`mem£t
(
fsbuf
, 0x90, 
SECTOR_SIZE
);

248 
	`mem˝y
(
fsbuf
, &
sb
, 
SUPER_BLOCK_SIZE
);

251 
	`WR_SECT
(
ROOT_DEV
, 1);

254 
	`ªad_su≥r_block
(
ROOT_DEV
);

256 
	`¥öé
("{FS} devbase:0x%x00, sb:0x%x00, imap:0x%x00, smap:0x%x00\n"

258 
geo
.
ba£
 * 2,

259 (
geo
.
ba£
 + 1) * 2,

260 (
geo
.
ba£
 + 1 + 1) * 2,

261 (
geo
.
ba£
 + 1 + 1 + 
sb
.
ƒ_im≠_£˘s
) * 2,

262 (
geo
.
ba£
 + 1 + 1 + 
sb
.
ƒ_im≠_£˘s
 + sb.
ƒ_sm≠_£˘s
) * 2,

263 (
geo
.
ba£
 + 
sb
.
n_1°_£˘
) * 2);

268 
	`mem£t
(
fsbuf
, 0, 
SECTOR_SIZE
);

269 
i
 = 0; i < (
NR_CONSOLES
 + 3); i++)

270 
fsbuf
[0] |1 << 
i
;

272 
	`as£π
(
fsbuf
[0] == 0x3F);

282 
	`WR_SECT
(
ROOT_DEV
, 2);

287 
	`mem£t
(
fsbuf
, 0, 
SECTOR_SIZE
);

288 
ƒ_£˘s
 = 
NR_DIRECT_ZONE
 + 1;

293 
i
 = 0; i < 
ƒ_£˘s
 / 8; i++)

294 
fsbuf
[
i
] = 0xFF;

296 
j
 = 0; j < 
ƒ_£˘s
 % 8; j++)

297 
fsbuf
[
i
] |(1 << 
j
);

299 
	`WR_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
);

302 
	`mem£t
(
fsbuf
, 0, 
SECTOR_SIZE
);

303 
i
 = 1; i < 
sb
.
ƒ_sm≠_£˘s
; i++)

304 
	`WR_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
 + 
i
);

308 
	`as£π
(
INSTALL_START_SECT
 + 
INSTALL_NR_SECTS
 <

309 
sb
.
ƒ_£˘s
 - 
NR_SECTS_FOR_LOG
);

310 
bô_off£t
 = 
INSTALL_START_SECT
 -

311 
sb
.
n_1°_£˘
 + 1;

312 
bô_off_ö_£˘
 = 
bô_off£t
 % (
SECTOR_SIZE
 * 8);

313 
bô_À·
 = 
INSTALL_NR_SECTS
;

314 
cur_£˘
 = 
bô_off£t
 / (
SECTOR_SIZE
 * 8);

315 
	`RD_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
 + 
cur_£˘
);

316 
bô_À·
) {

317 
byã_off
 = 
bô_off_ö_£˘
 / 8;

319 
fsbuf
[
byã_off
] |1 << (
bô_off_ö_£˘
 % 8);

320 
bô_À·
--;

321 
bô_off_ö_£˘
++;

322 i‡(
bô_off_ö_£˘
 =(
SECTOR_SIZE
 * 8)) {

323 
	`WR_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
 + 
cur_£˘
);

324 
cur_£˘
++;

325 
	`RD_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
 + 
cur_£˘
);

326 
bô_off_ö_£˘
 = 0;

329 
	`WR_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
 + 
cur_£˘
);

335 
	`mem£t
(
fsbuf
, 0, 
SECTOR_SIZE
);

336 
öode
 * 
pi
 = (öode*)
fsbuf
;

337 
pi
->
i_mode
 = 
I_DIRECTORY
;

338 
pi
->
i_size
 = 
DIRENT_SIZE
 * 6;

343 
i
 = 0; i < 
NR_DIRECT_ZONE
; i++) {

344 
pi
->
i_z⁄e
[
i
] = 
sb
.
n_1°_£˘
 + i;

346 
pi
->
i_ƒ_£˘s
 = 
NR_DIRECT_ZONE
;

348 
i
 = 0; i < 
NR_CONSOLES
; i++) {

349 
pi
 = (
öode
*)(
fsbuf
 + (
INODE_SIZE
 * (
i
 + 1)));

350 
pi
->
i_mode
 = 
I_CHAR_SPECIAL
;

351 
pi
->
i_size
 = 0;

352 
pi
->
i_z⁄e
[
DEV_ZONE
] = 
	`MAKE_DEV
(
DEV_CHAR_TTY
, 
i
);

353 
pi
->
i_ƒ_£˘s
 = 
NR_DIRECT_ZONE
;

356 
pi
 = (
öode
*)(
fsbuf
 + (
INODE_SIZE
 * (
NR_CONSOLES
 + 1)));

357 
pi
->
i_mode
 = 
I_REGULAR
;

358 
pi
->
i_size
 = 
INSTALL_NR_SECTS
 * 
SECTOR_SIZE
;

359 
pi
->
i_ƒ_£˘s
 = 
INSTALL_NR_SECTS
;

360 
pi
->
i_dev
 = 
ROOT_DEV
;

362 
öode
 
pö
;

363 
	`mem˝y
(&
pö
, 
pi
, 
INODE_SIZE
);

365 
backup
[
SECTOR_SIZE
];

366 
	`mem˝y
(
backup
, 
fsbuf
, 
SECTOR_SIZE
);

368 
	`Æloc_z⁄e_f‹_cmd_èr
(&
pö
, 
INSTALL_START_SECT
, 
INSTALL_NR_SECTS
);

370 
	`mem˝y
(
fsbuf
, 
backup
, 
SECTOR_SIZE
);

372 
	`mem˝y
(
pi
, &
pö
, 
INODE_SIZE
);

373 
	`WR_SECT
(
ROOT_DEV
, 2 + 
sb
.
ƒ_im≠_£˘s
 + sb.
ƒ_sm≠_£˘s
);

378 
	`mem£t
(
fsbuf
, 0, 
SECTOR_SIZE
);

379 
dúít
 * 
pde
 = (dúíà*)
fsbuf
;

381 
pde
->
d_öo
 = 1;

382 
	`°r˝y
(
pde
->
d_«me
, ".");

384 
pde
++;

385 
pde
->
d_öo
 = 1;

386 
	`°r˝y
(
pde
->
d_«me
, "..");

389 
i
 = 0; i < 
NR_CONSOLES
; i++) {

390 
pde
++;

391 
pde
->
d_öo
 = 
i
 + 2;

392 
	`•rötf
(
pde
->
d_«me
, "dev_ây%d", 
i
);

394 (++
pde
)->
d_öo
 = 
NR_CONSOLES
 + 2;

395 
	`•rötf
(
pde
->
d_«me
, "cmd.èr", 
i
);

396 
	`WR_SECT
(
ROOT_DEV
, 
sb
.
n_1°_£˘
);

397 
	}
}

414 
PUBLIC
 
	$rw_£˘‹
(
io_ty≥
, 
dev
, 
u64
 
pos
, 
byãs
, 
¥oc_ƒ
,

415 * 
buf
)

417 
MESSAGE
 
drivî_msg
;

419 
drivî_msg
.
ty≥
 = 
io_ty≥
;

420 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
dev
);

421 
drivî_msg
.
POSITION
 = 
pos
;

422 
drivî_msg
.
BUF
 = 
buf
;

423 
drivî_msg
.
CNT
 = 
byãs
;

424 
drivî_msg
.
PROC_NR
 = 
¥oc_ƒ
;

425 
	`as£π
(
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
 !
INVALID_DRIVER
);

426 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, &
drivî_msg
);

429 
	}
}

441 
PRIVATE
 
	$ªad_su≥r_block
(
dev
)

443 
i
;

444 
MESSAGE
 
drivî_msg
;

446 
drivî_msg
.
ty≥
 = 
DEV_READ
;

447 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
dev
);

448 
drivî_msg
.
POSITION
 = 
SECTOR_SIZE
 * 1;

449 
drivî_msg
.
BUF
 = 
fsbuf
;

450 
drivî_msg
.
CNT
 = 
SECTOR_SIZE
;

451 
drivî_msg
.
PROC_NR
 = 
TASK_FS
;

452 
	`as£π
(
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
 !
INVALID_DRIVER
);

453 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, &
drivî_msg
);

456 
i
 = 0; i < 
NR_SUPER_BLOCK
; i++)

457 i‡(
su≥r_block
[
i
].
sb_dev
 =
NO_DEV
)

459 i‡(
i
 =
NR_SUPER_BLOCK
)

460 
	`∑nic
("super_block slots used up");

462 
	`as£π
(
i
 == 0);

464 
su≥r_block
 * 
psb
 = (su≥r_block *)
fsbuf
;

466 
su≥r_block
[
i
] = *
psb
;

467 
su≥r_block
[
i
].
sb_dev
 = 
dev
;

468 
	}
}

481 
PUBLIC
 
su≥r_block
 * 
	$gë_su≥r_block
(
dev
)

483 
su≥r_block
 * 
sb
 = super_block;

484 ; 
sb
 < &
su≥r_block
[
NR_SUPER_BLOCK
]; sb++)

485 i‡(
sb
->
sb_dev
 =
dev
)

486  
sb
;

488 
	`∑nic
("su≥∏block o‡devi˚ %dÇŸ found.\n", 
dev
);

491 
	}
}

507 
PUBLIC
 
öode
 * 
	$gë_öode
(
dev
, 
num
)

509 i‡(
num
 == 0)

512 
öode
 * 
p
;

513 
öode
 * 
q
 = 0;

514 
p
 = &
öode_èbÀ
[0];Ö < &öode_èbÀ[
NR_INODE
];Ö++) {

515 i‡(
p
->
i_˙t
) {

516 i‡((
p
->
i_dev
 =
dev
Ë&& (p->
i_num
 =
num
)) {

518 
p
->
i_˙t
++;

519  
p
;

523 i‡(!
q
)

524 
q
 = 
p
;

528 i‡(!
q
)

529 
	`∑nic
("the inodeÅable is full");

531 
q
->
i_dev
 = 
dev
;

532 
q
->
i_num
 = 
num
;

533 
q
->
i_˙t
 = 1;

535 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

536 
blk_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
 + sb->
ƒ_sm≠_£˘s
 +

537 ((
num
 - 1Ë/ (
SECTOR_SIZE
 / 
INODE_SIZE
));

538 
	`RD_SECT
(
dev
, 
blk_ƒ
);

539 
öode
 * 
pöode
 =

540 (
öode
 *)((
u8
*)
fsbuf
 +

541 ((
num
 - 1 ) % (
SECTOR_SIZE
 / 
INODE_SIZE
))

542 * 
INODE_SIZE
);

543 
q
->
i_mode
 = 
pöode
->i_mode;

544 
q
->
i_size
 = 
pöode
->i_size;

545 
	`mem˝y
(
q
->
i_z⁄e
,

546 
pöode
->
i_z⁄e
,

547 
NR_ZONE_PER_INODE
 * (
z⁄e_t
));

548 
q
->
i_ƒ_£˘s
 = 
pöode
->i_nr_sects;

549  
q
;

550 
	}
}

562 
PUBLIC
 
	$put_öode
(
öode
 * 
pöode
)

564 
	`as£π
(
pöode
->
i_˙t
 > 0);

565 
pöode
->
i_˙t
--;

566 
	}
}

577 
PUBLIC
 
	$sync_öode
(
öode
 * 
p
)

579 
öode
 * 
pöode
;

580 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
p
->
i_dev
);

581 
blk_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
 + sb->
ƒ_sm≠_£˘s
 +

582 ((
p
->
i_num
 - 1Ë/ (
SECTOR_SIZE
 / 
INODE_SIZE
));

583 
	`RD_SECT
(
p
->
i_dev
, 
blk_ƒ
);

584 
pöode
 = (
öode
*)((
u8
*)
fsbuf
 +

585 (((
p
->
i_num
 - 1Ë% (
SECTOR_SIZE
 / 
INODE_SIZE
))

586 * 
INODE_SIZE
));

587 
pöode
->
i_mode
 = 
p
->i_mode;

588 
pöode
->
i_size
 = 
p
->i_size;

589 
	`mem˝y
(
pöode
->
i_z⁄e
,

590 
p
->
i_z⁄e
,

591 (
THIRD_LEVEL_ZONE
 + 1Ë* (
z⁄e_t
));

592 
pöode
->
i_ƒ_£˘s
 = 
p
->i_nr_sects;

593 
	`WR_SECT
(
p
->
i_dev
, 
blk_ƒ
);

594 
	}
}

604 
PRIVATE
 
	$fs_f‹k
()

606 
i
;

607 
¥oc
* 
chûd
 = &
¥oc_èbÀ
[
fs_msg
.
PID
];

608 
i
 = 0; i < 
NR_FILES
; i++) {

609 i‡(
chûd
->
fûp
[
i
]) {

610 
chûd
->
fûp
[
i
]->
fd_˙t
++;

611 
chûd
->
fûp
[
i
]->
fd_öode
->
i_˙t
++;

616 
	}
}

627 
PRIVATE
 
	$fs_exô
()

629 
i
;

630 
¥oc
* 
p
 = &
¥oc_èbÀ
[
fs_msg
.
PID
];

631 
	`as£π
(
NULL
 !
p
->
pwd
 && NULL !p->
roŸ
);

632 
p
->
pwd
->
i_˙t
--;

633 
p
->
roŸ
->
i_˙t
--;

634 
i
 = 0; i < 
NR_FILES
; i++) {

635 i‡(
p
->
fûp
[
i
]) {

637 
p
->
fûp
[
i
]->
fd_öode
->
i_˙t
--;

639 i‡(--
p
->
fûp
[
i
]->
fd_˙t
 == 0)

640 
p
->
fûp
[
i
]->
fd_öode
 = 0;

641 
p
->
fûp
[
i
] = 0;

645 
	}
}

	@fs/misc.c

12 
	~"ty≥.h
"

13 
	~"°dio.h
"

14 
	~"c⁄°.h
"

15 
	~"¥Ÿe˘.h
"

16 
	~"°rög.h
"

17 
	~"fs.h
"

18 
	~"mm.h
"

19 
	~"dúít.h
"

20 
	~"uni°d.h
"

21 
	~"°dlib.h
"

22 
	~"¥oc.h
"

23 
	~"ây.h
"

24 
	~"c⁄sﬁe.h
"

25 
	~"globÆ.h
"

26 
	~"keybﬂrd.h
"

27 
	~"¥Ÿo.h
"

28 
	~"hd.h
"

30 
PRIVATE
 
föd_íåy
 (
öode
 * 
dú_öode
, * 
íåy_«me
);

39 
PUBLIC
 
	$do_°©
()

41 
∑th«me
[
MAX_PATH
];

42 
fûíame
[
MAX_PATH
];

45 
«me_Àn
 = 
fs_msg
.
NAME_LEN
;

46 
§c
 = 
fs_msg
.
sour˚
;

47 
	`as£π
(
«me_Àn
 < 
MAX_PATH
);

48 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
∑th«me
),

49 (*)
	`va2œ
(
§c
, 
fs_msg
.
PATHNAME
),

50 
«me_Àn
);

51 
∑th«me
[
«me_Àn
] = 0;

53 
d_öo
 = 
	`£¨ch_fûe
(
∑th«me
);

54 i‡(
d_öo
 =
INVALID_INODE
) {

60 
öode
 * 
pö
 = 0;

62 
öode
 * 
dú_öode
;

64 i‡('/' !
∑th«me
[0]) {

65 
dú_öode
 = 
roŸ_öode
;

67 
dú_öode
 = 
roŸ_öode
;

70 i‡(
	`°rù_∑th
(
fûíame
, 
∑th«me
, &
dú_öode
) != 0) {

75 
	`as£π
(0);

77 
pö
 = 
	`gë_öode
(
dú_öode
->
i_dev
, 
d_öo
);

79 
°©
 
s
;

80 
s
.
°_dev
 = 
pö
->
i_dev
;

81 
s
.
°_öo
 = 
pö
->
i_num
;

82 
s
.
°_mode

pö
->
i_mode
;

83 
s
.
°_rdev

	`is_•ecül
(
pö
->
i_mode
Ë?Öö->
i_z⁄e
[
DEV_ZONE
]: 
NO_DEV
;

84 
s
.
°_size

pö
->
i_size
;

86 
	`put_öode
(
pö
);

88 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
fs_msg
.
BUF
),

89 (*)
	`va2œ
(
TASK_FS
, &
s
),

90 (
°©
));

93 
	}
}

106 
	$föd_íåy
 ( 
öode
 * 
dú_öode
, * 
íåy_«me
 )

108 
i
, 
j
;

111 
imode
 = 
dú_öode
->
i_mode
 & 
I_TYPE_MASK
;

112 i‡(
I_DIRECTORY
 !
imode
) {

114  
INVALID_INODE
;

120 
ƒ_dú_blks
 = (
dú_öode
->
i_size
 + 
SECTOR_SIZE
 - 1) / SECTOR_SIZE;

121 
ƒ_dú_íåõs
 =

122 
dú_öode
->
i_size
 / 
DIRENT_SIZE
;

127 
m
 = 0;

128 
dúít
 * 
pde
;

129 
i
 = 0; i < 
ƒ_dú_blks
; i++) {

130 
	`RD_SECT
(
dú_öode
->
i_dev
, dú_öode->
i_z⁄e
[
i
]);

131 
pde
 = (
dúít
 *)
fsbuf
;

132 
j
 = 0; j < 
SECTOR_SIZE
 / 
DIRENT_SIZE
; j++,
pde
++) {

133 i‡(
	`°rcmp
(
íåy_«me
, 
pde
->
d_«me
) == 0)

134  
pde
->
d_öo
;

135 i‡(++
m
 > 
ƒ_dú_íåõs
)

138 i‡(
m
 > 
ƒ_dú_íåõs
)

144 
	}
}

158 
PUBLIC
 
	$£¨ch_fûe
(* 
∑th
)

161 
fûíame
[
MAX_PATH
];

162 
	`mem£t
(
fûíame
, 0, 
MAX_FILENAME_LEN
);

165 
öode
 * 
dú_öode
;

166 
d_öo
 = 
INVALID_INODE
;

167 
§c
 = 
fs_msg
.
sour˚
;

168 
¥oc
 * 
p
 = &
¥oc_èbÀ
[
§c
];

169 i‡(
∑th
[0] == '/') {

170 
dú_öode
 = 
p
->
roŸ
;

171 i‡('\0' =
∑th
[1]) {

172  
ROOT_INODE
;

175 
dú_öode
 = 
p
->
pwd
;

179 *
∑th
 != '\0') {

180 i‡(
	`°rù_∑th
(
fûíame
, 
∑th
, &
dú_öode
) != 0)

181  
INVALID_INODE
;

185 i‡('/' =*
∑th
) {

187 
∑th
++;

191 
d_öo
 = 
	`föd_íåy
(
dú_öode
, 
fûíame
);

192 i‡(!
d_öo
) {

194  
INVALID_INODE
;

198 
dú_öode
 = 
	`gë_öode
(dú_öode->
i_dev
, 
d_öo
);

201 ;*
∑th
 != '\0' && *path != '/';path++);

205 
	`put_öode
(
dú_öode
);

207 i‡(
fûíame
[0] == 0)

208  
dú_öode
->
i_num
;

211  
d_öo
;

212 
	}
}

243 
PUBLIC
 
	$°rù_∑th
(* 
fûíame
, c⁄° * 
∑th«me
,

244 
öode
** 
µöode
)

246 c⁄° * 
s
 = 
∑th«me
;

247 * 
t
 = 
fûíame
;

249 i‡(
s
 == 0)

250  
INVALID_INODE
;

252 i‡(*
s
 == '/') {

253 
s
++;

256 *
s
) {

257 i‡(*
s
 == '/')

259 *
t
++ = *
s
++;

261 i‡(
t
 - 
fûíame
 >
MAX_FILENAME_LEN
)

264 *
t
 = 0;

267 
	}
}

	@fs/open.c

14 
	~"ty≥.h
"

15 
	~"°dio.h
"

16 
	~"c⁄°.h
"

17 
	~"¥Ÿe˘.h
"

18 
	~"°rög.h
"

19 
	~"fs.h
"

20 
	~"mm.h
"

21 
	~"dúít.h
"

22 
	~"uni°d.h
"

23 
	~"°dlib.h
"

24 
	~"¥oc.h
"

25 
	~"ây.h
"

26 
	~"c⁄sﬁe.h
"

27 
	~"globÆ.h
"

28 
	~"keybﬂrd.h
"

29 
	~"¥Ÿo.h
"

31 
PRIVATE
 
öode
 * 
¸óã_fûe
(* 
∑th
, 
Êags
);

32 
PRIVATE
 
Æloc_im≠_bô
(
dev
);

33 
PRIVATE
 
Æloc_sm≠_bô
(
dev
, 
ƒ_£˘s_to_Æloc
);

34 
PRIVATE
 
öode
 * 
√w_öode
(
dev
, 
d_öo
, 
°¨t_£˘
);

35 
PRIVATE
 
√w_dúít
(
öode
 * 
dú_öode
, 
d_öo
, * 
fûíame
);

45 
PUBLIC
 
	$do_›í
()

47 
fd
 = -1;

49 
∑th«me
[
MAX_PATH
];

52 
Êags
 = 
fs_msg
.
FLAGS
;

53 
«me_Àn
 = 
fs_msg
.
NAME_LEN
;

54 
§c
 = 
fs_msg
.
sour˚
;

55 
	`as£π
(
«me_Àn
 < 
MAX_PATH
);

56 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
∑th«me
),

57 (*)
	`va2œ
(
§c
, 
fs_msg
.
PATHNAME
),

58 
«me_Àn
);

59 
∑th«me
[
«me_Àn
] = 0;

62 
i
;

63 
i
 = 0; i < 
NR_FILES
; i++) {

64 i‡(
pˇŒî
->
fûp
[
i
] == 0) {

65 
fd
 = 
i
;

69 i‡((
fd
 < 0Ë|| (fd >
NR_FILES
))

70 
	`∑nic
("fûp[] i†fuŒ (PID:%d)", 
	`¥oc2pid
(
pˇŒî
));

73 
i
 = 0; i < 
NR_FILE_DESC
; i++)

74 i‡(
f_desc_èbÀ
[
i
].
fd_öode
 == 0)

76 i‡(
i
 >
NR_FILE_DESC
)

77 
	`∑nic
("f_desc_èbÀ[] i†fuŒ (PID:%d)", 
	`¥oc2pid
(
pˇŒî
));

79 
d_öo
 = 
	`£¨ch_fûe
(
∑th«me
);

81 
öode
 * 
pö
 = 0;

83 i‡(
d_öo
 =
INVALID_INODE
) {

84 i‡(
Êags
 & 
O_CREAT
) {

85 
pö
 = 
	`¸óã_fûe
(
∑th«me
, 
Êags
);

88 
	`¥öé
("{FS} fûênŸÉxi°s: %s\n", 
∑th«me
);

92 i‡(
Êags
 & 
O_RDWR
) {

93 i‡((
Êags
 & 
O_CREAT
Ë&& (!(Êag†& 
O_TRUNC
))) {

94 
	`as£π
(
Êags
 =(
O_RDWR
 | 
O_CREAT
));

95 
	`¥öé
("{FS} fûêexi°s: %s\n", 
∑th«me
);

98 
	`as£π
((
Êags
 =
O_RDWR
 ) ||

99 (
Êags
 =(
O_RDWR
 | 
O_TRUNC
 )) ||

100 (
Êags
 =(
O_RDWR
 | 
O_TRUNC
 | 
O_CREAT
)));

102 
fûíame
[
MAX_PATH
];

103 
öode
 * 
dú_öode
;

105 
¥oc
 * 
p
 = &
¥oc_èbÀ
[
§c
];

106 i‡('/' !
∑th«me
[0]) {

107 
dú_öode
 = 
p
->
pwd
;

109 
dú_öode
 = 
p
->
roŸ
;

111 i‡(
	`°rù_∑th
(
fûíame
, 
∑th«me
, &
dú_öode
) != 0)

113 
pö
 = 
	`gë_öode
(
dú_öode
->
i_dev
, 
d_öo
);

116 
	`¥öé
("{FS} fûêexi°s: %s\n", 
∑th«me
);

120 i‡(
Êags
 & 
O_TRUNC
) {

121 
	`as£π
(
pö
);

122 
pö
->
i_size
 = 0;

123 
	`sync_öode
(
pö
);

126 i‡(
pö
) {

128 
pˇŒî
->
fûp
[
fd
] = &
f_desc_èbÀ
[
i
];

131 
f_desc_èbÀ
[
i
].
fd_öode
 = 
pö
;

133 
f_desc_èbÀ
[
i
].
fd_mode
 = 
Êags
;

134 
f_desc_èbÀ
[
i
].
fd_˙t
 = 1;

135 
f_desc_èbÀ
[
i
].
fd_pos
 = 0;

137 
imode
 = 
pö
->
i_mode
 & 
I_TYPE_MASK
;

139 i‡(
imode
 =
I_CHAR_SPECIAL
) {

140 
MESSAGE
 
drivî_msg
;

141 
drivî_msg
.
ty≥
 = 
DEV_OPEN
;

142 
dev
 = 
pö
->
i_z⁄e
[
DEV_ZONE
];

143 
drivî_msg
.
DEVICE
 = 
	`MINOR
(
dev
);

144 
	`as£π
(
	`MAJOR
(
dev
) == 4);

145 
	`as£π
(
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
 !
INVALID_DRIVER
);

146 
	`£nd_ªcv
(
BOTH
,

147 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
,

148 &
drivî_msg
);

150 i‡(
imode
 =
I_DIRECTORY
) {

154 
	`as£π
(
pö
->
i_mode
 =
I_REGULAR
);

161  
fd
;

162 
	}
}

171 
PUBLIC
 

172 
	$do_mkdú
 ()

174 
i
;

176 
	`¥öé
("{FS} StartÅo mkdir\n");

177 
öode
 *
dú_öode
 = 
p_¥oc_ªady
->
pwd
;

179 
d_öo
 = 
	`Æloc_im≠_bô
(
dú_öode
->
i_dev
);

180 
‰ì_£˘_ƒ
 = 
	`Æloc_sm≠_bô
(
dú_öode
->
i_dev
,

181 
NR_DIRECT_ZONE
);

183 
	`¥öé
("{FS} imapánd smapállocated\n");

184 
öode
 * 
√w_öode
 = 
	`gë_öode
(
dú_öode
->
i_dev
, 
d_öo
);

186 
√w_öode
->
i_mode
 = 
I_DIRECTORY
;

188 
√w_öode
->
i_size
 = 0;

189 
i
 = 0; i < 
NR_DIRECT_ZONE
; i++) {

190 
√w_öode
->
i_z⁄e
[
i
] = 
‰ì_£˘_ƒ
 + i;

192 
√w_öode
->
i_ƒ_£˘s
 = 
NR_DIRECT_ZONE
;

194 
√w_öode
->
i_dev
 = 
dú_öode
->i_dev;

195 
√w_öode
->
i_˙t
 = 1;

196 
√w_öode
->
i_num
 = 
d_öo
;

199 
	`sync_öode
(
√w_öode
);

201 
	`¥öé
("{FS} inode sync done\n");

203 
fûíame
[
MAX_PATH
];

206 
«me_Àn
 = 
fs_msg
.
NAME_LEN
;

207 
§c
 = 
fs_msg
.
sour˚
;

208 
	`as£π
(
«me_Àn
 < 
MAX_PATH
);

209 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fûíame
),

210 (*)
	`va2œ
(
§c
, 
fs_msg
.
PATHNAME
),

211 
«me_Àn
);

212 
fûíame
[
«me_Àn
] = 0;

215 
	`√w_dúít
(
dú_öode
, 
√w_öode
->
i_num
, 
fûíame
);

218 
	`√w_dúít
(
√w_öode
,Çew_öode->
i_num
, ".");

219 
	`√w_dúít
(
√w_öode
, 
dú_öode
->
i_num
, "..");

222 
	`put_öode
(
√w_öode
);

223 
	`¥öé
("{FS} direntállocated\n");

226 
	}
}

241 
PRIVATE
 
öode
 * 
	$¸óã_fûe
(* 
∑th
, 
Êags
)

243 
fûíame
[
MAX_PATH
];

244 
öode
 * 
dú_öode
;

246 
§c
 = 
fs_msg
.
sour˚
;

247 
¥oc
 * 
p
 = &
¥oc_èbÀ
[
§c
];

248 i‡('/' !
∑th
[0]) {

249 
dú_öode
 = 
p
->
pwd
;

251 
dú_öode
 = 
p
->
roŸ
;

253 i‡(
	`°rù_∑th
(
fûíame
, 
∑th
, &
dú_öode
) != 0)

256 
d_öo
 = 
	`Æloc_im≠_bô
(
dú_öode
->
i_dev
);

257 
‰ì_£˘_ƒ
 = 
	`Æloc_sm≠_bô
(
dú_öode
->
i_dev
,

258 
NR_DIRECT_ZONE
);

259 
öode
 *
√wöo
 = 
	`√w_öode
(
dú_öode
->
i_dev
, 
d_öo
,

260 
‰ì_£˘_ƒ
);

262 
	`√w_dúít
(
dú_öode
, 
√wöo
->
i_num
, 
fûíame
);

264  
√wöo
;

265 
	}
}

275 
PUBLIC
 
	$do_˛o£
()

277 
fd
 = 
fs_msg
.
FD
;

278 
	`put_öode
(
pˇŒî
->
fûp
[
fd
]->
fd_öode
);

279 i‡(--
pˇŒî
->
fûp
[
fd
]->
fd_˙t
 == 0)

280 
pˇŒî
->
fûp
[
fd
]->
fd_öode
 = 0;

281 
pˇŒî
->
fûp
[
fd
] = 0;

284 
	}
}

295 
PUBLIC
 
	$do_l£ek
()

297 
fd
 = 
fs_msg
.
FD
;

298 
off
 = 
fs_msg
.
OFFSET
;

299 
whí˚
 = 
fs_msg
.
WHENCE
;

301 
pos
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

302 
f_size
 = 
pˇŒî
->
fûp
[
fd
]->
fd_öode
->
i_size
;

304 
whí˚
) {

305 
SEEK_SET
:

306 
pos
 = 
off
;

308 
SEEK_CUR
:

309 
pos
 +
off
;

311 
SEEK_END
:

312 
pos
 = 
f_size
 + 
off
;

318 i‡((
pos
 > 
f_size
) || (pos < 0)) {

321 
pˇŒî
->
fûp
[
fd
]->
fd_pos
 = 
pos
;

322  
pos
;

323 
	}
}

335 
PRIVATE
 
	$Æloc_im≠_bô
(
dev
)

337 
d_öo
 = 0;

338 
i
, 
j
, 
k
;

340 
im≠_blk0_ƒ
 = 1 + 1;

341 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

343 
i
 = 0; i < 
sb
->
ƒ_im≠_£˘s
; i++) {

344 
	`RD_SECT
(
dev
, 
im≠_blk0_ƒ
 + 
i
);

346 
j
 = 0; j < 
SECTOR_SIZE
; j++) {

348 i‡(
fsbuf
[
j
] == 0xFF)

351 
k
 = 0; ((
fsbuf
[
j
] >> k) & 1) != 0; k++) {}

353 
d_öo
 = (
i
 * 
SECTOR_SIZE
 + 
j
Ë* 8 + 
k
;

354 
fsbuf
[
j
] |(1 << 
k
);

356 
	`WR_SECT
(
dev
, 
im≠_blk0_ƒ
 + 
i
);

360  
d_öo
;

364 
	`∑nic
("inode-map isÖrobably full.\n");

367 
	}
}

380 
PRIVATE
 
	$Æloc_sm≠_bô
(
dev
, 
ƒ_£˘s_to_Æloc
)

384 
i
;

385 
j
;

386 
k
;

388 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

390 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

391 
‰ì_£˘_ƒ
 = 0;

393 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

395 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

398 
j
 = 0; j < 
SECTOR_SIZE
 && 
ƒ_£˘s_to_Æloc
 > 0; j++) {

399 
k
 = 0;

400 i‡(!
‰ì_£˘_ƒ
) {

402 i‡(
fsbuf
[
j
] == 0xFF) ;

403 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

404 
‰ì_£˘_ƒ
 = (
i
 * 
SECTOR_SIZE
 + 
j
) * 8 +

405 
k
 - 1 + 
sb
->
n_1°_£˘
;

408 ; 
k
 < 8; k++) {

409 
	`as£π
(((
fsbuf
[
j
] >> 
k
) & 1) == 0);

410 
fsbuf
[
j
] |(1 << 
k
);

411 i‡(--
ƒ_£˘s_to_Æloc
 == 0)

416 i‡(
‰ì_£˘_ƒ
)

417 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

419 i‡(
ƒ_£˘s_to_Æloc
 == 0)

423 
	`as£π
(
ƒ_£˘s_to_Æloc
 == 0);

425  
‰ì_£˘_ƒ
;

426 
	}
}

440 
PRIVATE
 
öode
 * 
	$√w_öode
(
dev
, 
d_öo
, 
°¨t_£˘
)

442 
i
;

443 
öode
 * 
√w_öode
 = 
	`gë_öode
(
dev
, 
d_öo
);

445 
√w_öode
->
i_mode
 = 
I_REGULAR
;

446 
√w_öode
->
i_size
 = 
NR_DIRECT_ZONE
 * 
SECTOR_SIZE
;

447 
i
 = 0; i < 
NR_DIRECT_ZONE
; i++) {

448 
√w_öode
->
i_z⁄e
[
i
] = 
°¨t_£˘
 + i;

450 
√w_öode
->
i_ƒ_£˘s
 = 
NR_DIRECT_ZONE
;

452 
√w_öode
->
i_dev
 = 
dev
;

453 
√w_öode
->
i_˙t
 = 1;

454 
√w_öode
->
i_num
 = 
d_öo
;

457 
	`sync_öode
(
√w_öode
);

459  
√w_öode
;

460 
	}
}

472 
PRIVATE
 
	$√w_dúít
(
öode
 *
dú_öode
,
d_öo
,*
fûíame
)

475 
ƒ_dú_blks
 = (
dú_öode
->
i_size
 + 
SECTOR_SIZE
) / SECTOR_SIZE;

476 
ƒ_dú_íåõs
 =

477 
dú_öode
->
i_size
 / 
DIRENT_SIZE
;

483 
m
 = 0;

484 
dúít
 * 
pde
;

485 
dúít
 * 
√w_de
 = 0;

487 
i
, 
j
;

488 
i
 = 0; i < 
ƒ_dú_blks
; i++) {

489 
	`RD_SECT
(
dú_öode
->
i_dev
, dú_öode->
i_z⁄e
[
i
]);

491 
pde
 = (
dúít
 *)
fsbuf
;

492 
j
 = 0; j < 
SECTOR_SIZE
 / 
DIRENT_SIZE
; j++,
pde
++) {

493 i‡(++
m
 > 
ƒ_dú_íåõs
)

496 i‡(
pde
->
d_öo
 == 0) {

497 
√w_de
 = 
pde
;

501 i‡(
m
 > 
ƒ_dú_íåõs
 ||

502 
√w_de
)

505 i‡(!
√w_de
) {

506 
√w_de
 = 
pde
;

507 
dú_öode
->
i_size
 +
DIRENT_SIZE
;

509 
√w_de
->
d_öo
 = d_ino;

510 
	`°r˝y
(
√w_de
->
d_«me
, 
fûíame
);

513 
	`WR_SECT
(
dú_öode
->
i_dev
, dú_öode->
i_z⁄e
[
i
]);

516 
	`sync_öode
(
dú_öode
);

517 
	}
}

	@fs/read_write.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

27 
PRIVATE
 
Æloc_bô
 (
dev
);

28 
PRIVATE
 
Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 );

29 
PRIVATE
 
Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_íd
, 
z⁄e_t
 * 
i_z⁄e
);

30 
PRIVATE
 
rdwt_z⁄es
 (
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
);

46 
PRIVATE
 

47 
	$rdwt_z⁄es
 ( 
pos
, 
Àn
, 
§c
, * 
buf
, 
öode
 * 
pö
, 
mode
)

50 
	`as£π
(
WRITE
 =
mode
 || 
READ
 == mode);

52 
i
;

53 
Æign
 = 0;

54 
pos_íd
 = 
pos
 + 
Àn
;

57 i‡(
READ
 =
mode
) {

58 i‡(
pos
 > 
pö
->
i_size
) {

61 } i‡(
pos_íd
 > 
pö
->
i_size
) {

63 
Àn
 -(
pos_íd
 - 
pö
->
i_size
);

64 
pos_íd
 = 
pö
->
i_size
;

69 
ƒ_£˘_°¨t
 = 
pos
 >> 
SECTOR_SIZE_SHIFT
;

70 
ƒ_rw_£˘
 = 
Àn
 >> 
SECTOR_SIZE_SHIFT
;

71 
off
 = 
pos_íd
 % 
SECTOR_SIZE
;

74 i‡(
off
 > 0) {

75 
ƒ_rw_£˘
 ++;

78 
ƒ_£˘
 = 
ƒ_£˘_°¨t
 + 
ƒ_rw_£˘
;

81 i‡(
ƒ_£˘
 > 
pö
->
i_ƒ_£˘s
) {

83 
	`as£π
(
WRITE
 =
mode
);

84 
u32
 
z⁄e_amou¡
 = 
	`Æloc_z⁄e
(
pö
->
i_dev
,Öö->
i_ƒ_£˘s
, 
ƒ_£˘
 -Öö->i_ƒ_£˘s,Öö->
i_z⁄e
);

85 
	`as£π
(
ƒ_£˘
 - 
pö
->
i_ƒ_£˘s
 =
z⁄e_amou¡
);

86 
pö
->
i_ƒ_£˘s
 +
z⁄e_amou¡
;

89 i‡(
ƒ_£˘_°¨t
 < 
NR_DIRECT_ZONE
) {

91 
Êag_dúe˘_z⁄e
 = 1;

94 
dúe˘_ƒ_rw_£˘
 = 
ƒ_rw_£˘
;

95 i‡(
ƒ_£˘
 > 
NR_DIRECT_ZONE
) {

97 
Êag_dúe˘_z⁄e
 = 0;

98 
dúe˘_ƒ_rw_£˘
 = 
NR_DIRECT_ZONE
 - 
ƒ_£˘_°¨t
;

99 
ƒ_rw_£˘
 -
dúe˘_ƒ_rw_£˘
;

101 
i
 = 0; i < 
dúe˘_ƒ_rw_£˘
; i++, 
Æign
++) {

102 i‡(
WRITE
 =
mode
) {

103 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

104 (*)
	`va2œ
(
§c
, 
buf
 + 
Æign
 * 
SECTOR_SIZE
),

105 
SECTOR_SIZE
);

106 
	`WR_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
ƒ_£˘_°¨t
 + 
i
]);

107 } i‡(
READ
 =
mode
) {

108 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
ƒ_£˘_°¨t
 + 
i
]);

109 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
Æign
 * 
SECTOR_SIZE
),

110 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

111 
SECTOR_SIZE
);

114 i‡(
Êag_dúe˘_z⁄e
) {

115  
Àn
;

120 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

122 i‡(
ƒ_£˘_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

123 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

124 i‡(
ƒ_£˘_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

125 
£c⁄d_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

128 
Êag_£c⁄d_Àvñ
 = 1;

129 
£c⁄d_ƒ_rw_£˘
 = 
ƒ_rw_£˘
;

130 i‡(
ƒ_£˘
 > 
NR_SECOND_LEVEL_ZONE
) {

132 
Êag_£c⁄d_Àvñ
 = 0;

133 
£c⁄d_ƒ_rw_£˘
 = 
NR_SECOND_LEVEL_ZONE
 - 
£c⁄d_Àvñ_°¨t
;

134 
ƒ_rw_£˘
 -
£c⁄d_ƒ_rw_£˘
;

138 
£c⁄d_Àvñ_°¨t
 -
NR_DIRECT_ZONE
;

140 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

141 
	`mem˝y
((*)
£˘‹s
,

142 (*)
fsbuf
,

143 
NR_ZONE_PER_SECT
 * () );

145 
i
 = 0; i < 
£c⁄d_ƒ_rw_£˘
; i++, 
Æign
++) {

146 i‡(
WRITE
 =
mode
) {

147 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

148 (*)
	`va2œ
(
§c
, 
buf
 + 
Æign
 * 
SECTOR_SIZE
),

149 
SECTOR_SIZE
);

150 
	`WR_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]);

151 } if(
READ
 =
mode
) {

152 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]);

153 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
Æign
 * 
SECTOR_SIZE
),

154 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

155 
SECTOR_SIZE
);

161 i‡(
Êag_£c⁄d_Àvñ
) {

162  
Àn
;

166 i‡(
ƒ_£˘_°¨t
 < 
NR_THIRD_LEVEL_ZONE
) {

168 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

169 i‡(
ƒ_£˘_°¨t
 > 
thúd_Àvñ_°¨t
) {

170 
thúd_Àvñ_°¨t
 = 
ƒ_£˘_°¨t
;

173 
Êag_thúd_Àvñ
 = 1;

174 
thúd_ƒ_rw_£˘
 = 
ƒ_rw_£˘
;

175 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

177 
Êag_thúd_Àvñ
 = 0;

178 
thúd_ƒ_rw_£˘
 = 
NR_THIRD_LEVEL_ZONE
 - 
thúd_Àvñ_°¨t
;

179 
ƒ_rw_£˘
 -
thúd_ƒ_rw_£˘
;

183 
thúd_Àvñ_°¨t
 -
NR_SECOND_LEVEL_ZONE
;

185 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

186 
	`mem˝y
((*)
£˘‹s
,

187 (*)
fsbuf
,

188 
NR_ZONE_PER_SECT
 * () );

190 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

191 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

192 
i
 = 0; i < 
thúd_ƒ_rw_£˘
; i++, 
Æign
++) {

193 
£c⁄d_Àvñ_ödex
 =

194 (
thúd_Àvñ_°¨t
 + 
i
) /

195 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

196 
thúd_Àvñ_ödex
 =

197 (
thúd_Àvñ_°¨t
 + 
i
) %

198 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

200 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


201 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£˘‹s
[
£c⁄d_Àvñ_ödex
]){

202 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

203 
	`mem˝y
((*)
cuºít_z⁄es
,

204 (*)
fsbuf
,

205 
NR_ZONE_PER_SECT
 * () );

210 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
£˘‹s
[
£c⁄d_Àvñ_ödex
];

212 i‡(
WRITE
 =
mode
) {

213 
	`phys_c›y
((*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

214 (*)
	`va2œ
(
§c
, 
buf
 + 
Æign
 * 
SECTOR_SIZE
),

215 
SECTOR_SIZE
);

216 
	`WR_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

217 } if(
READ
 =
mode
) {

218 
	`RD_SECT
(
pö
->
i_dev
, 
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

219 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
buf
 + 
Æign
 * 
SECTOR_SIZE
),

220 (*)
	`va2œ
(
TASK_FS
, 
fsbuf
),

221 
SECTOR_SIZE
);

227 i‡(
Êag_thúd_Àvñ
) {

228  
Àn
;

232 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

234 
	`∑nic
("buf isÅooÜarge");

238 
	}
}

251 
PUBLIC
 
	$do_rdwt
()

253 
fd
 = 
fs_msg
.
FD
;

254 * 
buf
 = 
fs_msg
.
BUF
;

255 
Àn
 = 
fs_msg
.
CNT
;

257 
§c
 = 
fs_msg
.
sour˚
;

259 
	`as£π
((
pˇŒî
->
fûp
[
fd
] >&
f_desc_èbÀ
[0]) &&

260 (
pˇŒî
->
fûp
[
fd
] < &
f_desc_èbÀ
[
NR_FILE_DESC
]));

262 i‡(!(
pˇŒî
->
fûp
[
fd
]->
fd_mode
 & 
O_RDWR
))

265 
pos
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

267 
öode
 * 
pö
 = 
pˇŒî
->
fûp
[
fd
]->
fd_öode
;

269 
	`as£π
(
pö
 >&
öode_èbÀ
[0] &&Öö < &öode_èbÀ[
NR_INODE
]);

271 
imode
 = 
pö
->
i_mode
 & 
I_TYPE_MASK
;

273 i‡(
imode
 =
I_CHAR_SPECIAL
) {

274 
t
 = 
fs_msg
.
ty≥
 =
READ
 ? 
DEV_READ
 : 
DEV_WRITE
;

275 
fs_msg
.
ty≥
 = 
t
;

277 
dev
 = 
pö
->
i_z⁄e
[
DEV_ZONE
];

278 
	`as£π
(
	`MAJOR
(
dev
) == 4);

280 
fs_msg
.
DEVICE
 = 
	`MINOR
(
dev
);

281 
fs_msg
.
BUF
 = 
buf
;

282 
fs_msg
.
CNT
 = 
Àn
;

283 
fs_msg
.
PROC_NR
 = 
§c
;

284 
	`as£π
(
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
 !
INVALID_DRIVER
);

285 
	`£nd_ªcv
(
BOTH
, 
dd_m≠
[
	`MAJOR
(
dev
)].
drivî_ƒ
, &
fs_msg
);

286 
	`as£π
(
fs_msg
.
CNT
 =
Àn
);

288  
fs_msg
.
CNT
;

291 
	`as£π
(
pö
->
i_mode
 =
I_REGULAR
 ||Öö->i_modê=
I_DIRECTORY
);

292 
	`as£π
((
fs_msg
.
ty≥
 =
READ
Ë|| (fs_msg.ty≥ =
WRITE
));

342 
byãs_rw
 = 
	`rdwt_z⁄es
 (
pos
, 
Àn
, 
§c
, 
buf
, 
pö
, 
fs_msg
.
ty≥
);

343 
pˇŒî
->
fûp
[
fd
]->
fd_pos
 +
byãs_rw
;

346 i‡(
pˇŒî
->
fûp
[
fd
]->
fd_pos
 > 
pö
->
i_size
) {

348 
pö
->
i_size
 = 
pˇŒî
->
fûp
[
fd
]->
fd_pos
;

350 
	`sync_öode
(
pö
);

353  
byãs_rw
;

355 
	}
}

365 
PRIVATE
 

366 
	$Æloc_£˘
 (
dev
, 
z⁄e_t
 * 
£˘‹_±r
 )

369 
Æloˇãd_£˘
 = 
	`Æloc_bô
(
dev
);

370 i‡(
INVALID_SECTOR
 =
Æloˇãd_£˘
) {

371 
	`∑nic
("noÉnough sector");

373 *
£˘‹_±r
 = 
Æloˇãd_£˘
;

374 
	}
}

387 
PRIVATE
 

388 
	$Æloc_z⁄e
 (
dev
, 
Æloc_°¨t
, 
Æloc_ƒ
, 
z⁄e_t
 * 
i_z⁄e
)

390 
i
;

391 
Êag_no_z⁄e
 = 0;

392 
ƒ_£˘
 = 
Æloc_°¨t
 + 
Æloc_ƒ
;

394 i‡(
Æloc_°¨t
 < 
NR_DIRECT_ZONE
) {

396 
Êag_dúe˘_z⁄e
 = 1;

399 
dúe˘_Æloc_ƒ
 = 
Æloc_ƒ
;

400 i‡(
ƒ_£˘
 > 
NR_DIRECT_ZONE
) {

402 
Êag_dúe˘_z⁄e
 = 0;

403 
dúe˘_Æloc_ƒ
 = 
NR_DIRECT_ZONE
 - 
Æloc_°¨t
;

404 
Æloc_ƒ
 -
dúe˘_Æloc_ƒ
;

406 
i
 = 0; i < 
dúe˘_Æloc_ƒ
; i++) {

407 i‡(
NO_ZONE
 =
i_z⁄e
[
Æloc_°¨t
 + 
i
]) {

408 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
Æloc_°¨t
 + 
i
]);

411 i‡(
Êag_dúe˘_z⁄e
) {

412  
ƒ_£˘
 - 
Æloc_°¨t
;

417 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

419 i‡(
Æloc_°¨t
 < 
NR_SECOND_LEVEL_ZONE
) {

420 
£c⁄d_Àvñ_°¨t
 = 
NR_DIRECT_ZONE
;

421 i‡(
Æloc_°¨t
 > 
£c⁄d_Àvñ_°¨t
) {

422 
£c⁄d_Àvñ_°¨t
 = 
Æloc_°¨t
;

426 
Êag_£c⁄d_Àvñ
 = 1;

427 
£c⁄d_Æloc_ƒ
 = 
Æloc_ƒ
;

428 i‡(
ƒ_£˘
 > 
NR_SECOND_LEVEL_ZONE
) {

430 
Êag_£c⁄d_Àvñ
 = 0;

431 
£c⁄d_Æloc_ƒ
 = 
NR_SECOND_LEVEL_ZONE
 - 
£c⁄d_Àvñ_°¨t
;

432 
Æloc_ƒ
 -
£c⁄d_Æloc_ƒ
;

436 
£c⁄d_Àvñ_°¨t
 -
NR_DIRECT_ZONE
;

439 
Êag_no_z⁄e
 = 0;

440 i‡(
NO_ZONE
 =
i_z⁄e
[
SECOND_LEVEL_ZONE
]) {

442 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

443 
Êag_no_z⁄e
 = 1;

446 
	`RD_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

447 
	`mem˝y
((*)
£˘‹s
,

448 (*)
fsbuf
,

449 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

451 i‡(
Êag_no_z⁄e
) {

452 
i
 = 0; i < 
NR_SECT_PER_SECOND_LEVEL_ZONE
; i++) {

453 
£˘‹s
[
i
] = 
NO_ZONE
;

457 
i
 = 0; i < 
£c⁄d_Æloc_ƒ
; i++) {

458 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]) {

459 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_°¨t
 + 
i
]);

464 
	`mem˝y
((*)
fsbuf
,

465 (*)
£˘‹s
,

466 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

467 
	`WR_SECT
(
dev
, 
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

470 i‡(
Êag_£c⁄d_Àvñ
) {

471  
ƒ_£˘
 - 
Æloc_°¨t
;

475 i‡(
Æloc_°¨t
 < 
NR_THIRD_LEVEL_ZONE
) {

477 
thúd_Àvñ_°¨t
 = 
NR_SECOND_LEVEL_ZONE
;

478 i‡(
Æloc_°¨t
 > 
thúd_Àvñ_°¨t
) {

479 
thúd_Àvñ_°¨t
 = 
Æloc_°¨t
;

482 
Êag_thúd_Àvñ
 = 1;

483 
thúd_Æloc_ƒ
 = 
Æloc_ƒ
;

484 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

486 
Êag_thúd_Àvñ
 = 0;

487 
thúd_Æloc_ƒ
 = 
NR_THIRD_LEVEL_ZONE
 - 
thúd_Àvñ_°¨t
;

488 
Æloc_ƒ
 -
thúd_Æloc_ƒ
;

492 
thúd_Àvñ_°¨t
 -
NR_SECOND_LEVEL_ZONE
;

495 
Êag_no_z⁄e
 = 0;

496 i‡(
NO_ZONE
 =
i_z⁄e
[
THIRD_LEVEL_ZONE
]) {

498 
	`Æloc_£˘
(
dev
, &
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

499 
Êag_no_z⁄e
 = 1;

502 
	`RD_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

503 
	`mem˝y
((*)
£˘‹s
,

504 (*)
fsbuf
,

505 
NR_ZONE_PER_SECT
 * () );

507 i‡(
Êag_no_z⁄e
) {

508 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

509 
£˘‹s
[
i
] = 
NO_ZONE
;

513 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
NO_ZONE
;

514 
z⁄e_t
 
cuºít_z⁄es
[
NR_ZONE_PER_SECT
];

515 
i
 = 0; i < 
thúd_Æloc_ƒ
; i++) {

516 
£c⁄d_Àvñ_ödex
 =

517 (
thúd_Àvñ_°¨t
 + 
i
) /

518 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

519 
thúd_Àvñ_ödex
 =

520 (
thúd_Àvñ_°¨t
 + 
i
) %

521 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

523 i‡(
NO_ZONE
 =
cuºít_£c⁄d_Àvñ_z⁄e


524 || 
cuºít_£c⁄d_Àvñ_z⁄e
 !
£c⁄d_Àvñ_ödex
){

526 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

529 
	`mem˝y
((*)
fsbuf
,

530 (*)
cuºít_z⁄es
,

531 
NR_ZONE_PER_SECT
 * () );

532 
	`WR_SECT
(
dev
, 
cuºít_£c⁄d_Àvñ_z⁄e
);

536 
Êag_no_z⁄e
 = 0;

537 i‡(
NO_ZONE
 =
£˘‹s
[
£c⁄d_Àvñ_ödex
]) {

538 
Êag_no_z⁄e
 = 1;

539 
	`Æloc_£˘
(
dev
, &
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

541 
cuºít_£c⁄d_Àvñ_z⁄e
 = 
£˘‹s
[
£c⁄d_Àvñ_ödex
];

543 
	`RD_SECT
(
dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

544 
	`mem˝y
((*)
cuºít_z⁄es
,

545 (*)
fsbuf
,

546 
NR_ZONE_PER_SECT
 * () );

549 i‡(
Êag_no_z⁄e
) {

550 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++) {

551 
cuºít_z⁄es
[
i
] = 
NO_ZONE
;

555 i‡(
NO_ZONE
 =
cuºít_z⁄es
[
thúd_Àvñ_ödex
]) {

556 
	`Æloc_£˘
(
dev
, &
cuºít_z⁄es
[
thúd_Àvñ_ödex
]);

561 i‡(
NO_ZONE
 !
cuºít_£c⁄d_Àvñ_z⁄e
) {

564 
	`mem˝y
((*)
fsbuf
,

565 (*)
cuºít_z⁄es
,

566 
NR_ZONE_PER_SECT
 * () );

567 
	`WR_SECT
(
dev
, 
cuºít_£c⁄d_Àvñ_z⁄e
);

571 
	`mem˝y
((*)
fsbuf
,

572 (*)
£˘‹s
,

573 
NR_ZONE_PER_SECT
 * () );

574 
	`WR_SECT
(
dev
, 
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

577 i‡(
Êag_thúd_Àvñ
) {

578  
ƒ_£˘
 - 
Æloc_°¨t
;

583 i‡(
ƒ_£˘
 > 
NR_THIRD_LEVEL_ZONE
) {

585 
	`∑nic
("file isÅooÜarge");

589 
	}
}

603 
PRIVATE
 
	$Æloc_bô
(
dev
)

605 
i
;

606 
j
;

607 
k
;

609 
su≥r_block
 * 
sb
 = 
	`gë_su≥r_block
(
dev
);

611 
sm≠_blk0_ƒ
 = 1 + 1 + 
sb
->
ƒ_im≠_£˘s
;

612 
Êag_bô_Æloc
 = 0;

613 
bô_Æloc
 = 0;

614 
i
 = 0; i < 
sb
->
ƒ_sm≠_£˘s
; i++) {

616 
	`RD_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

619 
j
 = 0; j < 
SECTOR_SIZE
 ; j++) {

621 i‡(
fsbuf
[
j
] != 0xFF) {

622 
k
 = 0;

623 ; ((
fsbuf
[
j
] >> 
k
) & 1) != 0; k++) {}

625 
	`as£π
(((
fsbuf
[
j
] >> 
k
) & 1) == 0);

626 
fsbuf
[
j
] |(1 << 
k
);

627 
Êag_bô_Æloc
 = 1;

629 
bô_Æloc
 = 
i
 * 
SECTOR_SIZE
 * 8

630 + 
j
 * 8

631 + 
k
 - 1

632 + 
sb
->
n_1°_£˘
;

637 i‡(
Êag_bô_Æloc
) {

639 
	`WR_SECT
(
dev
, 
sm≠_blk0_ƒ
 + 
i
);

644 
	`as£π
(
Êag_bô_Æloc
 == 1);

646  
bô_Æloc
;

647 
	}
}

655 
PUBLIC
 

656 
	$Æloc_z⁄e_f‹_cmd_èr
 (
öode
 * 
pö
, 
°¨t
, 
ƒ
)

658 
i
, 
j
;

659 
cuºít_£˘
 = 
°¨t
;

660 
Êag_no_z⁄e
;

661 
z⁄e_t
 
£˘‹s
[
NR_ZONE_PER_SECT
];

662 
z⁄e_t
 
cuº_£˘‹s
[
NR_ZONE_PER_SECT
];

665 
i
 = 0; i < 
NR_DIRECT_ZONE
; i++, 
cuºít_£˘
++) {

666 
pö
->
i_z⁄e
[
i
] = 
cuºít_£˘
;

670 
Êag_no_z⁄e
 = 0;

671 i‡(
NO_ZONE
 =
pö
->
i_z⁄e
[
SECOND_LEVEL_ZONE
]) {

672 
	`Æloc_£˘
(
pö
->
i_dev
, &’ö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]));

673 
Êag_no_z⁄e
 = 1;

676 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

677 
	`mem˝y
((*)
£˘‹s
,

678 (*)
fsbuf
,

679 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

681 i‡(
Êag_no_z⁄e
) {

682 
i
 = 0; i < 
NR_SECT_PER_SECOND_LEVEL_ZONE
; i++) {

683 
£˘‹s
[
i
] = 
NO_ZONE
;

687 
i
 = 0; i < 
NR_ZONE_PER_SECT
; i++, 
cuºít_£˘
++) {

688 
£˘‹s
[
i
] = 
cuºít_£˘
;

692 
	`mem˝y
((*)
fsbuf
,

693 (*)
£˘‹s
,

694 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

695 
	`WR_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
SECOND_LEVEL_ZONE
]);

697 
ƒ
 =Ç∏- 
NR_DIRECT_ZONE
 - 
NR_ZONE_PER_SECT
;

700 
Êag_no_z⁄e
 = 0;

701 i‡(
NO_ZONE
 =
pö
->
i_z⁄e
[
THIRD_LEVEL_ZONE
]) {

702 
	`Æloc_£˘
(
pö
->
i_dev
, &’ö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]));

703 
Êag_no_z⁄e
 = 1;

706 
	`RD_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

707 
	`mem˝y
((*)
£˘‹s
,

708 (*)
fsbuf
,

709 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

711 i‡(
Êag_no_z⁄e
) {

712 
i
 = 0; i < 
NR_SECT_PER_SECOND_LEVEL_ZONE
; i++) {

713 
£˘‹s
[
i
] = 
NO_ZONE
;

717 
i
 = 0; i < 
ƒ
; i++, 
cuºít_£˘
++) {

718 
£c⁄d_Àvñ_ödex
 = 
i
 / 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

719 
thúd_Àvñ_ödex
 = 
i
 % 
NR_SECT_PER_SECOND_LEVEL_ZONE
;

720 i‡(0 =
thúd_Àvñ_ödex
 ) {

721 i‡(0 !
£c⁄d_Àvñ_ödex
) {

722 
	`mem˝y
((*)
fsbuf
,

723 (*)
cuº_£˘‹s
,

724 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

725 
	`WR_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
 - 1]);

728 
	`Æloc_£˘
(
pö
->
i_dev
, &
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

729 
	`RD_SECT
(
pö
->
i_dev
, 
£˘‹s
[
£c⁄d_Àvñ_ödex
]);

730 
	`mem˝y
((*)
cuº_£˘‹s
,

731 (*)
fsbuf
,

732 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

733 
j
 = 0; j < 
NR_ZONE_PER_SECT
; j++) {

734 
cuº_£˘‹s
[
j
] = 
NO_ZONE
;

737 
cuº_£˘‹s
[
thúd_Àvñ_ödex
] = 
cuºít_£˘
;

740 i‡(0 !
i
 % 
NR_SECT_PER_SECOND_LEVEL_ZONE
) {

741 
	`mem˝y
((*)
fsbuf
,

742 (*)
cuº_£˘‹s
,

743 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

744 
	`WR_SECT
(
pö
->
i_dev
, 
£˘‹s
[
i
 / 
NR_SECT_PER_SECOND_LEVEL_ZONE
]);

748 
	`mem˝y
((*)
fsbuf
,

749 (*)
£˘‹s
,

750 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * () );

751 
	`WR_SECT
(
pö
->
i_dev
,Öö->
i_z⁄e
[
THIRD_LEVEL_ZONE
]);

752 
	}
}

	@include/dirent.h

19 #i‚de‡
_2Y_OS_DIRENT_H


20 
	#_2Y_OS_DIRENT_H
 1

	)

22 
	~"sys/c⁄°.h
"

25 
	töo_t
;

26 
	toff_t
;

33 
	#MAX_FILENAME_LEN
 12

	)

40 
	sdúít
 {

41 
öo_t
 
	md_öo
;

42 
	md_«me
[
MAX_FILENAME_LEN
];

51 
	#DIRENT_SIZE
 (
dúít
)

	)

59 
	#DIR_PER_SECT
 (
SECTOR_SIZE
 / 
DIRENT_SIZE
)

	)

69 
	m_fd
;

70 
	m_cou¡
;

71 
	m_pos
;

72 
dúít
 * 
	m_±r
;

73 
dúít
 
	m_buf
[
DIR_PER_SECT
];

74 } 
	tDIR
;

77 
DIR
 *
›ídú
(c⁄° * 
__d_«me
);

80 
dúít
 *
ªaddú
(
DIR
 * 
__dúp
);

83 
˛o£dú
(
DIR
 * 
__dúp
);

86 
ªwöddú
(
DIR
 * 
__dúp
);

89 
£ekdú
(
DIR
 * 
__dúp
, 
off_t
 
__pos
);

	@include/stdio.h

10 #i‚def 
_ORANGES_STDIO_H_


11 
	#_ORANGES_STDIO_H_


	)

13 
	~"ty≥.h
"

16 
	#ASSERT


	)

17 #ifde‡
ASSERT


18 
as£πi⁄_Áûuª
(*
exp
, *
fûe
, *
ba£_fûe
, 
löe
);

19 
	#as£π
(
exp
) if (exp) ; \

20 
	`as£πi⁄_Áûuª
(#exp, 
__FILE__
, 
__BASE_FILE__
, 
__LINE__
)

	)

22 
	#as£π
(
exp
)

	)

26 
	#EXTERN
 

	)

29 
	#STR_DEFAULT_LEN
 1024

	)

31 
	#O_CREAT
 1

	)

32 
	#O_RDWR
 2

	)

33 
	#O_TRUNC
 4

	)

35 
	#SEEK_SET
 1

	)

36 
	#SEEK_CUR
 2

	)

37 
	#SEEK_END
 3

	)

39 
	#MAX_PATH
 128

	)

45 
	s°©
 {

46 
°_dev
;

47 
°_öo
;

48 
°_mode
;

49 
°_rdev
;

50 
°_size
;

57 
	stime
 {

58 
u32
 
	myór
;

59 
u32
 
	mm⁄th
;

60 
u32
 
	mday
;

61 
u32
 
	mhour
;

62 
u32
 
	mmöuã
;

63 
u32
 
	m£c⁄d
;

66 
	#BCD_TO_DEC
(
x
Ë–(x >> 4Ë* 10 + (x & 0x0fË)

	)

97 
PUBLIC
 
¥ötf
(c⁄° *
fmt
, ...);

98 
PUBLIC
 
¥öé
(c⁄° *
fmt
, ...);

101 
PUBLIC
 
v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

102 
PUBLIC
 
•rötf
(*
buf
, c⁄° *
fmt
, ...);

108 #ifde‡
ENABLE_DISK_LOG


109 
	#SYSLOG
 
sy¶og


	)

113 
PUBLIC
 
›í
 (c⁄° *
∑th«me
, 
Êags
);

116 
PUBLIC
 
˛o£
 (
fd
);

119 
PUBLIC
 
ªad
 (
fd
, *
buf
, 
cou¡
);

122 
PUBLIC
 
wrôe
 (
fd
, c⁄° *
buf
, 
cou¡
);

125 
PUBLIC
 
l£ek
 (
fd
, 
off£t
, 
whí˚
);

128 
PUBLIC
 
u∆ök
 (c⁄° *
∑th«me
);

131 
PUBLIC
 
gëpid
 ();

134 
PUBLIC
 
f‹k
 ();

137 
PUBLIC
 
exô
 (
°©us
);

140 
PUBLIC
 
waô
 (* 
°©us
);

143 
PUBLIC
 
exec
 (c⁄° * 
∑th
);

144 
PUBLIC
 
exe˛
 (c⁄° * 
∑th
, c⁄° *
¨g
, ...);

145 
PUBLIC
 
execv
 (c⁄° * 
∑th
, * 
¨gv
[]);

148 
PUBLIC
 
°©
 (c⁄° *
∑th
, °© *
buf
);

149 
PUBLIC
 
mkdú
 (c⁄° *
∑th«me
, 
mode
);

152 
PUBLIC
 
sy¶og
 (c⁄° *
fmt
, ...);

155 
PUBLIC
 
ls
 ();

156 
PUBLIC
 
dúe˘_ªad
 ();

	@include/stdlib.h

19 #i‚def 
_2Y_OS_STDLIB_H_


20 
	#_2Y_OS_STDLIB_H_


	)

22 #i‚def 
NULL


23 
	#NULL
 ((*Ë0)

	)

26 #i‚de‡
_SIZE_T


27 
	#_SIZE_T


	)

28 
	tsize_t
;

31 * 
mÆloc
(
size_t
 
_size
);

32 
‰ì
(* 
addr
);

	@include/string.h

8 
PUBLIC
 * 
mem˝y
(* 
p_d°
, * 
p_§c
, 
size
);

9 
PUBLIC
 
mem£t
(* 
p_d°
, 
ch
, 
size
);

10 
PUBLIC
 
°æí
(c⁄° * 
p_°r
);

11 
PUBLIC
 
memcmp
(c⁄° * 
s1
, c⁄° *
s2
, 
n
);

12 
PUBLIC
 
°rcmp
(c⁄° * 
s1
, c⁄° *
s2
);

13 
PUBLIC
 * 
°rˇt
(* 
s1
, c⁄° *
s2
);

21 
	#phys_c›y
 
mem˝y


	)

22 
	#phys_£t
 
mem£t


	)

	@include/sys/config.h

17 
	#INSTALL_START_SECT
 0x8000

	)

18 
	#INSTALL_NR_SECTS
 0x1000

	)

25 
	#BOOT_PARAM_ADDR
 0x900

	)

26 
	#BOOT_PARAM_MAGIC
 0xB007

	)

27 
	#BI_MAG
 0

	)

28 
	#BI_MEM_SIZE
 1

	)

29 
	#BI_KERNEL_FILE
 2

	)

35 
	#MINOR_BOOT
 
MINOR_hd2a


	)

41 
	#SET_LOG_SECT_SMAP_AT_STARTUP


	)

42 
	#MEMSET_LOG_SECTS


	)

43 
	#NR_SECTS_FOR_LOG
 
NR_DEFAULT_FILE_SECTS


	)

	@include/sys/console.h

8 #i‚de‡
_ORANGES_CONSOLE_H_


9 
	#_ORANGES_CONSOLE_H_


	)

12 
	ss_c⁄sﬁe


14 
	m¸tc_°¨t
;

15 
	m‹ig
;

16 
	mc⁄_size
;

17 
	mcurs‹
;

18 
	mis_fuŒ
;

19 }
	tCONSOLE
;

22 
	#SCR_UP
 1

	)

23 
	#SCR_DN
 -1

	)

25 
	#SCR_SIZE
 (80 * 25)

	)

26 
	#SCR_WIDTH
 80

	)

28 
	#DEFAULT_CHAR_COLOR
 (
	`MAKE_COLOR
(
BLACK
, 
WHITE
))

	)

29 
	#GRAY_CHAR
 (
	`MAKE_COLOR
(
BLACK
, BLACKË| 
BRIGHT
)

	)

30 
	#RED_CHAR
 (
	`MAKE_COLOR
(
BLUE
, 
RED
Ë| 
BRIGHT
)

	)

	@include/sys/const.h

8 #i‚def 
_ORANGES_CONST_H_


9 
	#_ORANGES_CONST_H_


	)

12 #i‚de‡
NULL


13 
	#NULL
 ((*Ë0)

	)

17 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

18 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

26 
	#BLACK
 0x0

	)

27 
	#WHITE
 0x7

	)

28 
	#RED
 0x4

	)

29 
	#GREEN
 0x2

	)

30 
	#BLUE
 0x1

	)

31 
	#FLASH
 0x80

	)

32 
	#BRIGHT
 0x08

	)

33 
	#MAKE_COLOR
(
x
,
y
Ë((x<<4Ë| yË

	)

36 
	#GDT_SIZE
 128

	)

37 
	#IDT_SIZE
 256

	)

40 
	#PRIVILEGE_KRNL
 0

	)

41 
	#PRIVILEGE_TASK
 1

	)

42 
	#PRIVILEGE_USER
 3

	)

44 
	#RPL_KRNL
 
SA_RPL0


	)

45 
	#RPL_TASK
 
SA_RPL1


	)

46 
	#RPL_USER
 
SA_RPL3


	)

49 
	#SENDING
 0x02

	)

50 
	#RECEIVING
 0x04

	)

51 
	#WAITING
 0x08

	)

52 
	#HANGING
 0x10

	)

53 
	#FREE_SLOT
 0x20

	)

58 
	#NR_CONSOLES
 3

	)

61 
	#INT_M_CTL
 0x20

	)

62 
	#INT_M_CTLMASK
 0x21

	)

63 
	#INT_S_CTL
 0xA0

	)

64 
	#INT_S_CTLMASK
 0xA1

	)

67 
	#TIMER0
 0x40

	)

68 
	#TIMER_MODE
 0x43

	)

69 
	#RATE_GENERATOR
 0x34

	)

72 
	#TIMER_FREQ
 1193182L

	)

73 
	#HZ
 100

	)

77 
	#KB_DATA
 0x60

	)

80 
	#KB_CMD
 0x64

	)

83 
	#LED_CODE
 0xED

	)

84 
	#KB_ACK
 0xFA

	)

87 
	#CRTC_ADDR_REG
 0x3D4

	)

88 
	#CRTC_DATA_REG
 0x3D5

	)

89 
	#START_ADDR_H
 0xC

	)

90 
	#START_ADDR_L
 0xD

	)

91 
	#CURSOR_H
 0xE

	)

92 
	#CURSOR_L
 0xF

	)

93 
	#V_MEM_BASE
 0xB8000

	)

94 
	#V_MEM_SIZE
 0x8000

	)

97 
	#CLK_ELE
 0x70

	)

103 
	#CLK_IO
 0x71

	)

105 
	#YEAR
 9

	)

106 
	#MONTH
 8

	)

107 
	#DAY
 7

	)

108 
	#HOUR
 4

	)

109 
	#MINUTE
 2

	)

110 
	#SECOND
 0

	)

111 
	#CLK_STATUS
 0x0B

	)

112 
	#CLK_HEALTH
 0x0E

	)

124 
	#NR_IRQ
 16

	)

125 
	#CLOCK_IRQ
 0

	)

126 
	#KEYBOARD_IRQ
 1

	)

127 
	#CASCADE_IRQ
 2

	)

128 
	#ETHER_IRQ
 3

	)

129 
	#SECONDARY_IRQ
 3

	)

130 
	#RS232_IRQ
 4

	)

131 
	#XT_WINI_IRQ
 5

	)

132 
	#FLOPPY_IRQ
 6

	)

133 
	#PRINTER_IRQ
 7

	)

134 
	#AT_WINI_IRQ
 14

	)

138 
	#INVALID_DRIVER
 -20

	)

139 
	#INTERRUPT
 -10

	)

140 
	#TASK_TTY
 0

	)

141 
	#TASK_SYS
 1

	)

142 
	#TASK_HD
 2

	)

143 
	#TASK_FS
 3

	)

144 
	#TASK_MM
 4

	)

145 
	#INIT
 5

	)

146 
	#ANY
 (
NR_TASKS
 + 
NR_PROCS
 + 10)

	)

147 
	#NO_TASK
 (
NR_TASKS
 + 
NR_PROCS
 + 20)

	)

149 
	#MAX_TICKS
 0x7FFFABCD

	)

152 
	#NR_SYS_CALL
 3

	)

155 
	#SEND
 1

	)

156 
	#RECEIVE
 2

	)

157 
	#BOTH
 3

	)

160 
	#MAG_CH_PANIC
 '\002'

	)

161 
	#MAG_CH_ASSERT
 '\003'

	)

167 
	emsgty≥
 {

172 
	mHARD_INT
 = 1,

175 
	mGET_TICKS
, 
	mGET_PID
, 
	mGET_RTC_TIME
,

178 
	mMKDIR
, 
	mOPEN
, 
	mCLOSE
, 
	mREAD
, 
	mWRITE
, 
	mLSEEK
, 
	mSTAT
, 
	mUNLINK
,

181 
	mSUSPEND_PROC
, 
	mRESUME_PROC
,

184 
	mEXEC
, 
	mWAIT
, 
	mCHDIR
, 
	mBRK
,

187 
	mFORK
, 
	mEXIT
,

190 
	mSYSCALL_RET
,

193 
	mDEV_OPEN
 = 1001,

194 
	mDEV_CLOSE
,

195 
	mDEV_READ
,

196 
	mDEV_WRITE
,

197 
	mDEV_IOCTL


201 
	#FD
 
u
.
m3
.
m3i1


	)

202 
	#BRK_ADDR
 
u
.
m3
.
m3p1


	)

203 
	#PATHNAME
 
u
.
m3
.
m3p1


	)

204 
	#PATH
 
u
.
m3
.
m3p2


	)

205 
	#FLAGS
 
u
.
m3
.
m3i1


	)

206 
	#NAME_LEN
 
u
.
m3
.
m3i2


	)

207 
	#BUF_LEN
 
u
.
m3
.
m3i3


	)

208 
	#CNT
 
u
.
m3
.
m3i2


	)

209 
	#REQUEST
 
u
.
m3
.
m3i2


	)

210 
	#PROC_NR
 
u
.
m3
.
m3i3


	)

211 
	#DEVICE
 
u
.
m3
.
m3i4


	)

212 
	#POSITION
 
u
.
m3
.
m3l1


	)

213 
	#BUF
 
u
.
m3
.
m3p2


	)

214 
	#OFFSET
 
u
.
m3
.
m3i2


	)

215 
	#WHENCE
 
u
.
m3
.
m3i3


	)

217 
	#PID
 
u
.
m3
.
m3i2


	)

218 
	#RETVAL
 
u
.
m3
.
m3i1


	)

219 
	#STATUS
 
u
.
m3
.
m3i1


	)

229 
	#DIOCTL_GET_GEO
 1

	)

232 
	#INVALID_SECTOR
 -1

	)

233 
	#SECTOR_SIZE
 512

	)

234 
	#SECTOR_BITS
 (
SECTOR_SIZE
 * 8)

	)

235 
	#SECTOR_SIZE_SHIFT
 9

	)

238 
	#NO_DEV
 0

	)

239 
	#DEV_FLOPPY
 1

	)

240 
	#DEV_CDROM
 2

	)

241 
	#DEV_HD
 3

	)

242 
	#DEV_CHAR_TTY
 4

	)

243 
	#DEV_SCSI
 5

	)

245 
	#MAJOR_SHIFT
 8

	)

246 
	#MAKE_DEV
(
a
,
b
Ë(◊ << 
MAJOR_SHIFT
Ë| b)

	)

248 
	#MAJOR
(
x
Ë((x >> 
MAJOR_SHIFT
Ë& 0xFF)

	)

249 
	#MINOR
(
x
Ë(x & 0xFF)

	)

251 
	#INVALID_INODE
 0

	)

252 
	#ROOT_INODE
 1

	)

254 
	#MAX_DRIVES
 2

	)

255 
	#NR_PART_PER_DRIVE
 4

	)

256 
	#NR_SUB_PER_PART
 16

	)

257 
	#NR_SUB_PER_DRIVE
 (
NR_SUB_PER_PART
 * 
NR_PART_PER_DRIVE
)

	)

258 
	#NR_PRIM_PER_DRIVE
 (
NR_PART_PER_DRIVE
 + 1)

	)

266 
	#MAX_PRIM
 (
MAX_DRIVES
 * 
NR_PRIM_PER_DRIVE
 - 1)

	)

268 
	#MAX_SUBPARTITIONS
 (
NR_SUB_PER_DRIVE
 * 
MAX_DRIVES
)

	)

271 
	#MINOR_hd1a
 0x10

	)

272 
	#MINOR_hd2a
 (
MINOR_hd1a
+
NR_SUB_PER_PART
)

	)

274 
	#ROOT_DEV
 
	`MAKE_DEV
(
DEV_HD
, 
MINOR_BOOT
)

	)

276 
	#P_PRIMARY
 0

	)

277 
	#P_EXTENDED
 1

	)

279 
	#ORANGES_PART
 0x99

	)

280 
	#NO_PART
 0x00

	)

281 
	#EXT_PART
 0x05

	)

283 
	#NR_FILES
 64

	)

284 
	#NR_FILE_DESC
 64

	)

285 
	#NR_INODE
 64

	)

286 
	#NR_SUPER_BLOCK
 8

	)

290 
	#I_TYPE_MASK
 0170000

	)

291 
	#I_REGULAR
 0100000

	)

292 
	#I_BLOCK_SPECIAL
 0060000

	)

293 
	#I_DIRECTORY
 0040000

	)

294 
	#I_CHAR_SPECIAL
 0020000

	)

295 
	#I_NAMED_PIPE
 0010000

	)

297 
	#is_•ecül
(
m
Ë((((mË& 
I_TYPE_MASK
Ë=
I_BLOCK_SPECIAL
) || \

298 (((
m
Ë& 
I_TYPE_MASK
Ë=
I_CHAR_SPECIAL
))

	)

300 
	#NR_DEFAULT_FILE_SECTS
 2048

	)

	@include/sys/fs.h

10 #i‚def 
_ORANGES_FS_H_


11 
	#_ORANGES_FS_H_


	)

17 
	sdev_drv_m≠
 {

18 
	mdrivî_ƒ
;

25 
	#MAGIC_V1
 0x111

	)

33 
	ssu≥r_block
 {

34 
u32
 
	mmagic
;

35 
u32
 
	mƒ_öodes
;

36 
u32
 
	mƒ_£˘s
;

37 
u32
 
	mƒ_im≠_£˘s
;

38 
u32
 
	mƒ_sm≠_£˘s
;

39 
u32
 
	mn_1°_£˘
;

40 
u32
 
	mƒ_öode_£˘s
;

41 
u32
 
	mroŸ_öode
;

42 
u32
 
	möode_size
;

43 
u32
 
	möode_isize_off
;

44 
u32
 
	möode_z⁄e_off
;

45 
u32
 
	mdú_ít_size
;

46 
u32
 
	mdú_ít_öode_off
;

47 
u32
 
	mdú_ít_‚ame_off
;

52 
	msb_dev
;

62 
	#SUPER_BLOCK_SIZE
 56

	)

75 
	söode
 {

76 
u32
 
	mi_mode
;

77 
u32
 
	mi_size
;

79 
u32
 
	mi_ƒ_£˘s
;

80 
z⁄e_t
 
	mi_z⁄e
[10];

84 
	mi_dev
;

85 
	mi_˙t
;

86 
	mi_num
;

96 
	#INODE_SIZE
 (
öode
)

	)

103 
	#NR_BYTE_PER_SECTOR_IN_ZONE
 ((
z⁄e_t
))

	)

110 
	#NR_ZONE_PER_SECT
 ((
SECTOR_SIZE
Ë/ (
NR_BYTE_PER_SECTOR_IN_ZONE
))

	)

117 
	#NR_SECT_PER_SECOND_LEVEL_ZONE
 
NR_ZONE_PER_SECT


	)

124 
	#NO_ZONE
 0

	)

131 
	#DEV_ZONE
 0

	)

138 
	#NR_DIRECT_ZONE
 8

	)

145 
	#SECOND_LEVEL_ZONE
 8

	)

152 
	#NR_SECOND_LEVEL_ZONE
 (
NR_DIRECT_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
)

	)

159 
	#THIRD_LEVEL_ZONE
 9

	)

167 
	#NR_ZONE_PER_INODE
 (
THIRD_LEVEL_ZONE
 + 1)

	)

174 
	#NR_THIRD_LEVEL_ZONE
 (
NR_SECOND_LEVEL_ZONE
 + 
NR_SECT_PER_SECOND_LEVEL_ZONE
 * NR_SECT_PER_SECOND_LEVEL_ZONE)

	)

180 
	sfûe_desc
 {

181 
	mfd_mode
;

182 
	mfd_pos
;

183 
	mfd_˙t
;

184 
öode
* 
	mfd_öode
;

192 
	#RD_SECT
(
dev
,
£˘_ƒ
Ë
	`rw_£˘‹
(
DEV_READ
, \

193 
dev
, \

194 (
£˘_ƒ
Ë* 
SECTOR_SIZE
, \

195 
SECTOR_SIZE
, \

196 
TASK_FS
, \

197 
fsbuf
);

	)

198 
	#WR_SECT
(
dev
,
£˘_ƒ
Ë
	`rw_£˘‹
(
DEV_WRITE
, \

199 
dev
, \

200 (
£˘_ƒ
Ë* 
SECTOR_SIZE
, \

201 
SECTOR_SIZE
, \

202 
TASK_FS
, \

203 
fsbuf
);

	)

	@include/sys/global.h

9 #ifdef 
GLOBAL_VARIABLES_HERE


10 #unde‡
EXTERN


11 
	#EXTERN


	)

14 
EXTERN
 
	gticks
;

16 
EXTERN
 
	gdi•_pos
;

18 
EXTERN
 
u8
 
	ggdt_±r
[6];

19 
EXTERN
 
des¸ùt‹
 
	ggdt
[
GDT_SIZE
];

20 
EXTERN
 
u8
 
	gidt_±r
[6];

21 
EXTERN
 
g©e
 
	gidt
[
IDT_SIZE
];

23 
EXTERN
 
u32
 
	gk_ªíãr
;

24 
EXTERN
 
	gcuºít_c⁄sﬁe
;

26 
EXTERN
 
	gkey_¥es£d
;

32 
EXTERN
 
tss
 
	gtss
;

33 
EXTERN
 
¥oc
* 
	gp_¥oc_ªady
;

35 
èsk_°ack
[];

36 
¥oc
 
¥oc_èbÀ
[];

37 
èsk
 
èsk_èbÀ
[];

38 
èsk
 
u£r_¥oc_èbÀ
[];

39 
úq_h™dÀr
 
úq_èbÀ
[];

40 
TTY
 
ây_èbÀ
[];

41 
CONSOLE
 
c⁄sﬁe_èbÀ
[];

42 
∑ge_èbÀ
[];

45 
EXTERN
 
MESSAGE
 
	gmm_msg
;

46 
u8
 * 
mmbuf
;

47 c⁄° 
MMBUF_SIZE
;

48 
EXTERN
 
	gmem‹y_size
;

49 
EXTERN
 
	gmm_‰ì_mem
;

50 
EXTERN
 
	gƒ_∑ge
;

53 
EXTERN
 
fûe_desc
 
	gf_desc_èbÀ
[
NR_FILE_DESC
];

54 
EXTERN
 
öode
 
	göode_èbÀ
[
NR_INODE
];

55 
EXTERN
 
su≥r_block
 
	gsu≥r_block
[
NR_SUPER_BLOCK
];

56 
u8
 * 
fsbuf
;

57 c⁄° 
FSBUF_SIZE
;

58 
EXTERN
 
MESSAGE
 
	gfs_msg
;

59 
EXTERN
 
¥oc
 * 
	gpˇŒî
;

60 
EXTERN
 
öode
 * 
	groŸ_öode
;

61 
dev_drv_m≠
 
dd_m≠
[];

64 * 
logbuf
;

65 c⁄° 
LOGBUF_SIZE
;

66 * 
logdiskbuf
;

67 c⁄° 
LOGDISKBUF_SIZE
;

	@include/sys/hd.h

10 #i‚def 
_ORANGES_HD_H_


11 
	#_ORANGES_HD_H_


	)

31 
	s∑π_ít
 {

32 
u8
 
	mboŸ_öd
;

42 
u8
 
	m°¨t_hód
;

46 
u8
 
	m°¨t_£˘‹
;

53 
u8
 
	m°¨t_cyl
;

61 
u8
 
	msys_id
;

69 
u8
 
	míd_hód
;

73 
u8
 
	míd_£˘‹
;

80 
u8
 
	míd_cyl
;

88 
u32
 
	m°¨t_£˘
;

93 
u32
 
	mƒ_£˘s
;

97 } 
	gPARTITION_ENTRY
;

108 
	#REG_DATA
 0x1F0

	)

109 
	#REG_FEATURES
 0x1F1

	)

110 
	#REG_ERROR
 
REG_FEATURES


	)

130 
	#REG_NSECTOR
 0x1F2

	)

131 
	#REG_LBA_LOW
 0x1F3

	)

132 
	#REG_LBA_MID
 0x1F4

	)

133 
	#REG_LBA_HIGH
 0x1F5

	)

134 
	#REG_DEVICE
 0x1F6

	)

151 
	#REG_STATUS
 0x1F7

	)

167 
	#STATUS_BSY
 0x80

	)

168 
	#STATUS_DRDY
 0x40

	)

169 
	#STATUS_DFSE
 0x20

	)

170 
	#STATUS_DSC
 0x10

	)

171 
	#STATUS_DRQ
 0x08

	)

172 
	#STATUS_CORR
 0x04

	)

173 
	#STATUS_IDX
 0x02

	)

174 
	#STATUS_ERR
 0x01

	)

176 
	#REG_CMD
 
REG_STATUS


	)

200 
	#REG_DEV_CTRL
 0x3F6

	)

220 
	#REG_ALT_STATUS
 
REG_DEV_CTRL


	)

225 
	#REG_DRV_ADDR
 0x3F7

	)

227 
	#MAX_IO_BYTES
 256

	)

229 
	shd_cmd
 {

230 
u8
 
	m„©uªs
;

231 
u8
 
	mcou¡
;

232 
u8
 
	mlba_low
;

233 
u8
 
	mlba_mid
;

234 
u8
 
	mlba_high
;

235 
u8
 
	mdevi˚
;

236 
u8
 
	mcomm™d
;

239 
	s∑π_öfo
 {

240 
u32
 
	mba£
;

241 
u32
 
	msize
;

245 
	shd_öfo


247 
	m›í_˙t
;

248 
∑π_öfo
 
	m¥im¨y
[
NR_PRIM_PER_DRIVE
];

249 
∑π_öfo
 
	mlogiˇl
[
NR_SUB_PER_DRIVE
];

256 
	#HD_TIMEOUT
 10000

	)

257 
	#PARTITION_TABLE_OFFSET
 0x1BE

	)

258 
	#ATA_IDENTIFY
 0xEC

	)

259 
	#ATA_READ
 0x20

	)

260 
	#ATA_WRITE
 0x30

	)

262 
	#MAKE_DEVICE_REG
(
lba
,
drv
,
lba_highe°
) (((lba) << 6) | \

263 ((
drv
) << 4) | \

264 (
lba_highe°
 & 0xFË| 0xA0)

	)

	@include/sys/keyboard.h

8 #i‚def 
_ORANGES_KEYBOARD_H_


9 
	#_ORANGES_KEYBOARD_H_


	)

15 
	#KB_IN_BYTES
 32

	)

16 
	#MAP_COLS
 3

	)

17 
	#NR_SCAN_CODES
 0x80

	)

19 
	#FLAG_BREAK
 0x0080

	)

20 
	#FLAG_EXT
 0x0100

	)

21 
	#FLAG_SHIFT_L
 0x0200

	)

22 
	#FLAG_SHIFT_R
 0x0400

	)

23 
	#FLAG_CTRL_L
 0x0800

	)

24 
	#FLAG_CTRL_R
 0x1000

	)

25 
	#FLAG_ALT_L
 0x2000

	)

26 
	#FLAG_ALT_R
 0x4000

	)

27 
	#FLAG_PAD
 0x8000

	)

29 
	#MASK_RAW
 0x01FF

	)

34 
	#ESC
 (0x01 + 
FLAG_EXT
Ë

	)

35 
	#TAB
 (0x02 + 
FLAG_EXT
Ë

	)

36 
	#ENTER
 (0x03 + 
FLAG_EXT
Ë

	)

37 
	#BACKSPACE
 (0x04 + 
FLAG_EXT
Ë

	)

39 
	#GUI_L
 (0x05 + 
FLAG_EXT
Ë

	)

40 
	#GUI_R
 (0x06 + 
FLAG_EXT
Ë

	)

41 
	#APPS
 (0x07 + 
FLAG_EXT
Ë

	)

44 
	#SHIFT_L
 (0x08 + 
FLAG_EXT
Ë

	)

45 
	#SHIFT_R
 (0x09 + 
FLAG_EXT
Ë

	)

46 
	#CTRL_L
 (0x0A + 
FLAG_EXT
Ë

	)

47 
	#CTRL_R
 (0x0B + 
FLAG_EXT
Ë

	)

48 
	#ALT_L
 (0x0C + 
FLAG_EXT
Ë

	)

49 
	#ALT_R
 (0x0D + 
FLAG_EXT
Ë

	)

52 
	#CAPS_LOCK
 (0x0E + 
FLAG_EXT
Ë

	)

53 
	#NUM_LOCK
 (0x0F + 
FLAG_EXT
Ë

	)

54 
	#SCROLL_LOCK
 (0x10 + 
FLAG_EXT
Ë

	)

57 
	#F1
 (0x11 + 
FLAG_EXT
Ë

	)

58 
	#F2
 (0x12 + 
FLAG_EXT
Ë

	)

59 
	#F3
 (0x13 + 
FLAG_EXT
Ë

	)

60 
	#F4
 (0x14 + 
FLAG_EXT
Ë

	)

61 
	#F5
 (0x15 + 
FLAG_EXT
Ë

	)

62 
	#F6
 (0x16 + 
FLAG_EXT
Ë

	)

63 
	#F7
 (0x17 + 
FLAG_EXT
Ë

	)

64 
	#F8
 (0x18 + 
FLAG_EXT
Ë

	)

65 
	#F9
 (0x19 + 
FLAG_EXT
Ë

	)

66 
	#F10
 (0x1A + 
FLAG_EXT
Ë

	)

67 
	#F11
 (0x1B + 
FLAG_EXT
Ë

	)

68 
	#F12
 (0x1C + 
FLAG_EXT
Ë

	)

71 
	#PRINTSCREEN
 (0x1D + 
FLAG_EXT
Ë

	)

72 
	#PAUSEBREAK
 (0x1E + 
FLAG_EXT
Ë

	)

73 
	#INSERT
 (0x1F + 
FLAG_EXT
Ë

	)

74 
	#DELETE
 (0x20 + 
FLAG_EXT
Ë

	)

75 
	#HOME
 (0x21 + 
FLAG_EXT
Ë

	)

76 
	#END
 (0x22 + 
FLAG_EXT
Ë

	)

77 
	#PAGEUP
 (0x23 + 
FLAG_EXT
Ë

	)

78 
	#PAGEDOWN
 (0x24 + 
FLAG_EXT
Ë

	)

79 
	#UP
 (0x25 + 
FLAG_EXT
Ë

	)

80 
	#DOWN
 (0x26 + 
FLAG_EXT
Ë

	)

81 
	#LEFT
 (0x27 + 
FLAG_EXT
Ë

	)

82 
	#RIGHT
 (0x28 + 
FLAG_EXT
Ë

	)

85 
	#POWER
 (0x29 + 
FLAG_EXT
Ë

	)

86 
	#SLEEP
 (0x2A + 
FLAG_EXT
Ë

	)

87 
	#WAKE
 (0x2B + 
FLAG_EXT
Ë

	)

90 
	#PAD_SLASH
 (0x2C + 
FLAG_EXT
Ë

	)

91 
	#PAD_STAR
 (0x2D + 
FLAG_EXT
Ë

	)

92 
	#PAD_MINUS
 (0x2E + 
FLAG_EXT
Ë

	)

93 
	#PAD_PLUS
 (0x2F + 
FLAG_EXT
Ë

	)

94 
	#PAD_ENTER
 (0x30 + 
FLAG_EXT
Ë

	)

95 
	#PAD_DOT
 (0x31 + 
FLAG_EXT
Ë

	)

96 
	#PAD_0
 (0x32 + 
FLAG_EXT
Ë

	)

97 
	#PAD_1
 (0x33 + 
FLAG_EXT
Ë

	)

98 
	#PAD_2
 (0x34 + 
FLAG_EXT
Ë

	)

99 
	#PAD_3
 (0x35 + 
FLAG_EXT
Ë

	)

100 
	#PAD_4
 (0x36 + 
FLAG_EXT
Ë

	)

101 
	#PAD_5
 (0x37 + 
FLAG_EXT
Ë

	)

102 
	#PAD_6
 (0x38 + 
FLAG_EXT
Ë

	)

103 
	#PAD_7
 (0x39 + 
FLAG_EXT
Ë

	)

104 
	#PAD_8
 (0x3A + 
FLAG_EXT
Ë

	)

105 
	#PAD_9
 (0x3B + 
FLAG_EXT
Ë

	)

106 
	#PAD_UP
 
PAD_8


	)

107 
	#PAD_DOWN
 
PAD_2


	)

108 
	#PAD_LEFT
 
PAD_4


	)

109 
	#PAD_RIGHT
 
PAD_6


	)

110 
	#PAD_HOME
 
PAD_7


	)

111 
	#PAD_END
 
PAD_1


	)

112 
	#PAD_PAGEUP
 
PAD_9


	)

113 
	#PAD_PAGEDOWN
 
PAD_3


	)

114 
	#PAD_INS
 
PAD_0


	)

115 
	#PAD_MID
 
PAD_5


	)

116 
	#PAD_DEL
 
PAD_DOT


	)

123 
	skb_öbuf
 {

124 * 
	mp_hód
;

125 * 
	mp_èû
;

126 
	mcou¡
;

127 
	mbuf
[
KB_IN_BYTES
];

	@include/sys/keymap.h

13 #i‚def 
_ORANGES_KEYMAP_H_


14 
	#_ORANGES_KEYMAP_H_


	)

19 
u32
 
	gkeym≠
[
NR_SCAN_CODES
 * 
MAP_COLS
] = {

24  
ESC
, ESC, 0,

37  
BACKSPACE
, BACKSPACE, 0,

38  
TAB
, TAB, 0,

51  
ENTER
, ENTER, 
PAD_ENTER
,

52  
CTRL_L
, CTRL_L, 
CTRL_R
,

65  
SHIFT_L
, SHIFT_L, 0,

76  '/', '?', 
PAD_SLASH
,

77  
SHIFT_R
, SHIFT_R, 0,

79  
ALT_L
, ALT_L, 
ALT_R
,

81  
CAPS_LOCK
, CAPS_LOCK, 0,

82  
F1
, F1, 0,

83  
F2
, F2, 0,

84  
F3
, F3, 0,

85  
F4
, F4, 0,

86  
F5
, F5, 0,

87  
F6
, F6, 0,

88  
F7
, F7, 0,

89  
F8
, F8, 0,

90  
F9
, F9, 0,

91  
F10
, F10, 0,

92  
NUM_LOCK
, NUM_LOCK, 0,

93  
SCROLL_LOCK
, SCROLL_LOCK, 0,

94  
PAD_HOME
, '7', 
HOME
,

95  
PAD_UP
, '8', 
UP
,

96  
PAD_PAGEUP
, '9', 
PAGEUP
,

97  
PAD_MINUS
, '-', 0,

98  
PAD_LEFT
, '4', 
LEFT
,

99  
PAD_MID
, '5', 0,

100  
PAD_RIGHT
, '6', 
RIGHT
,

101  
PAD_PLUS
, '+', 0,

102  
PAD_END
, '1', 
END
,

103  
PAD_DOWN
, '2', 
DOWN
,

104  
PAD_PAGEDOWN
, '3', 
PAGEDOWN
,

105  
PAD_INS
, '0', 
INSERT
,

106  
PAD_DOT
, '.', 
DELETE
,

110  
F11
, F11, 0,

111  
F12
, F12, 0,

114  0, 0, 
GUI_L
,

115  0, 0, 
GUI_R
,

116  0, 0, 
APPS
,

	@include/sys/mm.h

19 #i‚def 
_2Y_OS_MM_H_


20 
	#_2Y_OS_MM_H_


	)

28 
	#PDT_ADDR
 0x100000

	)

35 
	#PAGE_SIZE
 0x1000

	)

43 
	#ENTRY_SIZE
 0x4

	)

51 
	#NR_ENTRY_PER_PAGE
 (
PAGE_SIZE
 / 
ENTRY_SIZE
)

	)

59 
	#VM_SIZE
 0x4000000

	)

66 
	#MM_MEM_SIZE
 (0x4000000)

	)

73 
	#MM_KERNEL_END
 (0x400000)

	)

80 
	#MM_NR_KRNL_PAGE
 ( 
MM_KERNEL_END
 / 
PAGE_SIZE
 )

	)

87 
	#MM_NR_PAGE
 ( (
MM_MEM_SIZE
 - 
MM_KERNEL_END
Ë/ 
PAGE_SIZE
 )

	)

94 
	#MM_PAGE_FREE
 (0)

	)

101 
	#MM_PAGE_UNAVAILABLE
 (-1)

	)

108 
	#MM_PAGE_MASK
 (0xfff)

	)

115 
	#MM_4M_MASK
 (0x3fffff)

	)

123 
	#MM_PTE_MASK
 (0x3ff)

	)

130 
	#MM_PT_MASK
 (0xfffff000)

	)

137 
	#MM_PG_P
 (0x1)

	)

144 
	#MM_PG_RWR
 (0x0)

	)

151 
	#MM_PG_RWW
 (0x2)

	)

158 
	#MM_PG_USS
 (0x0)

	)

165 
	#MM_PG_USU
 (0x4)

	)

172 
	#GET_IND_IN_PT
(
addr
Ë((◊dd∏& 
MM_PT_MASK
Ë- 
MM_KERNEL_END
)>> 12 )

	)

179 
	#MM_STACK_SIZE
 (0x800000)

	)

186 
	#MM_STACK_GAP
 (0x10000)

	)

	@include/sys/proc.h

9 
	s°ack‰ame
 {

10 
u32
 
	mgs
;

11 
u32
 
	mfs
;

12 
u32
 
	mes
;

13 
u32
 
	mds
;

14 
u32
 
	medi
;

15 
u32
 
	mesi
;

16 
u32
 
	mebp
;

17 
u32
 
	mkî√l_e•
;

18 
u32
 
	mebx
;

19 
u32
 
	medx
;

20 
u32
 
	mecx
;

21 
u32
 
	móx
;

22 
u32
 
	mªèddr
;

23 
u32
 
	meù
;

24 
u32
 
	mcs
;

25 
u32
 
	meÊags
;

26 
u32
 
	me•
;

27 
u32
 
	mss
;

31 
	s¥oc
 {

32 
°ack‰ame
 
	mªgs
;

34 
u16
 
	mldt_£l
;

35 
des¸ùt‹
 
	mldts
[
LDT_SIZE
];

37 
	mticks
;

38 
	m¥i‹ôy
;

41 
	m«me
[16];

43 
	mp_Êags
;

48 
MESSAGE
 * 
	mp_msg
;

49 
	mp_ªcv‰om
;

50 
	mp_£ndto
;

52 
	mhas_öt_msg
;

57 
¥oc
 * 
	mq_£ndög
;

61 
¥oc
 * 
	m√xt_£ndög
;

66 
	mp_∑ª¡
;

68 
	mexô_°©us
;

72 
u32
 
	m°¨t_ãxt
, 
	míd_ãxt
, 
	m°¨t_d©a
, 
	míd_d©a
, 
	m°¨t_°ack
;

76 
u32
 
	mbrk
;

80 
öode
 * 
	mpwd
;

81 
öode
 * 
	mroŸ
;

82 
fûe_desc
 * 
	mfûp
[
NR_FILES
];

85 
	sèsk
 {

86 
èsk_f
 
	möôül_eù
;

87 
	m°acksize
;

88 
	m«me
[32];

91 
	#¥oc2pid
(
x
Ë(x - 
¥oc_èbÀ
)

	)

94 
	#NR_TASKS
 5

	)

95 
	#NR_PROCS
 32

	)

96 
	#NR_NATIVE_PROCS
 4

	)

97 
	#FIRST_PROC
 
¥oc_èbÀ
[0]

	)

98 
	#LAST_PROC
 
¥oc_èbÀ
[
NR_TASKS
 + 
NR_PROCS
 - 1]

	)

108 
	#PROCS_BASE
 0xA00000

	)

109 
	#PROC_IMAGE_SIZE_DEFAULT
 0x100000

	)

110 
	#PROC_ORIGIN_STACK
 0x400

	)

113 
	#STACK_SIZE_DEFAULT
 0x4000

	)

114 
	#STACK_SIZE_TTY
 
STACK_SIZE_DEFAULT


	)

115 
	#STACK_SIZE_SYS
 
STACK_SIZE_DEFAULT


	)

116 
	#STACK_SIZE_HD
 
STACK_SIZE_DEFAULT


	)

117 
	#STACK_SIZE_FS
 
STACK_SIZE_DEFAULT


	)

118 
	#STACK_SIZE_MM
 
STACK_SIZE_DEFAULT


	)

119 
	#STACK_SIZE_INIT
 
STACK_SIZE_DEFAULT


	)

120 
	#STACK_SIZE_TESTA
 
STACK_SIZE_DEFAULT


	)

121 
	#STACK_SIZE_TESTB
 
STACK_SIZE_DEFAULT


	)

122 
	#STACK_SIZE_TESTC
 
STACK_SIZE_DEFAULT


	)

124 
	#STACK_SIZE_TOTAL
 (
STACK_SIZE_TTY
 + \

125 
STACK_SIZE_SYS
 + \

126 
STACK_SIZE_HD
 + \

127 
STACK_SIZE_FS
 + \

128 
STACK_SIZE_MM
 + \

129 
STACK_SIZE_INIT
 + \

130 
STACK_SIZE_TESTA
 + \

131 
STACK_SIZE_TESTB
 + \

132 
STACK_SIZE_TESTC
)

	)

	@include/sys/protect.h

8 #i‚def 
_ORANGES_PROTECT_H_


9 
	#_ORANGES_PROTECT_H_


	)

13 
	sdes¸ùt‹


15 
u16
 
	mlimô_low
;

16 
u16
 
	mba£_low
;

17 
u8
 
	mba£_mid
;

18 
u8
 
	m©å1
;

19 
u8
 
	mlimô_high_©å2
;

20 
u8
 
	mba£_high
;

23 
	#ªas£mbly
(
high
, 
high_shi·
, 
mid
, 
mid_shi·
, 
low
) \

24 (((
high
Ë<< (
high_shi·
)) + \

25 ((
mid
Ë<< (
mid_shi·
)) + \

26 (
low
))

	)

29 
	sg©e


31 
u16
 
	moff£t_low
;

32 
u16
 
	m£À˘‹
;

33 
u8
 
	mdcou¡
;

36 
u8
 
	m©å
;

37 
u16
 
	moff£t_high
;

40 
	stss
 {

41 
u32
 
	mbacklök
;

42 
u32
 
	me•0
;

43 
u32
 
	mss0
;

44 
u32
 
	me•1
;

45 
u32
 
	mss1
;

46 
u32
 
	me•2
;

47 
u32
 
	mss2
;

48 
u32
 
	m¸3
;

49 
u32
 
	meù
;

50 
u32
 
	mÊags
;

51 
u32
 
	móx
;

52 
u32
 
	mecx
;

53 
u32
 
	medx
;

54 
u32
 
	mebx
;

55 
u32
 
	me•
;

56 
u32
 
	mebp
;

57 
u32
 
	mesi
;

58 
u32
 
	medi
;

59 
u32
 
	mes
;

60 
u32
 
	mcs
;

61 
u32
 
	mss
;

62 
u32
 
	mds
;

63 
u32
 
	mfs
;

64 
u32
 
	mgs
;

65 
u32
 
	mldt
;

66 
u16
 
	må≠
;

67 
u16
 
	mioba£
;

73 
	#INDEX_DUMMY
 0

	)

74 
	#INDEX_FLAT_C
 1

	)

75 
	#INDEX_FLAT_RW
 2

	)

76 
	#INDEX_VIDEO
 3

	)

77 
	#INDEX_TSS
 4

	)

78 
	#INDEX_LDT_FIRST
 5

	)

80 
	#SELECTOR_DUMMY
 0

	)

81 
	#SELECTOR_FLAT_C
 0x08

	)

82 
	#SELECTOR_FLAT_RW
 0x10

	)

83 
	#SELECTOR_VIDEO
 (0x18+3Ë

	)

84 
	#SELECTOR_TSS
 0x20

	)

85 
	#SELECTOR_LDT_FIRST
 0x28

	)

87 
	#SELECTOR_KERNEL_CS
 
SELECTOR_FLAT_C


	)

88 
	#SELECTOR_KERNEL_DS
 
SELECTOR_FLAT_RW


	)

89 
	#SELECTOR_KERNEL_GS
 
SELECTOR_VIDEO


	)

92 
	#LDT_SIZE
 2

	)

94 
	#INDEX_LDT_C
 0

	)

95 
	#INDEX_LDT_RW
 1

	)

98 
	#DA_32
 0x4000

	)

99 
	#DA_LIMIT_4K
 0x8000

	)

100 
	#LIMIT_4K_SHIFT
 12

	)

101 
	#DA_DPL0
 0x00

	)

102 
	#DA_DPL1
 0x20

	)

103 
	#DA_DPL2
 0x40

	)

104 
	#DA_DPL3
 0x60

	)

106 
	#DA_DR
 0x90

	)

107 
	#DA_DRW
 0x92

	)

108 
	#DA_DRWA
 0x93

	)

109 
	#DA_C
 0x98

	)

110 
	#DA_CR
 0x9A

	)

111 
	#DA_CCO
 0x9C

	)

112 
	#DA_CCOR
 0x9E

	)

114 
	#DA_LDT
 0x82

	)

115 
	#DA_TaskG©e
 0x85

	)

116 
	#DA_386TSS
 0x89

	)

117 
	#DA_386CG©e
 0x8C

	)

118 
	#DA_386IG©e
 0x8E

	)

119 
	#DA_386TG©e
 0x8F

	)

123 
	#SA_RPL_MASK
 0xFFFC

	)

124 
	#SA_RPL0
 0

	)

125 
	#SA_RPL1
 1

	)

126 
	#SA_RPL2
 2

	)

127 
	#SA_RPL3
 3

	)

129 
	#SA_TI_MASK
 0xFFFB

	)

130 
	#SA_TIG
 0

	)

131 
	#SA_TIL
 4

	)

134 
	#INT_VECTOR_DIVIDE
 0x0

	)

135 
	#INT_VECTOR_DEBUG
 0x1

	)

136 
	#INT_VECTOR_NMI
 0x2

	)

137 
	#INT_VECTOR_BREAKPOINT
 0x3

	)

138 
	#INT_VECTOR_OVERFLOW
 0x4

	)

139 
	#INT_VECTOR_BOUNDS
 0x5

	)

140 
	#INT_VECTOR_INVAL_OP
 0x6

	)

141 
	#INT_VECTOR_COPROC_NOT
 0x7

	)

142 
	#INT_VECTOR_DOUBLE_FAULT
 0x8

	)

143 
	#INT_VECTOR_COPROC_SEG
 0x9

	)

144 
	#INT_VECTOR_INVAL_TSS
 0xA

	)

145 
	#INT_VECTOR_SEG_NOT
 0xB

	)

146 
	#INT_VECTOR_STACK_FAULT
 0xC

	)

147 
	#INT_VECTOR_PROTECTION
 0xD

	)

148 
	#INT_VECTOR_PAGE_FAULT
 0xE

	)

149 
	#INT_VECTOR_COPROC_ERR
 0x10

	)

152 
	#INT_VECTOR_IRQ0
 0x20

	)

153 
	#INT_VECTOR_IRQ8
 0x28

	)

156 
	#INT_VECTOR_SYS_CALL
 0x90

	)

163 
	#makñöór
(
£g
,
off
Ë(
u32
)(((u32)(
	`£g2löór
(£g))Ë+ (u32)(off))

	)

	@include/sys/proto.h

9 
PUBLIC
 
out_byã
(
u16
 
p‹t
, 
u8
 
vÆue
);

10 
PUBLIC
 
u8
 
ö_byã
(
u16
 
p‹t
);

11 
PUBLIC
 
di•_°r
(* 
öfo
);

12 
PUBLIC
 
di•_cﬁ‹_°r
(* 
öfo
, 
cﬁ‹
);

13 
PUBLIC
 
dißbÀ_úq
(
úq
);

14 
PUBLIC
 
íabÀ_úq
(
úq
);

15 
PUBLIC
 
dißbÀ_öt
();

16 
PUBLIC
 
íabÀ_öt
();

17 
PUBLIC
 
p‹t_ªad
(
u16
 
p‹t
, * 
buf
, 
n
);

18 
PUBLIC
 
p‹t_wrôe
(
u16
 
p‹t
, * 
buf
, 
n
);

19 
PUBLIC
 
glôãr
(
row
, 
cﬁ
);

22 
PUBLIC
 * 
°r˝y
(* 
d°
, c⁄° * 
§c
);

25 
PUBLIC
 
öô_¥Ÿ
();

26 
PUBLIC
 
u32
 
£g2löór
(
u16
 
£g
);

27 
PUBLIC
 
öô_desc
(
des¸ùt‹
 * 
p_desc
,

28 
u32
 
ba£
, u32 
limô
, 
u16
 
©åibuã
);

31 
PUBLIC
 
gë_boŸ_∑øms
(
boŸ_∑øms
 * 
pbp
);

32 
PUBLIC
 
gë_kî√l_m≠
(* 
b
, * 
l
);

33 
PUBLIC
 
dñay
(
time
);

34 
PUBLIC
 
di•_öt
(
öput
);

35 
PUBLIC
 * 
ôﬂ
(* 
°r
, 
num
);

38 
PUBLIC
 
ª°¨t
();

41 
PUBLIC
 
Inô
();

42 
PUBLIC
 
gë_ticks
();

43 
PUBLIC
 
Te°A
();

44 
PUBLIC
 
Te°B
();

45 
PUBLIC
 
Te°C
();

46 
PUBLIC
 
∑nic
(c⁄° *
fmt
, ...);

49 
PUBLIC
 
öô_8259A
();

50 
PUBLIC
 
put_úq_h™dÀr
(
úq
, 
úq_h™dÀr
 
h™dÀr
);

51 
PUBLIC
 
•urious_úq
(
úq
);

54 
PUBLIC
 
˛ock_h™dÀr
(
úq
);

55 
PUBLIC
 
öô_˛ock
();

56 
PUBLIC
 
mûli_dñay
(
mûli_£c
);

59 
PUBLIC
 
èsk_hd
();

60 
PUBLIC
 
hd_h™dÀr
(
úq
);

63 
PUBLIC
 
öô_keybﬂrd
();

64 
PUBLIC
 
keybﬂrd_ªad
(
TTY
* 
p_ây
);

67 
PUBLIC
 
èsk_ây
();

68 
PUBLIC
 
ö_¥o˚ss
(
TTY
* 
p_ây
, 
u32
 
key
);

69 
PUBLIC
 
dump_ây_buf
();

72 
PUBLIC
 
èsk_sys
();

75 
PUBLIC
 
èsk_fs
();

76 
PUBLIC
 
rw_£˘‹
(
io_ty≥
, 
dev
, 
u64
 
pos
,

77 
byãs
, 
¥oc_ƒ
, * 
buf
);

78 
PUBLIC
 
öode
 * 
gë_öode
(
dev
, 
num
);

79 
PUBLIC
 
put_öode
(
öode
 * 
pöode
);

80 
PUBLIC
 
sync_öode
(
öode
 * 
p
);

81 
PUBLIC
 
su≥r_block
 * 
gë_su≥r_block
(
dev
);

84 
PUBLIC
 
do_›í
();

85 
PUBLIC
 
do_˛o£
();

86 
PUBLIC
 
do_l£ek
();

87 
PUBLIC
 
do_mkdú
();

88 
PUBLIC
 
do_chdú
();

91 
PUBLIC
 
do_rdwt
();

92 
PUBLIC
 
Æloc_z⁄e_f‹_cmd_èr
 (
öode
 * 
pö
, 
°¨t
, 
ƒ
);

96 
PUBLIC
 
do_u∆ök
();

99 
PUBLIC
 
do_°©
();

100 
PUBLIC
 
°rù_∑th
(* 
fûíame
, c⁄° * 
∑th«me
,

101 
öode
** 
µöode
);

102 
PUBLIC
 
£¨ch_fûe
(* 
∑th
);

105 
PUBLIC
 
do_disklog
();

106 
PUBLIC
 
disklog
(* 
log°r
);

107 
PUBLIC
 
dump_fd_gøph
(c⁄° * 
fmt
, ...);

110 
PUBLIC
 
èsk_mm
();

111 
PUBLIC
 
Æloc_mem
(
pid
, 
memsize
);

112 
PUBLIC
 
‰ì_mem
(
pid
);

115 
PUBLIC
 
do_f‹k
();

116 
PUBLIC
 
do_exô
(
°©us
);

117 
PUBLIC
 
do_waô
();

120 
PUBLIC
 
do_exec
();

121 
PUBLIC
 
öôül_brk
 (
pid
, 
u32
 
°¨t_ãxt
, u32 
íd_ãxt
, u32 
°¨t_d©a
, u32 
íd_d©a
);

125 
PUBLIC
 
c›y_⁄_wrôe
(
u32
 
l
, u32 
r
, u32 
size
);

126 
PUBLIC
 
vîify_¨ó
(
u32
 
addªss
, 
size
);

127 
PUBLIC
 
do_no_∑ge
(
u32
 
îr‹_code
, u32 
addªss
);

128 
PUBLIC
 
do_wp_∑ge
(
u32
 
îr‹_code
, u32 
addªss
);

129 
PUBLIC
 
‰ì_∑ge_èbÀs
(
u32
 
°¨t
, u32 
size
);

132 
PUBLIC
 
do_brk
();

135 
PUBLIC
 
out_ch¨
(
CONSOLE
* 
p_c⁄
, 
ch
);

136 
PUBLIC
 
s¸ﬁl_s¸ìn
(
CONSOLE
* 
p_c⁄
, 
dúe˘i⁄
);

137 
PUBLIC
 
£À˘_c⁄sﬁe
(
ƒ_c⁄sﬁe
);

138 
PUBLIC
 
öô_s¸ìn
(
TTY
* 
p_ây
);

139 
PUBLIC
 
is_cuºít_c⁄sﬁe
(
CONSOLE
* 
p_c⁄
);

142 
PUBLIC
 
scheduÀ
();

143 
PUBLIC
 * 
va2œ
(
pid
, * 
va
);

144 
PUBLIC
 
ldt_£g_löór
(
¥oc
* 
p
, 
idx
);

145 
PUBLIC
 
ª£t_msg
(
MESSAGE
* 
p
);

146 
PUBLIC
 
dump_msg
(c⁄° * 
tôÀ
, 
MESSAGE
* 
m
);

147 
PUBLIC
 
dump_¥oc
(
¥oc
 * 
p
);

148 
PUBLIC
 
£nd_ªcv
(
fun˘i⁄
, 
§c_de°
, 
MESSAGE
* 
msg
);

149 
PUBLIC
 
öf‹m_öt
(
èsk_ƒ
);

152 
PUBLIC
 
•ö
(* 
func_«me
);

158 
PUBLIC
 
sys_£ndªc
(
fun˘i⁄
, 
§c_de°
, 
MESSAGE
* 
m
, 
¥oc
* 
p
);

159 
PUBLIC
 
sys_¥ötx
(
_unu£d1
, 
_unu£d2
, * 
s
, 
¥oc
 * 
p_¥oc
);

162 
PUBLIC
 
sys_ˇŒ
();

165 
PUBLIC
 
£ndªc
(
fun˘i⁄
, 
§c_de°
, 
MESSAGE
* 
p_msg
);

166 
PUBLIC
 
¥ötx
(* 
°r
);

	@include/sys/tty.h

8 #i‚de‡
_ORANGES_TTY_H_


9 
	#_ORANGES_TTY_H_


	)

12 
	#TTY_IN_BYTES
 256

	)

13 
	#TTY_OUT_BUF_LEN
 2

	)

15 
	gs_ây
;

16 
	gs_c⁄sﬁe
;

19 
	ss_ây


21 
u32
 
	mibuf
[
TTY_IN_BYTES
];

22 
u32
* 
	mibuf_hód
;

23 
u32
* 
	mibuf_èû
;

24 
	mibuf_˙t
;

26 
	mây_ˇŒî
;

27 
	mây_¥o˙r
;

28 * 
	mây_ªq_buf
;

29 
	mây_À·_˙t
;

30 
	mây_å™s_˙t
;

32 
s_c⁄sﬁe
 * 
	mc⁄sﬁe
;

33 }
	tTTY
;

	@include/type.h

8 #i‚de‡
_ORANGES_TYPE_H_


9 
	#_ORANGES_TYPE_H_


	)

12 
	#PUBLIC


	)

13 
	#PRIVATE
 

	)

15 
	tu64
;

16 
	tu32
;

17 
	tu16
;

18 
	tu8
;

20 * 
	tva_li°
;

22 (*
	göt_h™dÀr
) ();

23 (*
	gèsk_f
) ();

24 (*
	túq_h™dÀr
Ë(
	túq
);

26 * 
	tsy°em_ˇŒ
;

32 
	smess1
 {

33 
m1i1
;

34 
m1i2
;

35 
m1i3
;

36 
m1i4
;

38 
	smess2
 {

39 * 
m2p1
;

40 * 
m2p2
;

41 * 
m2p3
;

42 * 
m2p4
;

44 
	smess3
 {

45 
m3i1
;

46 
m3i2
;

47 
m3i3
;

48 
m3i4
;

49 
u64
 
m3l1
;

50 
u64
 
m3l2
;

51 * 
m3p1
;

52 * 
m3p2
;

55 
sour˚
;

56 
ty≥
;

58 
mess1
 
m1
;

59 
mess2
 
m2
;

60 
mess3
 
m3
;

61 } 
u
;

62 } 
	tMESSAGE
;

65 
	sboŸ_∑øms
 {

66 
mem_size
;

67 * 
kî√l_fûe
;

71 
u32
 
	tz⁄e_t
;

	@include/unistd.h

19 #i‚de‡
_2Y_OS_UNISTD_H_


20 
	#_2Y_OS_UNISTD_H_


	)

22 
chdú
(c⁄° *
∑th
);

25 
brk
(* 
addr
);

26 
sbrk
(
ö¸
);

	@kernel/clock.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

36 
PUBLIC
 
	$˛ock_h™dÀr
(
úq
)

38 i‡(++
ticks
 >
MAX_TICKS
)

39 
ticks
 = 0;

41 i‡(
p_¥oc_ªady
->
ticks
)

42 
p_¥oc_ªady
->
ticks
--;

44 i‡(
key_¥es£d
)

45 
	`öf‹m_öt
(
TASK_TTY
);

47 i‡(
k_ªíãr
 != 0) {

51 i‡(
p_¥oc_ªady
->
ticks
 > 0) {

55 
	`scheduÀ
();

57 
	}
}

67 
PUBLIC
 
	$mûli_dñay
(
mûli_£c
)

69 
t
 = 
	`gë_ticks
();

71 ((
	`gë_ticks
(Ë- 
t
Ë* 1000 / 
HZ
Ë< 
mûli_£c
) {}

72 
	}
}

81 
PUBLIC
 
	$öô_˛ock
()

84 
	`out_byã
(
TIMER_MODE
, 
RATE_GENERATOR
);

85 
	`out_byã
(
TIMER0
, (
u8
Ë(
TIMER_FREQ
/
HZ
) );

86 
	`out_byã
(
TIMER0
, (
u8
Ë((
TIMER_FREQ
/
HZ
) >> 8));

88 
	`put_úq_h™dÀr
(
CLOCK_IRQ
, 
˛ock_h™dÀr
);

89 
	`íabÀ_úq
(
CLOCK_IRQ
);

90 
	}
}

	@kernel/console.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

30 
PRIVATE
 
£t_curs‹
(
posôi⁄
);

31 
PRIVATE
 
£t_video_°¨t_addr
(
u32
 
addr
);

32 
PRIVATE
 
Êush
(
CONSOLE
* 
c⁄
);

33 
PRIVATE
 
w_c›y
(
d°
, c⁄° 
§c
, 
size
);

34 
PRIVATE
 
˛ór_s¸ìn
(
pos
, 
Àn
);

44 
PUBLIC
 
	$öô_s¸ìn
(
TTY
* 
ây
)

46 
ƒ_ây
 = 
ây
 - 
ây_èbÀ
;

47 
ây
->
c⁄sﬁe
 = 
c⁄sﬁe_èbÀ
 + 
ƒ_ây
;

54 
v_mem_size
 = 
V_MEM_SIZE
 >> 1;

55 
size_≥r_c⁄
 = 
v_mem_size
 / 
NR_CONSOLES
;

56 
ây
->
c⁄sﬁe
->
‹ig
 = 
ƒ_ây
 * 
size_≥r_c⁄
;

57 
ây
->
c⁄sﬁe
->
c⁄_size
 = 
size_≥r_c⁄
 / 
SCR_WIDTH
 * SCR_WIDTH;

58 
ây
->
c⁄sﬁe
->
curs‹
 =Åty->c⁄sﬁe->
¸tc_°¨t
 =Åty->c⁄sﬁe->
‹ig
;

59 
ây
->
c⁄sﬁe
->
is_fuŒ
 = 0;

61 i‡(
ƒ_ây
 == 0) {

62 
ây
->
c⁄sﬁe
->
curs‹
 = 
di•_pos
 / 2;

63 
di•_pos
 = 0;

69 c⁄° 
¥om±
[] = "[TTY #?]\n";

71 c⁄° * 
p
 = 
¥om±
;

72 ; *
p
;Ö++)

73 
	`out_ch¨
(
ây
->
c⁄sﬁe
, *
p
 ='?' ? 
ƒ_ây
 + '0' : *p);

76 
	`£t_curs‹
(
ây
->
c⁄sﬁe
->
curs‹
);

77 
	}
}

89 
PUBLIC
 
	$out_ch¨
(
CONSOLE
* 
c⁄
, 
ch
)

91 
u8
* 
pch
 = (u8*)(
V_MEM_BASE
 + 
c⁄
->
curs‹
 * 2);

93 
	`as£π
(
c⁄
->
curs‹
 - c⁄->
‹ig
 < c⁄->
c⁄_size
);

99 
curs‹_x
 = (
c⁄
->
curs‹
 - c⁄->
‹ig
Ë% 
SCR_WIDTH
;

100 
curs‹_y
 = (
c⁄
->
curs‹
 - c⁄->
‹ig
Ë/ 
SCR_WIDTH
;

102 
ch
) {

104 
c⁄
->
curs‹
 = c⁄->
‹ig
 + 
SCR_WIDTH
 * (
curs‹_y
 + 1);

107 i‡(
c⁄
->
curs‹
 > c⁄->
‹ig
) {

108 
c⁄
->
curs‹
--;

109 *(
pch
 - 2) = ' ';

110 *(
pch
 - 1Ë
DEFAULT_CHAR_COLOR
;

114 *
pch
++ = 
ch
;

115 *
pch
++ = 
DEFAULT_CHAR_COLOR
;

116 
c⁄
->
curs‹
++;

120 i‡(
c⁄
->
curs‹
 - c⁄->
‹ig
 >c⁄->
c⁄_size
) {

121 
curs‹_x
 = (
c⁄
->
curs‹
 - c⁄->
‹ig
Ë% 
SCR_WIDTH
;

122 
curs‹_y
 = (
c⁄
->
curs‹
 - c⁄->
‹ig
Ë/ 
SCR_WIDTH
;

123 
˝_‹ig
 = 
c⁄
->
‹ig
 + (
curs‹_y
 + 1Ë* 
SCR_WIDTH
 - 
SCR_SIZE
;

124 
	`w_c›y
(
c⁄
->
‹ig
, 
˝_‹ig
, 
SCR_SIZE
 - 
SCR_WIDTH
);

125 
c⁄
->
¸tc_°¨t
 = c⁄->
‹ig
;

126 
c⁄
->
curs‹
 = c⁄->
‹ig
 + (
SCR_SIZE
 - 
SCR_WIDTH
Ë+ 
curs‹_x
;

127 
	`˛ór_s¸ìn
(
c⁄
->
curs‹
, 
SCR_WIDTH
);

128 i‡(!
c⁄
->
is_fuŒ
)

129 
c⁄
->
is_fuŒ
 = 1;

132 
	`as£π
(
c⁄
->
curs‹
 - c⁄->
‹ig
 < c⁄->
c⁄_size
);

134 
c⁄
->
curs‹
 >c⁄->
¸tc_°¨t
 + 
SCR_SIZE
 ||

135 
c⁄
->
curs‹
 < c⁄->
¸tc_°¨t
) {

136 
	`s¸ﬁl_s¸ìn
(
c⁄
, 
SCR_UP
);

138 
	`˛ór_s¸ìn
(
c⁄
->
curs‹
, 
SCR_WIDTH
);

141 
	`Êush
(
c⁄
);

142 
	}
}

153 
PRIVATE
 
	$˛ór_s¸ìn
(
pos
, 
Àn
)

155 
u8
 * 
pch
 = (u8*)(
V_MEM_BASE
 + 
pos
 * 2);

156 --
Àn
 >= 0) {

157 *
pch
++ = ' ';

158 *
pch
++ = 
DEFAULT_CHAR_COLOR
;

160 
	}
}

173 
PUBLIC
 
	$is_cuºít_c⁄sﬁe
(
CONSOLE
* 
c⁄
)

175  (
c⁄
 =&
c⁄sﬁe_èbÀ
[
cuºít_c⁄sﬁe
]);

176 
	}
}

188 
PRIVATE
 
	$£t_curs‹
(
posôi⁄
)

190 
	`dißbÀ_öt
();

191 
	`out_byã
(
CRTC_ADDR_REG
, 
CURSOR_H
);

192 
	`out_byã
(
CRTC_DATA_REG
, (
posôi⁄
 >> 8) & 0xFF);

193 
	`out_byã
(
CRTC_ADDR_REG
, 
CURSOR_L
);

194 
	`out_byã
(
CRTC_DATA_REG
, 
posôi⁄
 & 0xFF);

195 
	`íabÀ_öt
();

196 
	}
}

207 
PRIVATE
 
	$£t_video_°¨t_addr
(
u32
 
addr
)

209 
	`dißbÀ_öt
();

210 
	`out_byã
(
CRTC_ADDR_REG
, 
START_ADDR_H
);

211 
	`out_byã
(
CRTC_DATA_REG
, (
addr
 >> 8) & 0xFF);

212 
	`out_byã
(
CRTC_ADDR_REG
, 
START_ADDR_L
);

213 
	`out_byã
(
CRTC_DATA_REG
, 
addr
 & 0xFF);

214 
	`íabÀ_öt
();

215 
	}
}

226 
PUBLIC
 
	$£À˘_c⁄sﬁe
(
ƒ_c⁄sﬁe
)

228 i‡((
ƒ_c⁄sﬁe
 < 0Ë|| (ƒ_c⁄sﬁê>
NR_CONSOLES
)) ;

230 
	`Êush
(&
c⁄sﬁe_èbÀ
[
cuºít_c⁄sﬁe
 = 
ƒ_c⁄sﬁe
]);

231 
	}
}

253 
PUBLIC
 
	$s¸ﬁl_s¸ìn
(
CONSOLE
* 
c⁄
, 
dú
)

258 
ﬁde°
;

259 
√we°
;

260 
s¸_t›
;

262 
√we°
 = (
c⁄
->
curs‹
 - c⁄->
‹ig
Ë/ 
SCR_WIDTH
 * SCR_WIDTH;

263 
ﬁde°
 = 
c⁄
->
is_fuŒ
 ? (
√we°
 + 
SCR_WIDTH
Ë% c⁄->
c⁄_size
 : 0;

264 
s¸_t›
 = 
c⁄
->
¸tc_°¨t
 - c⁄->
‹ig
;

266 i‡(
dú
 =
SCR_DN
) {

267 i‡(!
c⁄
->
is_fuŒ
 && 
s¸_t›
 > 0) {

268 
c⁄
->
¸tc_°¨t
 -
SCR_WIDTH
;

270 i‡(
c⁄
->
is_fuŒ
 && 
s¸_t›
 !
ﬁde°
) {

271 i‡(
c⁄
->
curs‹
 - c⁄->
‹ig
 >c⁄->
c⁄_size
 - 
SCR_SIZE
) {

272 i‡(
c⁄
->
¸tc_°¨t
 !c⁄->
‹ig
)

273 
c⁄
->
¸tc_°¨t
 -
SCR_WIDTH
;

275 i‡(
c⁄
->
¸tc_°¨t
 =c⁄->
‹ig
) {

276 
s¸_t›
 = 
c⁄
->
c⁄_size
 - 
SCR_SIZE
;

277 
c⁄
->
¸tc_°¨t
 = c⁄->
‹ig
 + 
s¸_t›
;

280 
c⁄
->
¸tc_°¨t
 -
SCR_WIDTH
;

284 i‡(
dú
 =
SCR_UP
) {

285 i‡(!
c⁄
->
is_fuŒ
 && 
√we°
 >
s¸_t›
 + 
SCR_SIZE
) {

286 
c⁄
->
¸tc_°¨t
 +
SCR_WIDTH
;

288 i‡(
c⁄
->
is_fuŒ
 && 
s¸_t›
 + 
SCR_SIZE
 - 
SCR_WIDTH
 !
√we°
) {

289 i‡(
s¸_t›
 + 
SCR_SIZE
 =
c⁄
->
c⁄_size
)

290 
c⁄
->
¸tc_°¨t
 = c⁄->
‹ig
;

292 
c⁄
->
¸tc_°¨t
 +
SCR_WIDTH
;

296 
	`as£π
(
dú
 =
SCR_DN
 || dú =
SCR_UP
);

299 
	`Êush
(
c⁄
);

300 
	}
}

312 
PRIVATE
 
	$Êush
(
CONSOLE
* 
c⁄
)

314 i‡(
	`is_cuºít_c⁄sﬁe
(
c⁄
)) {

315 
	`£t_curs‹
(
c⁄
->
curs‹
);

316 
	`£t_video_°¨t_addr
(
c⁄
->
¸tc_°¨t
);

319 #ifde‡
__TTY_DEBUG__


320 
löío
 = 0;

321 
löío
 = 0;Üöíÿ< 
c⁄
->
c⁄_size
 / 
SCR_WIDTH
;Üineno++) {

322 
u8
 * 
pch
 = (u8*)(
V_MEM_BASE
 +

323 (
c⁄
->
‹ig
 + (
löío
 + 1Ë* 
SCR_WIDTH
) * 2

325 *
pch
++ = 
löío
 / 10 + '0';

326 *
pch
++ = 
RED_CHAR
;

327 *
pch
++ = 
löío
 % 10 + '0';

328 *
pch
++ = 
RED_CHAR
;

331 
	}
}

346 
PRIVATE
 
	$w_c›y
(
d°
, c⁄° 
§c
, 
size
)

348 
	`vîify_¨ó
((
u32
)(
V_MEM_BASE
 + (
d°
 << 1)),

349 
size
 << 1);

350 
	`phys_c›y
((*)(
V_MEM_BASE
 + (
d°
 << 1)),

351 (*)(
V_MEM_BASE
 + (
§c
 << 1)),

352 
size
 << 1);

353 
	}
}

	@kernel/global.c

10 
	#GLOBAL_VARIABLES_HERE


	)

12 
	~"ty≥.h
"

13 
	~"°dio.h
"

14 
	~"c⁄°.h
"

15 
	~"¥Ÿe˘.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"¥oc.h
"

24 
	~"globÆ.h
"

25 
	~"¥Ÿo.h
"

28 
PUBLIC
 
¥oc
 
	g¥oc_èbÀ
[
NR_TASKS
 + 
NR_PROCS
];

31 
PUBLIC
 
èsk
 
	gèsk_èbÀ
[
NR_TASKS
] = {

34 {
èsk_ây
, 
STACK_SIZE_TTY
, "TTY" },

35 {
èsk_sys
, 
STACK_SIZE_SYS
, "SYS" },

36 {
èsk_hd
, 
STACK_SIZE_HD
, "HD" },

37 {
èsk_fs
, 
STACK_SIZE_FS
, "FS" },

38 {
èsk_mm
, 
STACK_SIZE_MM
, "MM" }};

40 
PUBLIC
 
èsk
 
	gu£r_¥oc_èbÀ
[
NR_NATIVE_PROCS
] = {

43 {
Inô
, 
STACK_SIZE_INIT
, "INIT" },

44 {
Te°A
, 
STACK_SIZE_TESTA
, "TestA"},

45 {
Te°B
, 
STACK_SIZE_TESTB
, "TestB"},

46 {
Te°C
, 
STACK_SIZE_TESTC
, "TestC"}};

52 
PUBLIC
 
	gèsk_°ack
[
STACK_SIZE_TOTAL
];

54 
PUBLIC
 
TTY
 
	gây_èbÀ
[
NR_CONSOLES
];

55 
PUBLIC
 
CONSOLE
 
	gc⁄sﬁe_èbÀ
[
NR_CONSOLES
];

57 
PUBLIC
 
úq_h™dÀr
 
	gúq_èbÀ
[
NR_IRQ
];

59 
PUBLIC
 
sy°em_ˇŒ
 
	gsys_ˇŒ_èbÀ
[
NR_SYS_CALL
] = {
sys_¥ötx
,

60 
sys_£ndªc
};

70 
dev_drv_m≠
 
	gdd_m≠
[] = {

73 {
INVALID_DRIVER
},

74 {
INVALID_DRIVER
},

75 {
INVALID_DRIVER
},

76 {
TASK_HD
},

77 {
TASK_TTY
},

78 {
INVALID_DRIVER
}

82 
PUBLIC
 
	g∑ge_èbÀ
[
MM_NR_PAGE
];

87 
PUBLIC
 
u8
 * 
	gfsbuf
 = (u8*)0x200000;

88 
PUBLIC
 c⁄° 
	gFSBUF_SIZE
 = 0x100000;

94 
PUBLIC
 
u8
 * 
	gmmbuf
 = (u8*)0x300000;

95 
PUBLIC
 c⁄° 
	gMMBUF_SIZE
 = 0x100000;

101 
PUBLIC
 * 
	glogbuf
 = (*)0x800000;

102 
PUBLIC
 c⁄° 
	gLOGBUF_SIZE
 = 0x100000;

103 
PUBLIC
 * 
	glogdiskbuf
 = (*)0x900000;

104 
PUBLIC
 c⁄° 
	gLOGDISKBUF_SIZE
 = 0x100000;

	@kernel/hd.c

11 
	~"ty≥.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"¥Ÿo.h
"

26 
	~"hd.h
"

29 
PRIVATE
 
öô_hd
 ();

30 
PRIVATE
 
hd_›í
 (
devi˚
);

31 
PRIVATE
 
hd_˛o£
 (
devi˚
);

32 
PRIVATE
 
hd_rdwt
 (
MESSAGE
 * 
p
);

33 
PRIVATE
 
hd_io˘l
 (
MESSAGE
 * 
p
);

34 
PRIVATE
 
hd_cmd_out
 (
hd_cmd
* 
cmd
);

35 
PRIVATE
 
gë_∑π_èbÀ
 (
drive
, 
£˘_ƒ
, 
∑π_ít
 * 
íåy
);

36 
PRIVATE
 
∑πôi⁄
 (
devi˚
, 
°yÀ
);

38 
PRIVATE
 
waôf‹
 (
mask
, 
vÆ
, 
timeout
);

39 
PRIVATE
 
öãºu±_waô
 ();

40 
PRIVATE
 
hd_idítify
 (
drive
);

41 
PRIVATE
 
¥öt_idítify_öfo
 (
u16
* 
hdöfo
);

43 
PRIVATE
 
u8
 
	ghd_°©us
;

44 
PRIVATE
 
u8
 
	ghdbuf
[
SECTOR_SIZE
 * 2];

45 
PRIVATE
 
hd_öfo
 
	ghd_öfo
[1];

47 
	#DRV_OF_DEV
(
dev
Ë(dev <
MAX_PRIM
 ? \

48 
dev
 / 
NR_PRIM_PER_DRIVE
 : \

49 (
dev
 - 
MINOR_hd1a
Ë/ 
NR_SUB_PER_DRIVE
)

	)

58 
PUBLIC
 
	$èsk_hd
()

60 
MESSAGE
 
msg
;

62 
	`öô_hd
();

65 
	`£nd_ªcv
(
RECEIVE
, 
ANY
, &
msg
);

67 
§c
 = 
msg
.
sour˚
;

69 
msg
.
ty≥
) {

70 
DEV_OPEN
:

71 
	`hd_›í
(
msg
.
DEVICE
);

74 
DEV_CLOSE
:

75 
	`hd_˛o£
(
msg
.
DEVICE
);

78 
DEV_READ
:

79 
DEV_WRITE
:

80 
	`hd_rdwt
(&
msg
);

83 
DEV_IOCTL
:

84 
	`hd_io˘l
(&
msg
);

88 
	`dump_msg
("HD drivî::unknow¿msg", &
msg
);

89 
	`•ö
("FS::main_loop (invalid msg.type)");

93 
	`£nd_ªcv
(
SEND
, 
§c
, &
msg
);

95 
	}
}

104 
PRIVATE
 
	$öô_hd
()

106 
i
;

109 
u8
 * 
pNrDrives
 = (u8*)(0x475);

110 
	`¥öé
("{HD} NrDrives:%d.\n", *
pNrDrives
);

111 
	`as£π
(*
pNrDrives
);

113 
	`put_úq_h™dÀr
(
AT_WINI_IRQ
, 
hd_h™dÀr
);

114 
	`íabÀ_úq
(
CASCADE_IRQ
);

115 
	`íabÀ_úq
(
AT_WINI_IRQ
);

117 
i
 = 0; i < ((
hd_öfo
) / (hd_info[0])); i++)

118 
	`mem£t
(&
hd_öfo
[
i
], 0, (hd_info[0]));

119 
hd_öfo
[0].
›í_˙t
 = 0;

120 
	}
}

132 
PRIVATE
 
	$hd_›í
(
devi˚
)

134 
drive
 = 
	`DRV_OF_DEV
(
devi˚
);

135 
	`as£π
(
drive
 == 0);

137 
	`hd_idítify
(
drive
);

139 i‡(
hd_öfo
[
drive
].
›í_˙t
++ == 0) {

140 
	`∑πôi⁄
(
drive
 * (
NR_PART_PER_DRIVE
 + 1), 
P_PRIMARY
);

143 
	}
}

153 
PRIVATE
 
	$hd_˛o£
(
devi˚
)

155 
drive
 = 
	`DRV_OF_DEV
(
devi˚
);

156 
	`as£π
(
drive
 == 0);

158 
hd_öfo
[
drive
].
›í_˙t
--;

159 
	}
}

170 
PRIVATE
 
	$hd_rdwt
(
MESSAGE
 * 
p
)

172 
drive
 = 
	`DRV_OF_DEV
(
p
->
DEVICE
);

174 
u64
 
pos
 = 
p
->
POSITION
;

175 
	`as£π
((
pos
 >> 
SECTOR_SIZE_SHIFT
) < (1 << 31));

180 
	`as£π
((
pos
 & 0x1FF) == 0);

182 
u32
 
£˘_ƒ
 = (u32)(
pos
 >> 
SECTOR_SIZE_SHIFT
);

183 
logidx
 = (
p
->
DEVICE
 - 
MINOR_hd1a
Ë% 
NR_SUB_PER_DRIVE
;

184 
£˘_ƒ
 +
p
->
DEVICE
 < 
MAX_PRIM
 ?

185 
hd_öfo
[
drive
].
¥im¨y
[
p
->
DEVICE
].
ba£
 :

186 
hd_öfo
[
drive
].
logiˇl
[
logidx
].
ba£
;

188 
hd_cmd
 
cmd
;

189 
cmd
.
„©uªs
 = 0;

190 
cmd
.
cou¡
 = (
p
->
CNT
 + 
SECTOR_SIZE
 - 1) / SECTOR_SIZE;

191 
cmd
.
lba_low
 = 
£˘_ƒ
 & 0xFF;

192 
cmd
.
lba_mid
 = (
£˘_ƒ
 >> 8) & 0xFF;

193 
cmd
.
lba_high
 = (
£˘_ƒ
 >> 16) & 0xFF;

194 
cmd
.
devi˚
 = 
	`MAKE_DEVICE_REG
(1, 
drive
, (
£˘_ƒ
 >> 24) & 0xF);

195 
cmd
.
comm™d
 = (
p
->
ty≥
 =
DEV_READ
Ë? 
ATA_READ
 : 
ATA_WRITE
;

196 
	`hd_cmd_out
(&
cmd
);

198 
byãs_À·
 = 
p
->
CNT
;

199 * 
œ
 = (*)
	`va2œ
(
p
->
PROC_NR
,Ö->
BUF
);

201 
byãs_À·
) {

202 
byãs
 = 
	`mö
(
SECTOR_SIZE
, 
byãs_À·
);

203 i‡(
p
->
ty≥
 =
DEV_READ
) {

204 
	`öãºu±_waô
();

205 
	`p‹t_ªad
(
REG_DATA
, 
hdbuf
, 
SECTOR_SIZE
);

206 
	`vîify_¨ó
((
u32
)
œ
, 
byãs
);

207 
	`phys_c›y
(
œ
, (*)
	`va2œ
(
TASK_HD
, 
hdbuf
), 
byãs
);

210 i‡(!
	`waôf‹
(
STATUS_DRQ
, STATUS_DRQ, 
HD_TIMEOUT
))

211 
	`∑nic
("hd writingÉrror.");

213 
	`p‹t_wrôe
(
REG_DATA
, 
œ
, 
byãs
);

214 
	`öãºu±_waô
();

216 
byãs_À·
 -
SECTOR_SIZE
;

217 
œ
 +
SECTOR_SIZE
;

219 
	}
}

230 
PRIVATE
 
	$hd_io˘l
(
MESSAGE
 * 
p
)

232 
devi˚
 = 
p
->
DEVICE
;

233 
drive
 = 
	`DRV_OF_DEV
(
devi˚
);

235 
hd_öfo
 * 
hdi
 = &hd_öfo[
drive
];

237 i‡(
p
->
REQUEST
 =
DIOCTL_GET_GEO
) {

238 * 
d°
 = 
	`va2œ
(
p
->
PROC_NR
,Ö->
BUF
);

239 * 
§c
 = 
	`va2œ
(
TASK_HD
,

240 
devi˚
 < 
MAX_PRIM
 ?

241 &
hdi
->
¥im¨y
[
devi˚
] :

242 &
hdi
->
logiˇl
[(
devi˚
 - 
MINOR_hd1a
) %

243 
NR_SUB_PER_DRIVE
]);

245 
	`vîify_¨ó
((
u32
)
d°
, ()(
∑π_öfo
));

246 
	`phys_c›y
(
d°
, 
§c
, (
∑π_öfo
));

249 
	`as£π
(0);

251 
	}
}

263 
PRIVATE
 
	$gë_∑π_èbÀ
(
drive
, 
£˘_ƒ
, 
∑π_ít
 * 
íåy
)

265 
hd_cmd
 
cmd
;

266 
cmd
.
„©uªs
 = 0;

267 
cmd
.
cou¡
 = 1;

268 
cmd
.
lba_low
 = 
£˘_ƒ
 & 0xFF;

269 
cmd
.
lba_mid
 = (
£˘_ƒ
 >> 8) & 0xFF;

270 
cmd
.
lba_high
 = (
£˘_ƒ
 >> 16) & 0xFF;

271 
cmd
.
devi˚
 = 
	`MAKE_DEVICE_REG
(1,

272 
drive
,

273 (
£˘_ƒ
 >> 24) & 0xF);

274 
cmd
.
comm™d
 = 
ATA_READ
;

275 
	`hd_cmd_out
(&
cmd
);

276 
	`öãºu±_waô
();

278 
	`p‹t_ªad
(
REG_DATA
, 
hdbuf
, 
SECTOR_SIZE
);

279 
	`mem˝y
(
íåy
,

280 
hdbuf
 + 
PARTITION_TABLE_OFFSET
,

281 (
∑π_ít
Ë* 
NR_PART_PER_DRIVE
);

282 
	}
}

294 
PRIVATE
 
	$∑πôi⁄
(
devi˚
, 
°yÀ
)

296 
i
;

297 
drive
 = 
	`DRV_OF_DEV
(
devi˚
);

298 
hd_öfo
 * 
hdi
 = &hd_öfo[
drive
];

300 
∑π_ít
 
∑π_tbl
[
NR_SUB_PER_DRIVE
];

302 i‡(
°yÀ
 =
P_PRIMARY
) {

303 
	`gë_∑π_èbÀ
(
drive
, drive, 
∑π_tbl
);

305 
ƒ_¥im_∑πs
 = 0;

306 
i
 = 0; i < 
NR_PART_PER_DRIVE
; i++) {

307 i‡(
∑π_tbl
[
i
].
sys_id
 =
NO_PART
)

310 
ƒ_¥im_∑πs
++;

311 
dev_ƒ
 = 
i
 + 1;

312 
hdi
->
¥im¨y
[
dev_ƒ
].
ba£
 = 
∑π_tbl
[
i
].
°¨t_£˘
;

313 
hdi
->
¥im¨y
[
dev_ƒ
].
size
 = 
∑π_tbl
[
i
].
ƒ_£˘s
;

315 i‡(
∑π_tbl
[
i
].
sys_id
 =
EXT_PART
)

316 
	`∑πôi⁄
(
devi˚
 + 
dev_ƒ
, 
P_EXTENDED
);

318 
	`as£π
(
ƒ_¥im_∑πs
 != 0);

320 i‡(
°yÀ
 =
P_EXTENDED
) {

321 
j
 = 
devi˚
 % 
NR_PRIM_PER_DRIVE
;

322 
ext_°¨t_£˘
 = 
hdi
->
¥im¨y
[
j
].
ba£
;

323 
s
 = 
ext_°¨t_£˘
;

324 
ƒ_1°_sub
 = (
j
 - 1Ë* 
NR_SUB_PER_PART
;

326 
i
 = 0; i < 
NR_SUB_PER_PART
; i++) {

327 
dev_ƒ
 = 
ƒ_1°_sub
 + 
i
;

329 
	`gë_∑π_èbÀ
(
drive
, 
s
, 
∑π_tbl
);

331 
hdi
->
logiˇl
[
dev_ƒ
].
ba£
 = 
s
 + 
∑π_tbl
[0].
°¨t_£˘
;

332 
hdi
->
logiˇl
[
dev_ƒ
].
size
 = 
∑π_tbl
[0].
ƒ_£˘s
;

334 
s
 = 
ext_°¨t_£˘
 + 
∑π_tbl
[1].
°¨t_£˘
;

338 i‡(
∑π_tbl
[1].
sys_id
 =
NO_PART
)

343 
	`as£π
(0);

345 
	}
}

388 
PRIVATE
 
	$hd_idítify
(
drive
)

390 
hd_cmd
 
cmd
;

391 
cmd
.
devi˚
 = 
	`MAKE_DEVICE_REG
(0, 
drive
, 0);

392 
cmd
.
comm™d
 = 
ATA_IDENTIFY
;

393 
	`hd_cmd_out
(&
cmd
);

394 
	`öãºu±_waô
();

395 
	`p‹t_ªad
(
REG_DATA
, 
hdbuf
, 
SECTOR_SIZE
);

397 
	`¥öt_idítify_öfo
((
u16
*)
hdbuf
);

399 
u16
* 
hdöfo
 = (u16*)
hdbuf
;

401 
hd_öfo
[
drive
].
¥im¨y
[0].
ba£
 = 0;

403 
hd_öfo
[
drive
].
¥im¨y
[0].
size
 = (()
hdöfo
[61] << 16) + hdinfo[60];

404 
	}
}

414 
PRIVATE
 
	$¥öt_idítify_öfo
(
u16
* 
hdöfo
)

416 
i
, 
k
;

417 
s
[64];

419 
	sidí_öfo_ascii
 {

420 
idx
;

421 
Àn
;

422 * 
desc
;

423 } 
iöfo
[] = {{10, 20, "HD SN"},

426 
k
 = 0; k < (
iöfo
)/(iinfo[0]); k++) {

427 * 
p
 = (*)&
hdöfo
[
iöfo
[
k
].
idx
];

428 
i
 = 0; i < 
iöfo
[
k
].
Àn
/2; i++) {

429 
s
[
i
*2+1] = *
p
++;

430 
s
[
i
*2] = *
p
++;

432 
s
[
i
*2] = 0;

433 
	`¥öé
("{HD} %s: %s\n", 
iöfo
[
k
].
desc
, 
s
);

436 
ˇ∑bûôõs
 = 
hdöfo
[49];

437 
	`¥öé
("{HD} LBA supported: %s\n",

438 (
ˇ∑bûôõs
 & 0x0200) ? "Yes" : "No");

440 
cmd_£t_suµ‹ãd
 = 
hdöfo
[83];

441 
	`¥öé
("{HD} LBA48 supported: %s\n",

442 (
cmd_£t_suµ‹ãd
 & 0x0400) ? "Yes" : "No");

444 
£˘‹s
 = (()
hdöfo
[61] << 16) + hdinfo[60];

445 
	`¥öé
("{HD} HD size: %dMB\n", 
£˘‹s
 * 512 / 1000000);

446 
	}
}

456 
PRIVATE
 
	$hd_cmd_out
(
hd_cmd
* 
cmd
)

462 i‡(!
	`waôf‹
(
STATUS_BSY
, 0, 
HD_TIMEOUT
))

463 
	`∑nic
("hdÉrror.");

466 
	`out_byã
(
REG_DEV_CTRL
, 0);

468 
	`out_byã
(
REG_FEATURES
, 
cmd
->
„©uªs
);

469 
	`out_byã
(
REG_NSECTOR
, 
cmd
->
cou¡
);

470 
	`out_byã
(
REG_LBA_LOW
, 
cmd
->
lba_low
);

471 
	`out_byã
(
REG_LBA_MID
, 
cmd
->
lba_mid
);

472 
	`out_byã
(
REG_LBA_HIGH
, 
cmd
->
lba_high
);

473 
	`out_byã
(
REG_DEVICE
, 
cmd
->
devi˚
);

475 
	`out_byã
(
REG_CMD
, 
cmd
->
comm™d
);

476 
	}
}

485 
PRIVATE
 
	$öãºu±_waô
()

487 
MESSAGE
 
msg
;

488 
	`£nd_ªcv
(
RECEIVE
, 
INTERRUPT
, &
msg
);

489 
	}
}

503 
PRIVATE
 
	$waôf‹
(
mask
, 
vÆ
, 
timeout
)

505 
t
 = 
	`gë_ticks
();

507 ((
	`gë_ticks
(Ë- 
t
Ë* 1000 / 
HZ
Ë< 
timeout
)

508 i‡((
	`ö_byã
(
REG_STATUS
Ë& 
mask
Ë=
vÆ
)

512 
	}
}

522 
PUBLIC
 
	$hd_h™dÀr
(
úq
)

530 
hd_°©us
 = 
	`ö_byã
(
REG_STATUS
);

532 
	`öf‹m_öt
(
TASK_HD
);

533 
	}
}

	@kernel/i8259.c

9 
	~"ty≥.h
"

10 
	~"°dio.h
"

11 
	~"c⁄°.h
"

12 
	~"¥Ÿe˘.h
"

13 
	~"¥oc.h
"

14 
	~"fs.h
"

15 
	~"mm.h
"

16 
	~"dúít.h
"

17 
	~"uni°d.h
"

18 
	~"°dlib.h
"

19 
	~"ây.h
"

20 
	~"c⁄sﬁe.h
"

21 
	~"globÆ.h
"

22 
	~"¥Ÿo.h
"

28 
PUBLIC
 
	$öô_8259A
()

30 
	`out_byã
(
INT_M_CTL
, 0x11);

31 
	`out_byã
(
INT_S_CTL
, 0x11);

32 
	`out_byã
(
INT_M_CTLMASK
, 
INT_VECTOR_IRQ0
);

33 
	`out_byã
(
INT_S_CTLMASK
, 
INT_VECTOR_IRQ8
);

34 
	`out_byã
(
INT_M_CTLMASK
, 0x4);

35 
	`out_byã
(
INT_S_CTLMASK
, 0x2);

36 
	`out_byã
(
INT_M_CTLMASK
, 0x1);

37 
	`out_byã
(
INT_S_CTLMASK
, 0x1);

39 
	`out_byã
(
INT_M_CTLMASK
, 0xFF);

40 
	`out_byã
(
INT_S_CTLMASK
, 0xFF);

42 
i
;

43 
i
 = 0; i < 
NR_IRQ
; i++) {

44 
úq_èbÀ
[
i
] = 
•urious_úq
;

46 
	}
}

51 
PUBLIC
 
	$•urious_úq
(
úq
)

53 
	`di•_°r
("spurious_irq: ");

54 
	`di•_öt
(
úq
);

55 
	`di•_°r
("\n");

56 
	}
}

61 
PUBLIC
 
	$put_úq_h™dÀr
(
úq
, 
úq_h™dÀr
 
h™dÀr
)

63 
	`dißbÀ_úq
(
úq
);

64 
úq_èbÀ
[
úq
] = 
h™dÀr
;

65 
	}
}

	@kernel/keyboard.c

13 
	~"ty≥.h
"

14 
	~"°dio.h
"

15 
	~"c⁄°.h
"

16 
	~"¥Ÿe˘.h
"

17 
	~"°rög.h
"

18 
	~"fs.h
"

19 
	~"mm.h
"

20 
	~"dúít.h
"

21 
	~"uni°d.h
"

22 
	~"°dlib.h
"

23 
	~"¥oc.h
"

24 
	~"ây.h
"

25 
	~"c⁄sﬁe.h
"

26 
	~"globÆ.h
"

27 
	~"keybﬂrd.h
"

28 
	~"keym≠.h
"

29 
	~"¥Ÿo.h
"

31 
PRIVATE
 
kb_öbuf
 
	gkb_ö
;

32 
PRIVATE
 
	gcode_wôh_E0
;

33 
PRIVATE
 
	gshi·_l
;

34 
PRIVATE
 
	gshi·_r
;

35 
PRIVATE
 
	gÆt_l
;

36 
PRIVATE
 
	gÆt_r
;

37 
PRIVATE
 
	g˘æ_l
;

38 
PRIVATE
 
	g˘æ_r
;

39 
PRIVATE
 
	gˇps_lock
;

40 
PRIVATE
 
	gnum_lock
;

41 
PRIVATE
 
	gs¸ﬁl_lock
;

42 
PRIVATE
 
	gcﬁumn
;

44 
PRIVATE
 
u8
 
gë_byã_‰om_kb_buf
();

45 
PRIVATE
 
£t_Àds
();

46 
PRIVATE
 
kb_waô
();

47 
PRIVATE
 
kb_ack
();

58 
PUBLIC
 
	$keybﬂrd_h™dÀr
(
úq
)

60 
u8
 
sˇn_code
 = 
	`ö_byã
(
KB_DATA
);

62 i‡(
kb_ö
.
cou¡
 < 
KB_IN_BYTES
) {

63 *(
kb_ö
.
p_hód
Ë
sˇn_code
;

64 
kb_ö
.
p_hód
++;

65 i‡(
kb_ö
.
p_hód
 =kb_ö.
buf
 + 
KB_IN_BYTES
)

66 
kb_ö
.
p_hód
 = kb_ö.
buf
;

67 
kb_ö
.
cou¡
++;

70 
key_¥es£d
 = 1;

71 
	}
}

81 
PUBLIC
 
	$öô_keybﬂrd
()

83 
kb_ö
.
cou¡
 = 0;

84 
kb_ö
.
p_hód
 = kb_ö.
p_èû
 = kb_ö.
buf
;

86 
shi·_l
 = 
shi·_r
 = 0;

87 
Æt_l
 = 
Æt_r
 = 0;

88 
˘æ_l
 = 
˘æ_r
 = 0;

90 
ˇps_lock
 = 0;

91 
num_lock
 = 1;

92 
s¸ﬁl_lock
 = 0;

94 
cﬁumn
 = 0;

96 
	`£t_Àds
();

98 
	`put_úq_h™dÀr
(
KEYBOARD_IRQ
, 
keybﬂrd_h™dÀr
);

99 
	`íabÀ_úq
(
KEYBOARD_IRQ
);

100 
	}
}

111 
PUBLIC
 
	$keybﬂrd_ªad
(
TTY
* 
ây
)

113 
u8
 
sˇn_code
;

119 
make
;

126 
u32
 
key
 = 0;

133 
u32
* 
keyrow
;

135 
kb_ö
.
cou¡
 > 0) {

136 
code_wôh_E0
 = 0;

137 
sˇn_code
 = 
	`gë_byã_‰om_kb_buf
();

140 i‡(
sˇn_code
 == 0xE1) {

141 
i
;

142 
u8
 
∑u£bªak_sˇn_code
[] = {0xE1, 0x1D, 0x45, 0xE1, 0x9D, 0xC5};

143 
is_∑u£bªak
 = 1;

144 
i
 = 1; i < 6; i++) {

145 i‡(
	`gë_byã_‰om_kb_buf
(Ë!
∑u£bªak_sˇn_code
[
i
]) {

146 
is_∑u£bªak
 = 0;

150 i‡(
is_∑u£bªak
) {

151 
key
 = 
PAUSEBREAK
;

154 i‡(
sˇn_code
 == 0xE0) {

155 
code_wôh_E0
 = 1;

156 
sˇn_code
 = 
	`gë_byã_‰om_kb_buf
();

159 i‡(
sˇn_code
 == 0x2A) {

160 
code_wôh_E0
 = 0;

161 i‡((
sˇn_code
 = 
	`gë_byã_‰om_kb_buf
()) == 0xE0) {

162 
code_wôh_E0
 = 1;

163 i‡((
sˇn_code
 = 
	`gë_byã_‰om_kb_buf
()) == 0x37) {

164 
key
 = 
PRINTSCREEN
;

165 
make
 = 1;

170 i‡(
sˇn_code
 == 0xB7) {

171 
code_wôh_E0
 = 0;

172 i‡((
sˇn_code
 = 
	`gë_byã_‰om_kb_buf
()) == 0xE0) {

173 
code_wôh_E0
 = 1;

174 i‡((
sˇn_code
 = 
	`gë_byã_‰om_kb_buf
()) == 0xAA) {

175 
key
 = 
PRINTSCREEN
;

176 
make
 = 0;

182 i‡((
key
 !
PAUSEBREAK
Ë&& (key !
PRINTSCREEN
)) {

183 
ˇps
;

186 
make
 = (
sˇn_code
 & 
FLAG_BREAK
 ? 0 : 1);

188 
keyrow
 = &
keym≠
[(
sˇn_code
 & 0x7FË* 
MAP_COLS
];

190 
cﬁumn
 = 0;

192 
ˇps
 = 
shi·_l
 || 
shi·_r
;

193 i‡(
ˇps_lock
 &&

194 
keyrow
[0] >= 'a' && keyrow[0] <= 'z')

195 
ˇps
 = !caps;

197 i‡(
ˇps
)

198 
cﬁumn
 = 1;

200 i‡(
code_wôh_E0
)

201 
cﬁumn
 = 2;

203 
key
 = 
keyrow
[
cﬁumn
];

205 
key
) {

206 
SHIFT_L
:

207 
shi·_l
 = 
make
;

209 
SHIFT_R
:

210 
shi·_r
 = 
make
;

212 
CTRL_L
:

213 
˘æ_l
 = 
make
;

215 
CTRL_R
:

216 
˘æ_r
 = 
make
;

218 
ALT_L
:

219 
Æt_l
 = 
make
;

221 
ALT_R
:

222 
Æt_l
 = 
make
;

224 
CAPS_LOCK
:

225 i‡(
make
) {

226 
ˇps_lock
 = !caps_lock;

227 
	`£t_Àds
();

230 
NUM_LOCK
:

231 i‡(
make
) {

232 
num_lock
 = !num_lock;

233 
	`£t_Àds
();

236 
SCROLL_LOCK
:

237 i‡(
make
) {

238 
s¸ﬁl_lock
 = !scroll_lock;

239 
	`£t_Àds
();

247 if(
make
){

248 
∑d
 = 0;

251 i‡((
key
 >
PAD_SLASH
Ë&& (key <
PAD_9
)) {

252 
∑d
 = 1;

253 
key
) {

256 
PAD_SLASH
:

257 
key
 = '/';

259 
PAD_STAR
:

260 
key
 = '*';

262 
PAD_MINUS
:

263 
key
 = '-';

265 
PAD_PLUS
:

266 
key
 = '+';

268 
PAD_ENTER
:

269 
key
 = 
ENTER
;

275 i‡(
num_lock
) {

276 i‡(
key
 >
PAD_0
 && key <
PAD_9
)

277 
key
 = key - 
PAD_0
 + '0';

278 i‡(
key
 =
PAD_DOT
)

279 
key
 = '.';

282 
key
) {

283 
PAD_HOME
:

284 
key
 = 
HOME
;

286 
PAD_END
:

287 
key
 = 
END
;

289 
PAD_PAGEUP
:

290 
key
 = 
PAGEUP
;

292 
PAD_PAGEDOWN
:

293 
key
 = 
PAGEDOWN
;

295 
PAD_INS
:

296 
key
 = 
INSERT
;

298 
PAD_UP
:

299 
key
 = 
UP
;

301 
PAD_DOWN
:

302 
key
 = 
DOWN
;

304 
PAD_LEFT
:

305 
key
 = 
LEFT
;

307 
PAD_RIGHT
:

308 
key
 = 
RIGHT
;

310 
PAD_DOT
:

311 
key
 = 
DELETE
;

320 
key
 |
shi·_l
 ? 
FLAG_SHIFT_L
 : 0;

321 
key
 |
shi·_r
 ? 
FLAG_SHIFT_R
 : 0;

322 
key
 |
˘æ_l
 ? 
FLAG_CTRL_L
 : 0;

323 
key
 |
˘æ_r
 ? 
FLAG_CTRL_R
 : 0;

324 
key
 |
Æt_l
 ? 
FLAG_ALT_L
 : 0;

325 
key
 |
Æt_r
 ? 
FLAG_ALT_R
 : 0;

326 
key
 |
∑d
 ? 
FLAG_PAD
 : 0;

328 
	`ö_¥o˚ss
(
ây
, 
key
);

331 
	}
}

342 
PRIVATE
 
u8
 
	$gë_byã_‰om_kb_buf
()

344 
u8
 
sˇn_code
;

346 
kb_ö
.
cou¡
 <= 0) {}

348 
	`dißbÀ_öt
();

349 
sˇn_code
 = *(
kb_ö
.
p_èû
);

350 
kb_ö
.
p_èû
++;

351 i‡(
kb_ö
.
p_èû
 =kb_ö.
buf
 + 
KB_IN_BYTES
) {

352 
kb_ö
.
p_èû
 = kb_ö.
buf
;

354 
kb_ö
.
cou¡
--;

355 
	`íabÀ_öt
();

357  
sˇn_code
;

358 
	}
}

368 
PRIVATE
 
	$kb_waô
()

370 
u8
 
kb_°©
;

373 
kb_°©
 = 
	`ö_byã
(
KB_CMD
);

374 } 
kb_°©
 & 0x02);

375 
	}
}

385 
PRIVATE
 
	$kb_ack
()

387 
u8
 
kb_ªad
;

390 
kb_ªad
 = 
	`ö_byã
(
KB_DATA
);

391 } 
kb_ªad
 !
KB_ACK
);

392 
	}
}

402 
PRIVATE
 
	$£t_Àds
()

404 
u8
 
Àds
 = (
ˇps_lock
 << 2Ë| (
num_lock
 << 1Ë| 
s¸ﬁl_lock
;

406 
	`kb_waô
();

407 
	`out_byã
(
KB_DATA
, 
LED_CODE
);

408 
	`kb_ack
();

410 
	`kb_waô
();

411 
	`out_byã
(
KB_DATA
, 
Àds
);

412 
	`kb_ack
();

413 
	}
}

	@kernel/klib.c

10 
	~"ty≥.h
"

11 
	~"c⁄fig.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"¥Ÿo.h
"

28 
	~"ñf.h
"

40 
PUBLIC
 
	$gë_boŸ_∑øms
(
boŸ_∑øms
 * 
pbp
)

46 * 
p
 = (*)
BOOT_PARAM_ADDR
;

47 
	`as£π
(
p
[
BI_MAG
] =
BOOT_PARAM_MAGIC
);

49 
pbp
->
mem_size
 = 
p
[
BI_MEM_SIZE
];

50 
pbp
->
kî√l_fûe
 = (*)(
p
[
BI_KERNEL_FILE
]);

56 
	`as£π
(
	`memcmp
(
pbp
->
kî√l_fûe
, 
ELFMAG
, 
SELFMAG
) == 0);

57 
	}
}

72 
PUBLIC
 
	$gë_kî√l_m≠
(* 
b
, * 
l
)

74 
boŸ_∑øms
 
bp
;

75 
	`gë_boŸ_∑øms
(&
bp
);

77 
Elf32_Ehdr
* 
ñf_hódî
 = (Elf32_Ehdr*)(
bp
.
kî√l_fûe
);

80 i‡(
	`memcmp
(
ñf_hódî
->
e_idít
, 
ELFMAG
, 
SELFMAG
) != 0)

83 *
b
 = ~0;

84 
t
 = 0;

85 
i
;

86 
i
 = 0; i < 
ñf_hódî
->
e_shnum
; i++) {

87 
Elf32_Shdr
* 
£˘i⁄_hódî
 =

88 (
Elf32_Shdr
*)(
bp
.
kî√l_fûe
 +

89 
ñf_hódî
->
e_shoff
 +

90 
i
 * 
ñf_hódî
->
e_shítsize
);

91 i‡(
£˘i⁄_hódî
->
sh_Êags
 & 
SHF_ALLOC
) {

92 
bŸtom
 = 
£˘i⁄_hódî
->
sh_addr
;

93 
t›
 = 
£˘i⁄_hódî
->
sh_addr
 +

94 
£˘i⁄_hódî
->
sh_size
;

96 i‡(*
b
 > 
bŸtom
)

97 *
b
 = 
bŸtom
;

98 i‡(
t
 < 
t›
)

99 
t
 = 
t›
;

102 
	`as£π
(*
b
 < 
t
);

103 *
l
 = 
t
 - *
b
 - 1;

106 
	}
}

111 
PUBLIC
 * 
	$ôﬂ
(* 
°r
, 
num
)

113 * 
p
 = 
°r
;

114 
ch
;

115 
i
;

116 
Êag
 = 0;

118 *
p
++ = '0';

119 *
p
++ = 'x';

121 if(
num
 == 0){

122 *
p
++ = '0';

125 
i
=28;i>=0;i-=4){

126 
ch
 = (
num
 >> 
i
) & 0xF;

127 if(
Êag
 || (
ch
 > 0)){

128 
Êag
 = 1;

129 
ch
 += '0';

130 if(
ch
 > '9'){

131 
ch
 += 7;

133 *
p
++ = 
ch
;

138 *
p
 = 0;

140  
°r
;

141 
	}
}

147 
PUBLIC
 
	$di•_öt
(
öput
)

149 
ouçut
[16];

150 
	`ôﬂ
(
ouçut
, 
öput
);

151 
	`di•_°r
(
ouçut
);

152 
	}
}

157 
PUBLIC
 
	$dñay
(
time
)

159 
i
, 
j
, 
k
;

160 
k
=0;k<
time
;k++){

162 
i
=0;i<10;i++){

163 
j
=0;j<10000;j++){}

166 
	}
}

	@kernel/main.c

8 
	~"ty≥.h
"

9 
	~"°dio.h
"

10 
	~"c⁄°.h
"

11 
	~"¥Ÿe˘.h
"

12 
	~"°rög.h
"

13 
	~"fs.h
"

14 
	~"mm.h
"

15 
	~"dúít.h
"

16 
	~"uni°d.h
"

17 
	~"°dlib.h
"

18 
	~"¥oc.h
"

19 
	~"ây.h
"

20 
	~"c⁄sﬁe.h
"

21 
	~"globÆ.h
"

22 
	~"¥Ÿo.h
"

32 
PUBLIC
 
	$kî√l_maö
()

34 
	`di•_°r
("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

36 
i
, 
j
, 
eÊags
, 
¥io
;

37 
u8
 
Ωl
;

38 
u8
 
¥iv
;

40 
èsk
 * 
t
;

41 
¥oc
 * 
p
 = 
¥oc_èbÀ
;

43 * 
°k
 = 
èsk_°ack
 + 
STACK_SIZE_TOTAL
;

45 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++,
p
++,
t
++) {

46 i‡(
i
 >
NR_TASKS
 + 
NR_NATIVE_PROCS
) {

47 
p
->
p_Êags
 = 
FREE_SLOT
;

51 i‡(
i
 < 
NR_TASKS
) {

52 
t
 = 
èsk_èbÀ
 + 
i
;

53 
¥iv
 = 
PRIVILEGE_TASK
;

54 
Ωl
 = 
RPL_TASK
;

55 
eÊags
 = 0x1202;

56 
¥io
 = 15;

59 
t
 = 
u£r_¥oc_èbÀ
 + (
i
 - 
NR_TASKS
);

60 
¥iv
 = 
PRIVILEGE_USER
;

61 
Ωl
 = 
RPL_USER
;

62 
eÊags
 = 0x202;

63 
¥io
 = 5;

66 
	`°r˝y
(
p
->
«me
, 
t
->name);

67 
p
->
p_∑ª¡
 = 
NO_TASK
;

69 i‡(
	`°rcmp
(
t
->
«me
, "INIT") != 0) {

70 
p
->
ldts
[
INDEX_LDT_C
] = 
gdt
[
SELECTOR_KERNEL_CS
 >> 3];

71 
p
->
ldts
[
INDEX_LDT_RW
] = 
gdt
[
SELECTOR_KERNEL_DS
 >> 3];

74 
p
->
ldts
[
INDEX_LDT_C
].
©å1
 = 
DA_C
 | 
¥iv
 << 5;

75 
p
->
ldts
[
INDEX_LDT_RW
].
©å1
 = 
DA_DRW
 | 
¥iv
 << 5;

78 
k_ba£
;

79 
k_limô
;

80 
ªt
 = 
	`gë_kî√l_m≠
(&
k_ba£
, &
k_limô
);

81 
	`as£π
(
ªt
 == 0);

82 
	`öô_desc
(&
p
->
ldts
[
INDEX_LDT_C
],

87 (
k_ba£
 + 
k_limô
Ë>> 
LIMIT_4K_SHIFT
,

88 
DA_32
 | 
DA_LIMIT_4K
 | 
DA_C
 | 
¥iv
 << 5);

90 
	`öô_desc
(&
p
->
ldts
[
INDEX_LDT_RW
],

95 (
k_ba£
 + 
k_limô
Ë>> 
LIMIT_4K_SHIFT
,

96 
DA_32
 | 
DA_LIMIT_4K
 | 
DA_DRW
 | 
¥iv
 << 5);

99 
p
->
ªgs
.
cs
 = 
INDEX_LDT_C
 << 3 | 
SA_TIL
 | 
Ωl
;

100 
p
->
ªgs
.
ds
 =

101 
p
->
ªgs
.
es
 =

102 
p
->
ªgs
.
fs
 =

103 
p
->
ªgs
.
ss
 = 
INDEX_LDT_RW
 << 3 | 
SA_TIL
 | 
Ωl
;

104 
p
->
ªgs
.
gs
 = (
SELECTOR_KERNEL_GS
 & 
SA_RPL_MASK
Ë| 
Ωl
;

105 
p
->
ªgs
.
eù
 = (
u32
)
t
->
öôül_eù
;

106 
p
->
ªgs
.
e•
 = (
u32
)
°k
;

107 
p
->
ªgs
.
eÊags
 =Éflags;

109 
p
->
ticks
 =Ö->
¥i‹ôy
 = 
¥io
;

111 
p
->
p_Êags
 = 0;

112 
p
->
p_msg
 = 0;

113 
p
->
p_ªcv‰om
 = 
NO_TASK
;

114 
p
->
p_£ndto
 = 
NO_TASK
;

115 
p
->
has_öt_msg
 = 0;

116 
p
->
q_£ndög
 = 0;

117 
p
->
√xt_£ndög
 = 0;

119 
j
 = 0; j < 
NR_FILES
; j++)

120 
p
->
fûp
[
j
] = 0;

122 
°k
 -
t
->
°acksize
;

125 
k_ªíãr
 = 0;

126 
ticks
 = 0;

128 
p_¥oc_ªady
 = 
¥oc_èbÀ
;

130 
	`öô_˛ock
();

131 
	`öô_keybﬂrd
();

133 
	`ª°¨t
();

136 
	}
}

142 
PUBLIC
 
	$gë_ticks
()

144 
MESSAGE
 
msg
;

145 
	`ª£t_msg
(&
msg
);

146 
msg
.
ty≥
 = 
GET_TICKS
;

147 
	`£nd_ªcv
(
BOTH
, 
TASK_SYS
, &
msg
);

148  
msg
.
RETVAL
;

149 
	}
}

156 
	sposix_èr_hódî


158 
	m«me
[100];

159 
	mmode
[8];

160 
	muid
[8];

161 
	mgid
[8];

162 
	msize
[12];

163 
	mmtime
[12];

164 
	mchksum
[8];

165 
	mty≥Êag
;

166 
	mlök«me
[100];

167 
	mmagic
[6];

168 
	mvîsi⁄
[2];

169 
	mu«me
[32];

170 
	mg«me
[32];

171 
	mdevmaj‹
[8];

172 
	mdevmö‹
[8];

173 
	m¥efix
[155];

185 
	$u¡¨
(c⁄° * 
fûíame
)

187 
	`¥ötf
("[exåa˘ `%s'\n", 
fûíame
);

188 
fd
 = 
	`›í
(
fûíame
, 
O_RDWR
);

189 
	`as£π
(
fd
 != -1);

191 
buf
[
SECTOR_SIZE
 * 16];

192 
chunk
 = (
buf
);

193 
i
 = 0;

194 
byãs
 = 0;

197 
byãs
 = 
	`ªad
(
fd
, 
buf
, 
SECTOR_SIZE
);

198 
	`as£π
(
byãs
 =
SECTOR_SIZE
);

201 i‡(
buf
[0] == 0) {

202 i‡(
i
 == 0)

203 
	`¥ötf
("ÇeedÇot unpackÅhe file.\n");

206 
i
++;

208 
posix_èr_hódî
 * 
phdr
 = (posix_èr_hódî *)
buf
;

211 * 
p
 = 
phdr
->
size
;

212 
f_Àn
 = 0;

213 *
p
)

214 
f_Àn
 = (f_À¿* 8Ë+ (*
p
++ - '0');

216 
byãs_À·
 = 
f_Àn
;

217 
fdout
 = 
	`›í
(
phdr
->
«me
, 
O_CREAT
 | 
O_RDWR
 | 
O_TRUNC
);

218 i‡(
fdout
 == -1) {

219 
	`¥ötf
(" faûedÅÿexåa˘ fûe: %s\n", 
phdr
->
«me
);

220 
	`¥ötf
("áborted]\n");

221 
	`˛o£
(
fd
);

224 
	`¥ötf
(" %s\n", 
phdr
->
«me
);

225 
byãs_À·
) {

226 
iobyãs
 = 
	`mö
(
chunk
, 
byãs_À·
);

227 
	`ªad
(
fd
, 
buf
,

228 ((
iobyãs
 - 1Ë/ 
SECTOR_SIZE
 + 1) * SECTOR_SIZE);

229 
byãs
 = 
	`wrôe
(
fdout
, 
buf
, 
iobyãs
);

230 
	`as£π
(
byãs
 =
iobyãs
);

231 
byãs_À·
 -
iobyãs
;

233 
	`˛o£
(
fdout
);

236 i‡(
i
) {

237 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

238 
buf
[0] = 0;

239 
byãs
 = 
	`wrôe
(
fd
, 
buf
, 1);

240 
	`as£π
(
byãs
 == 1);

243 
	`˛o£
(
fd
);

245 
	`¥ötf
(" d⁄e, %d fûe†exåa˘ed]\n", 
i
);

246 
	}
}

256 
	$shabby_shñl
(c⁄° * 
ây_«me
)

258 
fd_°dö
 = 
	`›í
(
ây_«me
, 
O_RDWR
);

259 
	`as£π
(
fd_°dö
 == 0);

260 
fd_°dout
 = 
	`›í
(
ây_«me
, 
O_RDWR
);

261 
	`as£π
(
fd_°dout
 == 1);

263 
rdbuf
[128];

266 
	`wrôe
(1, "$ ", 2);

267 
r
 = 
	`ªad
(0, 
rdbuf
, 70);

268 
rdbuf
[
r
] = 0;

270 
¨gc
 = 0;

271 * 
¨gv
[
PROC_ORIGIN_STACK
];

272 * 
p
 = 
rdbuf
;

273 * 
s
;

274 
w‹d
 = 0;

275 
ch
;

277 
ch
 = *
p
;

278 i‡(*
p
 !' ' && *∞!0 && !
w‹d
) {

279 
s
 = 
p
;

280 
w‹d
 = 1;

282 i‡((*
p
 =' ' || *∞=0Ë&& 
w‹d
) {

283 
w‹d
 = 0;

284 
¨gv
[
¨gc
++] = 
s
;

285 *
p
 = 0;

287 
p
++;

288 } 
ch
);

289 
¨gv
[
¨gc
] = 0;

291 i‡(0 =
	`°rcmp
("cd", 
¨gv
[0])) {

293 i‡(
¨gc
 < 2) {

294 
	`chdú
("/");

296 
	`chdú
(
¨gv
[1]);

298 
fd
 = 
	`›í
(
¨gv
[0], 
O_RDWR
);

299 i‡(
fd
 == -1) {

300 i‡(
rdbuf
[0]) {

301 
	`wrôe
(1, "{", 1);

302 
	`wrôe
(1, 
rdbuf
, 
r
);

303 
	`wrôe
(1, "}\n", 2);

307 
	`˛o£
(
fd
);

308 
pid
 = 
	`f‹k
();

309 i‡(
pid
 != 0) {

310 
s
;

311 
	`waô
(&
s
);

314 
	`execv
(
¨gv
[0],árgv);

320 
	`˛o£
(1);

321 
	`˛o£
(0);

322 
	}
}

331 
	$Inô
()

334 
ödex
;

335 
ödex
 = 0; index < 
NR_TASKS
 + 
NR_PROCS
; index++ ) {

336 
¥oc_èbÀ
[
ödex
].
pwd
 = 
roŸ_öode
;

337 
¥oc_èbÀ
[
ödex
].
roŸ
 = 
roŸ_öode
;

338 
roŸ_öode
->
i_˙t
 += 2;

341 
fd_°dö
 = 
	`›í
("/dev_ây0", 
O_RDWR
);

342 
	`as£π
(
fd_°dö
 == 0);

343 
fd_°dout
 = 
	`›í
("/dev_ây0", 
O_RDWR
);

344 
	`as£π
(
fd_°dout
 == 1);

346 
	`¥ötf
("Init() isÑunning ...\n");

349 
	`u¡¨
("/cmd.tar");

352 * 
ây_li°
[] = {"/dev_tty0" , "/dev_tty2"};

354 
i
;

355 
i
 = 0; i < (
ây_li°
) / (tty_list[0]); i++) {

356 
pid
 = 
	`f‹k
();

357 i‡(
pid
 != 0) {

358 
	`¥ötf
("[∑ª¡ i†ru¬ög, chûdÖid:%d]\n", 
pid
);

361 
	`¥ötf
("[chûd i†ru¬ög,Öid:%d]\n", 
	`gëpid
());

363 
	`˛o£
(
fd_°dö
);

364 
	`˛o£
(
fd_°dout
);

366 
	`shabby_shñl
(
ây_li°
[
i
]);

367 
	`as£π
(0);

372 
s
;

373 
chûd
 = 
	`waô
(&
s
);

374 
	`¥ötf
("chûd (%dËexôed wôh sètus: %d.\n", 
chûd
, 
s
);

377 
	`as£π
(0);

378 
	}
}

384 
	$Te°A
()

387 
	}
}

392 
	$Te°B
()

395 
	}
}

400 
	$Te°C
()

403 
	}
}

408 
PUBLIC
 
	$∑nic
(c⁄° *
fmt
, ...)

410 
i
;

411 
buf
[256];

414 
va_li°
 
¨g
 = (va_li°)((*)&
fmt
 + 4);

416 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨g
);

418 
	`¥öé
("%¯!!∑nic!! %s", 
MAG_CH_PANIC
, 
buf
);

421 
__asm__
 
	`__vﬁ©ûe__
("ud2");

422 
	}
}

	@kernel/proc.c

8 
	~"ty≥.h
"

9 
	~"°dio.h
"

10 
	~"c⁄°.h
"

11 
	~"¥Ÿe˘.h
"

12 
	~"ây.h
"

13 
	~"c⁄sﬁe.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"globÆ.h
"

22 
	~"¥Ÿo.h
"

24 
PRIVATE
 
block
(
¥oc
* 
p
);

25 
PRIVATE
 
unblock
(
¥oc
* 
p
);

26 
PRIVATE
 
msg_£nd
(
¥oc
* 
cuºít
, 
de°
, 
MESSAGE
* 
m
);

27 
PRIVATE
 
msg_ª˚ive
(
¥oc
* 
cuºít
, 
§c
, 
MESSAGE
* 
m
);

28 
PRIVATE
 
dódlock
(
§c
, 
de°
);

37 
PUBLIC
 
	$scheduÀ
()

39 
¥oc
* 
p
;

40 
gª©e°_ticks
 = 0;

42 !
gª©e°_ticks
) {

43 
p
 = &
LAST_PROC
;Ö >&
FIRST_PROC
;Ö--) {

44 i‡(
p
->
p_Êags
 == 0) {

45 i‡(
p
->
ticks
 > 
gª©e°_ticks
) {

46 
gª©e°_ticks
 = 
p
->
ticks
;

47 
p_¥oc_ªady
 = 
p
;

52 i‡(!
gª©e°_ticks
)

53 
p
 = &
LAST_PROC
;Ö >&
FIRST_PROC
;Ö--)

54 i‡(
p
->
p_Êags
 == 0)

55 
p
->
ticks
 =Ö->
¥i‹ôy
;

57 
	}
}

72 
PUBLIC
 
	$sys_£ndªc
(
fun˘i⁄
, 
§c_de°
, 
MESSAGE
* 
m
, 
¥oc
* 
p
)

74 
	`as£π
(
k_ªíãr
 == 0);

75 
	`as£π
((
§c_de°
 >0 && src_de° < 
NR_TASKS
 + 
NR_PROCS
) ||

76 
§c_de°
 =
ANY
 ||

77 
§c_de°
 =
INTERRUPT
);

79 
ªt
 = 0;

80 
ˇŒî
 = 
	`¥oc2pid
(
p
);

81 
MESSAGE
* 
mœ
 = (MESSAGE*)
	`va2œ
(
ˇŒî
, 
m
);

82 
mœ
->
sour˚
 = 
ˇŒî
;

84 
	`as£π
(
mœ
->
sour˚
 !
§c_de°
);

92 i‡(
fun˘i⁄
 =
SEND
) {

93 
ªt
 = 
	`msg_£nd
(
p
, 
§c_de°
, 
m
);

94 i‡(
ªt
 != 0)

95  
ªt
;

97 i‡(
fun˘i⁄
 =
RECEIVE
) {

98 
ªt
 = 
	`msg_ª˚ive
(
p
, 
§c_de°
, 
m
);

99 i‡(
ªt
 != 0)

100  
ªt
;

103 
	`∑nic
("{sys_sendrec} invalid function: "

104 "%d (SEND:%d, RECEIVE:%d).", 
fun˘i⁄
, 
SEND
, 
RECEIVE
);

108 
	}
}

122 
PUBLIC
 
	$ldt_£g_löór
(
¥oc
* 
p
, 
idx
)

124 
des¸ùt‹
 * 
d
 = &
p
->
ldts
[
idx
];

126  
d
->
ba£_high
 << 24 | d->
ba£_mid
 << 16 | d->
ba£_low
;

127 
	}
}

140 
PUBLIC
 * 
	$va2œ
(
pid
, * 
va
)

142 
¥oc
* 
p
 = &
¥oc_èbÀ
[
pid
];

144 
u32
 
£g_ba£
 = 
	`ldt_£g_löór
(
p
, 
INDEX_LDT_RW
);

145 
u32
 
œ
 = 
£g_ba£
 + (u32)
va
;

147 i‡(
pid
 < 
NR_TASKS
 + 
NR_NATIVE_PROCS
) {

148 
	`as£π
(
œ
 =(
u32
)
va
);

151  (*)
œ
;

152 
	}
}

162 
PUBLIC
 
	$ª£t_msg
(
MESSAGE
* 
p
)

164 
	`mem£t
(
p
, 0, (
MESSAGE
));

165 
	}
}

179 
PRIVATE
 
	$block
(
¥oc
* 
p
)

181 
	`as£π
(
p
->
p_Êags
);

182 
	`scheduÀ
();

183 
	}
}

194 
PRIVATE
 
	$unblock
(
¥oc
* 
p
)

196 
	`as£π
(
p
->
p_Êags
 == 0);

197 
	}
}

214 
PRIVATE
 
	$dódlock
(
§c
, 
de°
)

216 
¥oc
* 
p
 = 
¥oc_èbÀ
 + 
de°
;

218 i‡(
p
->
p_Êags
 & 
SENDING
) {

219 i‡(
p
->
p_£ndto
 =
§c
) {

221 
p
 = 
¥oc_èbÀ
 + 
de°
;

222 
	`¥öé
("=_=%s", 
p
->
«me
);

224 
	`as£π
(
p
->
p_msg
);

225 
p
 = 
¥oc_èbÀ
 +Ö->
p_£ndto
;

226 
	`¥öé
("->%s", 
p
->
«me
);

227 } 
p
 !
¥oc_èbÀ
 + 
§c
);

228 
	`¥öé
("=_=");

232 
p
 = 
¥oc_èbÀ
 +Ö->
p_£ndto
;

239 
	}
}

255 
PRIVATE
 
	$msg_£nd
(
¥oc
* 
cuºít
, 
de°
, 
MESSAGE
* 
m
)

257 
¥oc
* 
£ndî
 = 
cuºít
;

258 
¥oc
* 
p_de°
 = 
¥oc_èbÀ
 + 
de°
;

260 
	`as£π
(
	`¥oc2pid
(
£ndî
Ë!
de°
);

263 i‡(
	`dódlock
(
	`¥oc2pid
(
£ndî
), 
de°
)) {

264 
	`∑nic
(">>DEADLOCK<< %s->%s", 
£ndî
->
«me
, 
p_de°
->name);

267 i‡((
p_de°
->
p_Êags
 & 
RECEIVING
) &&

268 (
p_de°
->
p_ªcv‰om
 =
	`¥oc2pid
(
£ndî
) ||

269 
p_de°
->
p_ªcv‰om
 =
ANY
)) {

270 
	`as£π
(
p_de°
->
p_msg
);

271 
	`as£π
(
m
);

273 
	`vîify_¨ó
((
u32
)
	`va2œ
(
de°
, 
p_de°
->
p_msg
),

274 (
MESSAGE
));

275 
	`phys_c›y
(
	`va2œ
(
de°
, 
p_de°
->
p_msg
),

276 
	`va2œ
(
	`¥oc2pid
(
£ndî
), 
m
),

277 (
MESSAGE
));

278 
p_de°
->
p_msg
 = 0;

279 
p_de°
->
p_Êags
 &~
RECEIVING
;

280 
p_de°
->
p_ªcv‰om
 = 
NO_TASK
;

281 
	`unblock
(
p_de°
);

283 
	`as£π
(
p_de°
->
p_Êags
 == 0);

284 
	`as£π
(
p_de°
->
p_msg
 == 0);

285 
	`as£π
(
p_de°
->
p_ªcv‰om
 =
NO_TASK
);

286 
	`as£π
(
p_de°
->
p_£ndto
 =
NO_TASK
);

287 
	`as£π
(
£ndî
->
p_Êags
 == 0);

288 
	`as£π
(
£ndî
->
p_msg
 == 0);

289 
	`as£π
(
£ndî
->
p_ªcv‰om
 =
NO_TASK
);

290 
	`as£π
(
£ndî
->
p_£ndto
 =
NO_TASK
);

293 
£ndî
->
p_Êags
 |
SENDING
;

294 
	`as£π
(
£ndî
->
p_Êags
 =
SENDING
);

295 
£ndî
->
p_£ndto
 = 
de°
;

296 
£ndî
->
p_msg
 = 
m
;

299 
¥oc
 * 
p
;

300 i‡(
p_de°
->
q_£ndög
) {

301 
p
 = 
p_de°
->
q_£ndög
;

302 
p
->
√xt_£ndög
)

303 
p
 =Ö->
√xt_£ndög
;

304 
p
->
√xt_£ndög
 = 
£ndî
;

307 
p_de°
->
q_£ndög
 = 
£ndî
;

309 
£ndî
->
√xt_£ndög
 = 0;

311 
	`block
(
£ndî
);

313 
	`as£π
(
£ndî
->
p_Êags
 =
SENDING
);

314 
	`as£π
(
£ndî
->
p_msg
 != 0);

315 
	`as£π
(
£ndî
->
p_ªcv‰om
 =
NO_TASK
);

316 
	`as£π
(
£ndî
->
p_£ndto
 =
de°
);

320 
	}
}

337 
PRIVATE
 
	$msg_ª˚ive
(
¥oc
* 
cuºít
, 
§c
, 
MESSAGE
* 
m
)

339 
¥oc
* 
p_who_w™«_ªcv
 = 
cuºít
;

345 
¥oc
* 
p_‰om
 = 0;

346 
¥oc
* 
¥ev
 = 0;

347 
c›yok
 = 0;

349 
	`as£π
(
	`¥oc2pid
(
p_who_w™«_ªcv
Ë!
§c
);

351 i‡((
p_who_w™«_ªcv
->
has_öt_msg
) &&

352 ((
§c
 =
ANY
Ë|| (§¯=
INTERRUPT
))) {

357 
MESSAGE
 
msg
;

358 
	`ª£t_msg
(&
msg
);

359 
msg
.
sour˚
 = 
INTERRUPT
;

360 
msg
.
ty≥
 = 
HARD_INT
;

361 
	`as£π
(
m
);

362 
	`vîify_¨ó
((
u32
)
	`va2œ
(
	`¥oc2pid
(
p_who_w™«_ªcv
), 
m
),

363 ()(
MESSAGE
));

364 
	`phys_c›y
(
	`va2œ
(
	`¥oc2pid
(
p_who_w™«_ªcv
), 
m
), &
msg
,

365 ()(
MESSAGE
));

367 
p_who_w™«_ªcv
->
has_öt_msg
 = 0;

369 
	`as£π
(
p_who_w™«_ªcv
->
p_Êags
 == 0);

370 
	`as£π
(
p_who_w™«_ªcv
->
p_msg
 == 0);

371 
	`as£π
(
p_who_w™«_ªcv
->
p_£ndto
 =
NO_TASK
);

372 
	`as£π
(
p_who_w™«_ªcv
->
has_öt_msg
 == 0);

379 i‡(
§c
 =
ANY
) {

384 i‡(
p_who_w™«_ªcv
->
q_£ndög
) {

385 
p_‰om
 = 
p_who_w™«_ªcv
->
q_£ndög
;

386 
c›yok
 = 1;

388 
	`as£π
(
p_who_w™«_ªcv
->
p_Êags
 == 0);

389 
	`as£π
(
p_who_w™«_ªcv
->
p_msg
 == 0);

390 
	`as£π
(
p_who_w™«_ªcv
->
p_ªcv‰om
 =
NO_TASK
);

391 
	`as£π
(
p_who_w™«_ªcv
->
p_£ndto
 =
NO_TASK
);

392 
	`as£π
(
p_who_w™«_ªcv
->
q_£ndög
 != 0);

393 
	`as£π
(
p_‰om
->
p_Êags
 =
SENDING
);

394 
	`as£π
(
p_‰om
->
p_msg
 != 0);

395 
	`as£π
(
p_‰om
->
p_ªcv‰om
 =
NO_TASK
);

396 
	`as£π
(
p_‰om
->
p_£ndto
 =
	`¥oc2pid
(
p_who_w™«_ªcv
));

403 
p_‰om
 = &
¥oc_èbÀ
[
§c
];

405 i‡((
p_‰om
->
p_Êags
 & 
SENDING
) &&

406 (
p_‰om
->
p_£ndto
 =
	`¥oc2pid
(
p_who_w™«_ªcv
))) {

410 
c›yok
 = 1;

412 
¥oc
* 
p
 = 
p_who_w™«_ªcv
->
q_£ndög
;

413 
	`as£π
(
p
);

416 
p
) {

417 
	`as£π
(
p_‰om
->
p_Êags
 & 
SENDING
);

418 i‡(
	`¥oc2pid
(
p
Ë=
§c
) {

419 
p_‰om
 = 
p
;

422 
¥ev
 = 
p
;

423 
p
 =Ö->
√xt_£ndög
;

426 
	`as£π
(
p_who_w™«_ªcv
->
p_Êags
 == 0);

427 
	`as£π
(
p_who_w™«_ªcv
->
p_msg
 == 0);

428 
	`as£π
(
p_who_w™«_ªcv
->
p_ªcv‰om
 =
NO_TASK
);

429 
	`as£π
(
p_who_w™«_ªcv
->
p_£ndto
 =
NO_TASK
);

430 
	`as£π
(
p_who_w™«_ªcv
->
q_£ndög
 != 0);

431 
	`as£π
(
p_‰om
->
p_Êags
 =
SENDING
);

432 
	`as£π
(
p_‰om
->
p_msg
 != 0);

433 
	`as£π
(
p_‰om
->
p_ªcv‰om
 =
NO_TASK
);

434 
	`as£π
(
p_‰om
->
p_£ndto
 =
	`¥oc2pid
(
p_who_w™«_ªcv
));

438 i‡(
c›yok
) {

444 i‡(
p_‰om
 =
p_who_w™«_ªcv
->
q_£ndög
) {

445 
	`as£π
(
¥ev
 == 0);

446 
p_who_w™«_ªcv
->
q_£ndög
 = 
p_‰om
->
√xt_£ndög
;

447 
p_‰om
->
√xt_£ndög
 = 0;

450 
	`as£π
(
¥ev
);

451 
¥ev
->
√xt_£ndög
 = 
p_‰om
->next_sending;

452 
p_‰om
->
√xt_£ndög
 = 0;

455 
	`as£π
(
m
);

456 
	`as£π
(
p_‰om
->
p_msg
);

458 
	`vîify_¨ó
((
u32
)
	`va2œ
(
	`¥oc2pid
(
p_who_w™«_ªcv
), 
m
),

459 ()(
MESSAGE
));

460 
	`phys_c›y
(
	`va2œ
(
	`¥oc2pid
(
p_who_w™«_ªcv
), 
m
),

461 
	`va2œ
(
	`¥oc2pid
(
p_‰om
),Ö_‰om->
p_msg
),

462 (
MESSAGE
));

464 
p_‰om
->
p_msg
 = 0;

465 
p_‰om
->
p_£ndto
 = 
NO_TASK
;

466 
p_‰om
->
p_Êags
 &~
SENDING
;

467 
	`unblock
(
p_‰om
);

473 
p_who_w™«_ªcv
->
p_Êags
 |
RECEIVING
;

475 
p_who_w™«_ªcv
->
p_msg
 = 
m
;

477 i‡(
§c
 =
ANY
)

478 
p_who_w™«_ªcv
->
p_ªcv‰om
 = 
ANY
;

480 
p_who_w™«_ªcv
->
p_ªcv‰om
 = 
	`¥oc2pid
(
p_‰om
);

482 
	`block
(
p_who_w™«_ªcv
);

484 
	`as£π
(
p_who_w™«_ªcv
->
p_Êags
 =
RECEIVING
);

485 
	`as£π
(
p_who_w™«_ªcv
->
p_msg
 != 0);

486 
	`as£π
(
p_who_w™«_ªcv
->
p_ªcv‰om
 !
NO_TASK
);

487 
	`as£π
(
p_who_w™«_ªcv
->
p_£ndto
 =
NO_TASK
);

488 
	`as£π
(
p_who_w™«_ªcv
->
has_öt_msg
 == 0);

492 
	}
}

502 
PUBLIC
 
	$öf‹m_öt
(
èsk_ƒ
)

504 
¥oc
* 
p
 = 
¥oc_èbÀ
 + 
èsk_ƒ
;

506 i‡((
p
->
p_Êags
 & 
RECEIVING
) &&

507 ((
p
->
p_ªcv‰om
 =
INTERRUPT
Ë|| (p->p_ªcv‰om =
ANY
))) {

508 
p
->
p_msg
->
sour˚
 = 
INTERRUPT
;

509 
p
->
p_msg
->
ty≥
 = 
HARD_INT
;

510 
p
->
p_msg
 = 0;

511 
p
->
has_öt_msg
 = 0;

512 
p
->
p_Êags
 &~
RECEIVING
;

513 
p
->
p_ªcv‰om
 = 
NO_TASK
;

514 
	`as£π
(
p
->
p_Êags
 == 0);

515 
	`unblock
(
p
);

517 
	`as£π
(
p
->
p_Êags
 == 0);

518 
	`as£π
(
p
->
p_msg
 == 0);

519 
	`as£π
(
p
->
p_ªcv‰om
 =
NO_TASK
);

520 
	`as£π
(
p
->
p_£ndto
 =
NO_TASK
);

523 
p
->
has_öt_msg
 = 1;

525 
	}
}

530 
PUBLIC
 
	$dump_¥oc
(
¥oc
* 
p
)

532 
öfo
[
STR_DEFAULT_LEN
];

533 
i
;

534 
ãxt_cﬁ‹
 = 
	`MAKE_COLOR
(
GREEN
, 
RED
);

536 
dump_Àn
 = (
¥oc
);

538 
	`out_byã
(
CRTC_ADDR_REG
, 
START_ADDR_H
);

539 
	`out_byã
(
CRTC_DATA_REG
, 0);

540 
	`out_byã
(
CRTC_ADDR_REG
, 
START_ADDR_L
);

541 
	`out_byã
(
CRTC_DATA_REG
, 0);

543 
	`•rötf
(
öfo
, "byã dum∞o‡¥oc_èbÀ[%d]:\n", 
p
 - 
¥oc_èbÀ
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

544 
i
 = 0; i < 
dump_Àn
; i++) {

545 
	`•rötf
(
öfo
, "%x.", ((*)
p
)[
i
]);

546 
	`di•_cﬁ‹_°r
(
öfo
, 
ãxt_cﬁ‹
);

551 
	`di•_cﬁ‹_°r
("\n\n", 
ãxt_cﬁ‹
);

552 
	`•rötf
(
öfo
, "ANY: 0x%x.\n", 
ANY
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

553 
	`•rötf
(
öfo
, "NO_TASK: 0x%x.\n", 
NO_TASK
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

554 
	`di•_cﬁ‹_°r
("\n", 
ãxt_cﬁ‹
);

556 
	`•rötf
(
öfo
, "ldt_£l: 0x%x. ", 
p
->
ldt_£l
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

557 
	`•rötf
(
öfo
, "ticks: 0x%x. ", 
p
->
ticks
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

558 
	`•rötf
(
öfo
, "¥i‹ôy: 0x%x. ", 
p
->
¥i‹ôy
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

560 
	`•rötf
(
öfo
, "«me: %s. ", 
p
->
«me
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

561 
	`di•_cﬁ‹_°r
("\n", 
ãxt_cﬁ‹
);

562 
	`•rötf
(
öfo
, "p_Êags: 0x%x. ", 
p
->
p_Êags
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

563 
	`•rötf
(
öfo
, "p_ªcv‰om: 0x%x. ", 
p
->
p_ªcv‰om
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

564 
	`•rötf
(
öfo
, "p_£ndto: 0x%x. ", 
p
->
p_£ndto
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

566 
	`di•_cﬁ‹_°r
("\n", 
ãxt_cﬁ‹
);

567 
	`•rötf
(
öfo
, "has_öt_msg: 0x%x. ", 
p
->
has_öt_msg
); 
	`di•_cﬁ‹_°r
(öfo, 
ãxt_cﬁ‹
);

568 
	}
}

574 
PUBLIC
 
	$dump_msg
(c⁄° * 
tôÀ
, 
MESSAGE
* 
m
)

576 
∑cked
 = 0;

577 
	`¥öé
("{%s}<0x%x>{%ssrc:%s(%d),%stype:%d,%s(0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x)%s}%s",

578 
tôÀ
,

579 ()
m
,

580 
∑cked
 ? "" : "\n ",

581 
¥oc_èbÀ
[
m
->
sour˚
].
«me
,

582 
m
->
sour˚
,

583 
∑cked
 ? " " : "\n ",

584 
m
->
ty≥
,

585 
∑cked
 ? " " : "\n ",

586 
m
->
u
.
m3
.
m3i1
,

587 
m
->
u
.
m3
.
m3i2
,

588 
m
->
u
.
m3
.
m3i3
,

589 
m
->
u
.
m3
.
m3i4
,

590 ()
m
->
u
.
m3
.
m3p1
,

591 ()
m
->
u
.
m3
.
m3p2
,

592 
∑cked
 ? "" : "\n",

593 
∑cked
 ? "" : "\n"

595 
	}
}

	@kernel/protect.c

8 
	~"ty≥.h
"

9 
	~"°dio.h
"

10 
	~"c⁄°.h
"

11 
	~"¥Ÿe˘.h
"

12 
	~"fs.h
"

13 
	~"mm.h
"

14 
	~"dúít.h
"

15 
	~"uni°d.h
"

16 
	~"°dlib.h
"

17 
	~"ây.h
"

18 
	~"c⁄sﬁe.h
"

19 
	~"¥oc.h
"

20 
	~"°rög.h
"

21 
	~"globÆ.h
"

22 
	~"¥Ÿo.h
"

26 
PRIVATE
 
öô_idt_desc
(
ve˘‹
, 
u8
 
desc_ty≥
, 
öt_h™dÀr
 
h™dÀr
, 
¥ivûege
);

30 
divide_îr‹
();

31 
sögÀ_°ï_ex˚±i⁄
();

32 
nmi
();

33 
bªakpoöt_ex˚±i⁄
();

34 
ovîÊow
();

35 
bounds_check
();

36 
övÆ_›code
();

37 
c›r_nŸ_avaûabÀ
();

38 
doubÀ_Áu…
();

39 
c›r_£g_ovîrun
();

40 
övÆ_tss
();

41 
£gmít_nŸ_¥e£¡
();

42 
°ack_ex˚±i⁄
();

43 
gíîÆ_¥Ÿe˘i⁄
();

44 
∑ge_Áu…
();

45 
c›r_îr‹
();

46 
hwöt00
();

47 
hwöt01
();

48 
hwöt02
();

49 
hwöt03
();

50 
hwöt04
();

51 
hwöt05
();

52 
hwöt06
();

53 
hwöt07
();

54 
hwöt08
();

55 
hwöt09
();

56 
hwöt10
();

57 
hwöt11
();

58 
hwöt12
();

59 
hwöt13
();

60 
hwöt14
();

61 
hwöt15
();

69 
PUBLIC
 
	$öô_¥Ÿ
()

71 
	`öô_8259A
();

74 
	`öô_idt_desc
(
INT_VECTOR_DIVIDE
, 
DA_386IG©e
,

75 
divide_îr‹
, 
PRIVILEGE_KRNL
);

77 
	`öô_idt_desc
(
INT_VECTOR_DEBUG
, 
DA_386IG©e
,

78 
sögÀ_°ï_ex˚±i⁄
, 
PRIVILEGE_KRNL
);

80 
	`öô_idt_desc
(
INT_VECTOR_NMI
, 
DA_386IG©e
,

81 
nmi
, 
PRIVILEGE_KRNL
);

83 
	`öô_idt_desc
(
INT_VECTOR_BREAKPOINT
, 
DA_386IG©e
,

84 
bªakpoöt_ex˚±i⁄
, 
PRIVILEGE_USER
);

86 
	`öô_idt_desc
(
INT_VECTOR_OVERFLOW
, 
DA_386IG©e
,

87 
ovîÊow
, 
PRIVILEGE_USER
);

89 
	`öô_idt_desc
(
INT_VECTOR_BOUNDS
, 
DA_386IG©e
,

90 
bounds_check
, 
PRIVILEGE_KRNL
);

92 
	`öô_idt_desc
(
INT_VECTOR_INVAL_OP
, 
DA_386IG©e
,

93 
övÆ_›code
, 
PRIVILEGE_KRNL
);

95 
	`öô_idt_desc
(
INT_VECTOR_COPROC_NOT
, 
DA_386IG©e
,

96 
c›r_nŸ_avaûabÀ
, 
PRIVILEGE_KRNL
);

98 
	`öô_idt_desc
(
INT_VECTOR_DOUBLE_FAULT
, 
DA_386IG©e
,

99 
doubÀ_Áu…
, 
PRIVILEGE_KRNL
);

101 
	`öô_idt_desc
(
INT_VECTOR_COPROC_SEG
, 
DA_386IG©e
,

102 
c›r_£g_ovîrun
, 
PRIVILEGE_KRNL
);

104 
	`öô_idt_desc
(
INT_VECTOR_INVAL_TSS
, 
DA_386IG©e
,

105 
övÆ_tss
, 
PRIVILEGE_KRNL
);

107 
	`öô_idt_desc
(
INT_VECTOR_SEG_NOT
, 
DA_386IG©e
,

108 
£gmít_nŸ_¥e£¡
, 
PRIVILEGE_KRNL
);

110 
	`öô_idt_desc
(
INT_VECTOR_STACK_FAULT
, 
DA_386IG©e
,

111 
°ack_ex˚±i⁄
, 
PRIVILEGE_KRNL
);

113 
	`öô_idt_desc
(
INT_VECTOR_PROTECTION
, 
DA_386IG©e
,

114 
gíîÆ_¥Ÿe˘i⁄
, 
PRIVILEGE_KRNL
);

116 
	`öô_idt_desc
(
INT_VECTOR_PAGE_FAULT
, 
DA_386IG©e
,

117 
∑ge_Áu…
, 
PRIVILEGE_KRNL
);

119 
	`öô_idt_desc
(
INT_VECTOR_COPROC_ERR
, 
DA_386IG©e
,

120 
c›r_îr‹
, 
PRIVILEGE_KRNL
);

122 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 0, 
DA_386IG©e
,

123 
hwöt00
, 
PRIVILEGE_KRNL
);

125 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 1, 
DA_386IG©e
,

126 
hwöt01
, 
PRIVILEGE_KRNL
);

128 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 2, 
DA_386IG©e
,

129 
hwöt02
, 
PRIVILEGE_KRNL
);

131 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 3, 
DA_386IG©e
,

132 
hwöt03
, 
PRIVILEGE_KRNL
);

134 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 4, 
DA_386IG©e
,

135 
hwöt04
, 
PRIVILEGE_KRNL
);

137 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 5, 
DA_386IG©e
,

138 
hwöt05
, 
PRIVILEGE_KRNL
);

140 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 6, 
DA_386IG©e
,

141 
hwöt06
, 
PRIVILEGE_KRNL
);

143 
	`öô_idt_desc
(
INT_VECTOR_IRQ0
 + 7, 
DA_386IG©e
,

144 
hwöt07
, 
PRIVILEGE_KRNL
);

146 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 0, 
DA_386IG©e
,

147 
hwöt08
, 
PRIVILEGE_KRNL
);

149 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 1, 
DA_386IG©e
,

150 
hwöt09
, 
PRIVILEGE_KRNL
);

152 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 2, 
DA_386IG©e
,

153 
hwöt10
, 
PRIVILEGE_KRNL
);

155 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 3, 
DA_386IG©e
,

156 
hwöt11
, 
PRIVILEGE_KRNL
);

158 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 4, 
DA_386IG©e
,

159 
hwöt12
, 
PRIVILEGE_KRNL
);

161 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 5, 
DA_386IG©e
,

162 
hwöt13
, 
PRIVILEGE_KRNL
);

164 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 6, 
DA_386IG©e
,

165 
hwöt14
, 
PRIVILEGE_KRNL
);

167 
	`öô_idt_desc
(
INT_VECTOR_IRQ8
 + 7, 
DA_386IG©e
,

168 
hwöt15
, 
PRIVILEGE_KRNL
);

170 
	`öô_idt_desc
(
INT_VECTOR_SYS_CALL
, 
DA_386IG©e
,

171 
sys_ˇŒ
, 
PRIVILEGE_USER
);

174 
	`mem£t
(&
tss
, 0, (tss));

175 
tss
.
ss0
 = 
SELECTOR_KERNEL_DS
;

176 
	`öô_desc
(&
gdt
[
INDEX_TSS
],

177 
	`makñöór
(
SELECTOR_KERNEL_DS
, &
tss
),

178 (
tss
) - 1,

179 
DA_386TSS
);

180 
tss
.
ioba£
 = (tss);

183 
i
;

184 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++) {

185 
	`mem£t
(&
¥oc_èbÀ
[
i
], 0, (
¥oc
));

187 
¥oc_èbÀ
[
i
].
ldt_£l
 = 
SELECTOR_LDT_FIRST
 + (i << 3);

188 
	`as£π
(
INDEX_LDT_FIRST
 + 
i
 < 
GDT_SIZE
);

189 
	`öô_desc
(&
gdt
[
INDEX_LDT_FIRST
 + 
i
],

190 
	`makñöór
(
SELECTOR_KERNEL_DS
, 
¥oc_èbÀ
[
i
].
ldts
),

191 
LDT_SIZE
 * (
des¸ùt‹
) - 1,

192 
DA_LDT
);

194 
	}
}

202 
PUBLIC
 
	$öô_idt_desc
(
ve˘‹
, 
u8
 
desc_ty≥
, 
öt_h™dÀr
 
h™dÀr
, 
¥ivûege
)

204 
g©e
 * 
p_g©e
 = &
idt
[
ve˘‹
];

205 
u32
 
ba£
 = (u32)
h™dÀr
;

206 
p_g©e
->
off£t_low
 = 
ba£
 & 0xFFFF;

207 
p_g©e
->
£À˘‹
 = 
SELECTOR_KERNEL_CS
;

208 
p_g©e
->
dcou¡
 = 0;

209 
p_g©e
->
©å
 = 
desc_ty≥
 | (
¥ivûege
 << 5);

210 
p_g©e
->
off£t_high
 = (
ba£
 >> 16) & 0xFFFF;

211 
	}
}

219 
PUBLIC
 
u32
 
	$£g2löór
(
u16
 
£g
)

221 
des¸ùt‹
* 
p_de°
 = &
gdt
[
£g
 >> 3];

223  (
p_de°
->
ba£_high
 << 24Ë| (p_de°->
ba£_mid
 << 16Ë| (p_de°->
ba£_low
);

224 
	}
}

231 
PUBLIC
 
	$öô_desc
(
des¸ùt‹
 * 
p_desc
, 
u32
 
ba£
, u32 
limô
, 
u16
 
©åibuã
)

233 
p_desc
->
limô_low
 = 
limô
 & 0x0FFFF;

234 
p_desc
->
ba£_low
 = 
ba£
 & 0x0FFFF;

235 
p_desc
->
ba£_mid
 = (
ba£
 >> 16) & 0x0FF;

236 
p_desc
->
©å1
 = 
©åibuã
 & 0xFF;

237 
p_desc
->
limô_high_©å2
((
limô
 >> 16) & 0x0F) |

238 ((
©åibuã
 >> 8) & 0xF0);

239 
p_desc
->
ba£_high
 = (
ba£
 >> 24) & 0x0FF;

240 
	}
}

247 
PUBLIC
 
	$ex˚±i⁄_h™dÀr
(
vec_no
, 
îr_code
, 
eù
, 
cs
, 
eÊags
)

249 
i
;

250 
ãxt_cﬁ‹
 = 0x74;

251 
îr_des¸ùti⁄
[][64] = { "#DE Divide Error",

274 
di•_pos
 = 0;

275 
i
=0;i<80*5;i++){

276 
	`di•_°r
(" ");

278 
di•_pos
 = 0;

280 
	`di•_cﬁ‹_°r
("Ex˚±i⁄! --> ", 
ãxt_cﬁ‹
);

281 
	`di•_cﬁ‹_°r
(
îr_des¸ùti⁄
[
vec_no
], 
ãxt_cﬁ‹
);

282 
	`di•_cﬁ‹_°r
("\n\n", 
ãxt_cﬁ‹
);

283 
	`di•_cﬁ‹_°r
("EFLAGS:", 
ãxt_cﬁ‹
);

284 
	`di•_öt
(
eÊags
);

285 
	`di•_cﬁ‹_°r
("CS:", 
ãxt_cﬁ‹
);

286 
	`di•_öt
(
cs
);

287 
	`di•_cﬁ‹_°r
("EIP:", 
ãxt_cﬁ‹
);

288 
	`di•_öt
(
eù
);

290 if(
îr_code
 != 0xFFFFFFFF){

291 
	`di•_cﬁ‹_°r
("Eº‹ code:", 
ãxt_cﬁ‹
);

292 
	`di•_öt
(
îr_code
);

294 
	}
}

	@kernel/start.c

8 
	~"ty≥.h
"

9 
	~"°dio.h
"

10 
	~"c⁄°.h
"

11 
	~"¥Ÿe˘.h
"

12 
	~"°rög.h
"

13 
	~"fs.h
"

14 
	~"mm.h
"

15 
	~"dúít.h
"

16 
	~"uni°d.h
"

17 
	~"°dlib.h
"

18 
	~"¥oc.h
"

19 
	~"ây.h
"

20 
	~"c⁄sﬁe.h
"

21 
	~"globÆ.h
"

22 
	~"¥Ÿo.h
"

28 
PUBLIC
 
	$c°¨t
()

30 
	`di•_°r
("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\"cstart\" begins-----\n");

33 
	`mem˝y
–&
gdt
,

34 (*)(*((
u32
*)(&
gdt_±r
[2]))),

35 *((
u16
*)(&
gdt_±r
[0])) + 1

38 
u16
* 
p_gdt_limô
 = (u16*)(&
gdt_±r
[0]);

39 
u32
* 
p_gdt_ba£
 = (u32*)(&
gdt_±r
[2]);

40 *
p_gdt_limô
 = 
GDT_SIZE
 * (
des¸ùt‹
) - 1;

41 *
p_gdt_ba£
 = (
u32
)&
gdt
;

44 
u16
* 
p_idt_limô
 = (u16*)(&
idt_±r
[0]);

45 
u32
* 
p_idt_ba£
 = (u32*)(&
idt_±r
[2]);

46 *
p_idt_limô
 = 
IDT_SIZE
 * (
g©e
) - 1;

47 *
p_idt_ba£
 = (
u32
)&
idt
;

49 
	`öô_¥Ÿ
();

51 
	`di•_°r
("-----\"cstart\" finished-----\n");

52 
	}
}

	@kernel/systask.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

27 
PRIVATE
 
ªad_ªgi°î
(
ªg_addr
);

28 
PRIVATE
 
u32
 
gë_πc_time
(
time
 *
t
);

37 
PUBLIC
 
	$èsk_sys
()

39 
MESSAGE
 
msg
;

40 
time
 
t
;

43 
	`£nd_ªcv
(
RECEIVE
, 
ANY
, &
msg
);

44 
§c
 = 
msg
.
sour˚
;

46 
msg
.
ty≥
) {

47 
GET_TICKS
:

48 
msg
.
RETVAL
 = 
ticks
;

49 
	`£nd_ªcv
(
SEND
, 
§c
, &
msg
);

51 
GET_PID
:

52 
msg
.
ty≥
 = 
SYSCALL_RET
;

53 
msg
.
PID
 = 
§c
;

54 
	`£nd_ªcv
(
SEND
, 
§c
, &
msg
);

56 
GET_RTC_TIME
:

57 
msg
.
ty≥
 = 
SYSCALL_RET
;

58 
	`gë_πc_time
(&
t
);

59 
	`vîify_¨ó
((
u32
)
	`va2œ
(
§c
, 
msg
.
BUF
),

60 ()(
t
));

61 
	`phys_c›y
(
	`va2œ
(
§c
, 
msg
.
BUF
),

62 
	`va2œ
(
TASK_SYS
, &
t
),

63 (
t
));

64 
	`£nd_ªcv
(
SEND
, 
§c
, &
msg
);

67 
	`∑nic
("unknown msgÅype");

71 
	}
}

82 
PRIVATE
 
u32
 
	$gë_πc_time
(
time
 *
t
)

84 
t
->
yór
 = 
	`ªad_ªgi°î
(
YEAR
);

85 
t
->
m⁄th
 = 
	`ªad_ªgi°î
(
MONTH
);

86 
t
->
day
 = 
	`ªad_ªgi°î
(
DAY
);

87 
t
->
hour
 = 
	`ªad_ªgi°î
(
HOUR
);

88 
t
->
möuã
 = 
	`ªad_ªgi°î
(
MINUTE
);

89 
t
->
£c⁄d
 = 
	`ªad_ªgi°î
(
SECOND
);

91 i‡((
	`ªad_ªgi°î
(
CLK_STATUS
) & 0x04) == 0) {

93 
t
->
yór
 = 
	`BCD_TO_DEC
(t->year);

94 
t
->
m⁄th
 = 
	`BCD_TO_DEC
(t->month);

95 
t
->
day
 = 
	`BCD_TO_DEC
(t->day);

96 
t
->
hour
 = 
	`BCD_TO_DEC
(t->hour);

97 
t
->
möuã
 = 
	`BCD_TO_DEC
(t->minute);

98 
t
->
£c⁄d
 = 
	`BCD_TO_DEC
(t->second);

101 
t
->
yór
 += 2000;

104 
	}
}

116 
PRIVATE
 
	$ªad_ªgi°î
(
ªg_addr
)

118 
	`out_byã
(
CLK_ELE
, 
ªg_addr
);

119  
	`ö_byã
(
CLK_IO
);

120 
	}
}

	@kernel/tty.c

39 
	~"ty≥.h
"

40 
	~"°dio.h
"

41 
	~"c⁄°.h
"

42 
	~"¥Ÿe˘.h
"

43 
	~"°rög.h
"

44 
	~"fs.h
"

45 
	~"mm.h
"

46 
	~"dúít.h
"

47 
	~"uni°d.h
"

48 
	~"°dlib.h
"

49 
	~"¥oc.h
"

50 
	~"ây.h
"

51 
	~"c⁄sﬁe.h
"

52 
	~"globÆ.h
"

53 
	~"keybﬂrd.h
"

54 
	~"¥Ÿo.h
"

57 
	#TTY_FIRST
 (
ây_èbÀ
)

	)

58 
	#TTY_END
 (
ây_èbÀ
 + 
NR_CONSOLES
)

	)

61 
PRIVATE
 
öô_ây
 (
TTY
* 
ây
);

62 
PRIVATE
 
ây_dev_ªad
 (
TTY
* 
ây
);

63 
PRIVATE
 
ây_dev_wrôe
 (
TTY
* 
ây
);

64 
PRIVATE
 
ây_do_ªad
 (
TTY
* 
ây
, 
MESSAGE
* 
msg
);

65 
PRIVATE
 
ây_do_wrôe
 (
TTY
* 
ây
, 
MESSAGE
* 
msg
);

66 
PRIVATE
 
put_key
 (
TTY
* 
ây
, 
u32
 
key
);

75 
PUBLIC
 
	$èsk_ây
()

77 
TTY
 * 
ây
;

78 
MESSAGE
 
msg
;

80 
	`öô_keybﬂrd
();

82 
ây
 = 
TTY_FIRST
;Åty < 
TTY_END
;Åty++)

83 
	`öô_ây
(
ây
);

85 
	`£À˘_c⁄sﬁe
(0);

88 
ây
 = 
TTY_FIRST
;Åty < 
TTY_END
;Åty++) {

90 
	`ây_dev_ªad
(
ây
);

91 
	`ây_dev_wrôe
(
ây
);

92 } 
ây
->
ibuf_˙t
);

95 
	`£nd_ªcv
(
RECEIVE
, 
ANY
, &
msg
);

97 
§c
 = 
msg
.
sour˚
;

98 
	`as£π
(
§c
 !
TASK_TTY
);

100 
TTY
* 
±ty
 = &
ây_èbÀ
[
msg
.
DEVICE
];

102 
msg
.
ty≥
) {

103 
DEV_OPEN
:

104 
	`ª£t_msg
(&
msg
);

105 
msg
.
ty≥
 = 
SYSCALL_RET
;

106 
	`£nd_ªcv
(
SEND
, 
§c
, &
msg
);

108 
DEV_READ
:

109 
	`ây_do_ªad
(
±ty
, &
msg
);

111 
DEV_WRITE
:

112 
	`ây_do_wrôe
(
±ty
, &
msg
);

114 
HARD_INT
:

119 
key_¥es£d
 = 0;

122 
	`dump_msg
("TTY::unknow¿msg", &
msg
);

126 
	}
}

139 
PRIVATE
 
	$öô_ây
(
TTY
* 
ây
)

141 
ây
->
ibuf_˙t
 = 0;

142 
ây
->
ibuf_hód
 =Åty->
ibuf_èû
 =Åty->
ibuf
;

144 
	`öô_s¸ìn
(
ây
);

145 
	}
}

157 
PUBLIC
 
	$ö_¥o˚ss
(
TTY
* 
ây
, 
u32
 
key
)

159 i‡(!(
key
 & 
FLAG_EXT
)) {

160 
	`put_key
(
ây
, 
key
);

163 
øw_code
 = 
key
 & 
MASK_RAW
;

164 
øw_code
) {

165 
ENTER
:

166 
	`put_key
(
ây
, '\n');

168 
BACKSPACE
:

169 
	`put_key
(
ây
, '\b');

171 
UP
:

172 i‡((
key
 & 
FLAG_SHIFT_L
) ||

173 (
key
 & 
FLAG_SHIFT_R
)) {

174 
	`s¸ﬁl_s¸ìn
(
ây
->
c⁄sﬁe
, 
SCR_DN
);

177 
DOWN
:

178 i‡((
key
 & 
FLAG_SHIFT_L
) ||

179 (
key
 & 
FLAG_SHIFT_R
)) {

180 
	`s¸ﬁl_s¸ìn
(
ây
->
c⁄sﬁe
, 
SCR_UP
);

183 
F1
:

184 
F2
:

185 
F3
:

186 
F4
:

187 
F5
:

188 
F6
:

189 
F7
:

190 
F8
:

191 
F9
:

192 
F10
:

193 
F11
:

194 
F12
:

195 i‡((
key
 & 
FLAG_ALT_L
) ||

196 (
key
 & 
FLAG_ALT_R
)) {

197 
	`£À˘_c⁄sﬁe
(
øw_code
 - 
F1
);

204 
	}
}

218 
PRIVATE
 
	$put_key
(
TTY
* 
ây
, 
u32
 
key
)

220 i‡(
ây
->
ibuf_˙t
 < 
TTY_IN_BYTES
) {

221 *(
ây
->
ibuf_hód
Ë
key
;

222 
ây
->
ibuf_hód
++;

223 i‡(
ây
->
ibuf_hód
 =ây->
ibuf
 + 
TTY_IN_BYTES
)

224 
ây
->
ibuf_hód
 =Åty->
ibuf
;

225 
ây
->
ibuf_˙t
++;

227 
	}
}

241 
PRIVATE
 
	$ây_dev_ªad
(
TTY
* 
ây
)

243 i‡(
	`is_cuºít_c⁄sﬁe
(
ây
->
c⁄sﬁe
))

244 
	`keybﬂrd_ªad
(
ây
);

245 
	}
}

256 
PRIVATE
 
	$ây_dev_wrôe
(
TTY
* 
ây
)

258 
ây
->
ibuf_˙t
) {

259 
ch
 = *(
ây
->
ibuf_èû
);

260 
ây
->
ibuf_èû
++;

261 i‡(
ây
->
ibuf_èû
 =ây->
ibuf
 + 
TTY_IN_BYTES
)

262 
ây
->
ibuf_èû
 =Åty->
ibuf
;

263 
ây
->
ibuf_˙t
--;

265 i‡(
ây
->
ây_À·_˙t
) {

266 i‡(
ch
 >= ' ' && ch <= '~') {

267 
	`out_ch¨
(
ây
->
c⁄sﬁe
, 
ch
);

268 * 
p
 = 
ây
->
ây_ªq_buf
 +

269 
ây
->
ây_å™s_˙t
;

270 
	`phys_c›y
(
p
, (*)
	`va2œ
(
TASK_TTY
, &
ch
), 1);

271 
ây
->
ây_å™s_˙t
++;

272 
ây
->
ây_À·_˙t
--;

274 i‡(
ch
 ='\b' && 
ây
->
ây_å™s_˙t
) {

275 
	`out_ch¨
(
ây
->
c⁄sﬁe
, 
ch
);

276 
ây
->
ây_å™s_˙t
--;

277 
ây
->
ây_À·_˙t
++;

280 i‡(
ch
 ='\n' || 
ây
->
ây_À·_˙t
 == 0) {

281 
	`out_ch¨
(
ây
->
c⁄sﬁe
, '\n');

282 
MESSAGE
 
msg
;

283 
msg
.
ty≥
 = 
RESUME_PROC
;

284 
msg
.
PROC_NR
 = 
ây
->
ây_¥o˙r
;

285 
msg
.
CNT
 = 
ây
->
ây_å™s_˙t
;

286 
	`£nd_ªcv
(
SEND
, 
ây
->
ây_ˇŒî
, &
msg
);

287 
ây
->
ây_À·_˙t
 = 0;

291 
	}
}

307 
PRIVATE
 
	$ây_do_ªad
(
TTY
* 
ây
, 
MESSAGE
* 
msg
)

310 
ây
->
ây_ˇŒî
 = 
msg
->
sour˚
;

311 
ây
->
ây_¥o˙r
 = 
msg
->
PROC_NR
;

312 
ây
->
ây_ªq_buf
 = 
	`va2œ
—ty->
ây_¥o˙r
,

313 
msg
->
BUF
);

314 
ây
->
ây_À·_˙t
 = 
msg
->
CNT
;

315 
ây
->
ây_å™s_˙t
= 0;

317 
msg
->
ty≥
 = 
SUSPEND_PROC
;

318 
msg
->
CNT
 = 
ây
->
ây_À·_˙t
;

319 
	`£nd_ªcv
(
SEND
, 
ây
->
ây_ˇŒî
, 
msg
);

320 
	}
}

332 
PRIVATE
 
	$ây_do_wrôe
(
TTY
* 
ây
, 
MESSAGE
* 
msg
)

334 
buf
[
TTY_OUT_BUF_LEN
];

335 * 
p
 = (*)
	`va2œ
(
msg
->
PROC_NR
, msg->
BUF
);

336 
i
 = 
msg
->
CNT
;

337 
j
;

339 
i
) {

340 
byãs
 = 
	`mö
(
TTY_OUT_BUF_LEN
, 
i
);

341 
	`vîify_¨ó
((
u32
)
	`va2œ
(
TASK_TTY
, 
buf
),

342 ()
byãs
);

343 
	`phys_c›y
(
	`va2œ
(
TASK_TTY
, 
buf
), (*)
p
, 
byãs
);

344 
j
 = 0; j < 
byãs
; j++)

345 
	`out_ch¨
(
ây
->
c⁄sﬁe
, 
buf
[
j
]);

346 
i
 -
byãs
;

347 
p
 +
byãs
;

350 
msg
->
ty≥
 = 
SYSCALL_RET
;

351 
	`£nd_ªcv
(
SEND
, 
msg
->
sour˚
, msg);

352 
	}
}

379 
PUBLIC
 
	$sys_¥ötx
(
_unu£d1
, 
_unu£d2
, * 
s
, 
¥oc
* 
p_¥oc
)

381 c⁄° * 
p
;

382 
ch
;

384 
ªíãr_îr
[] = "? k_reenter is incorrect for unknownÑeason";

385 
ªíãr_îr
[0] = 
MAG_CH_PANIC
;

401 i‡(
k_ªíãr
 == 0)

402 
p
 = 
	`va2œ
(
	`¥oc2pid
(
p_¥oc
), 
s
);

403 i‡(
k_ªíãr
 > 0)

404 
p
 = 
s
;

406 
p
 = 
ªíãr_îr
;

413 i‡((*
p
 =
MAG_CH_PANIC
) ||

414 (*
p
 =
MAG_CH_ASSERT
 && 
p_¥oc_ªady
 < &
¥oc_èbÀ
[
NR_TASKS
])) {

415 
	`dißbÀ_öt
();

416 * 
v
 = (*)
V_MEM_BASE
;

417 c⁄° * 
q
 = 
p
 + 1;

419 
v
 < (*)(
V_MEM_BASE
 + 
V_MEM_SIZE
)) {

420 *
v
++ = *
q
++;

421 *
v
++ = 
RED_CHAR
;

422 i‡(!*
q
) {

423 (()
v
 - 
V_MEM_BASE
Ë% (
SCR_WIDTH
 * 16)) {

425 
v
++;

426 *
v
++ = 
GRAY_CHAR
;

428 
q
 = 
p
 + 1;

432 
__asm__
 
	`__vﬁ©ûe__
("hlt");

435 (
ch
 = *
p
++) != 0) {

436 i‡(
ch
 =
MAG_CH_PANIC
 || ch =
MAG_CH_ASSERT
)

442 
	`out_ch¨
(
TTY_FIRST
->
c⁄sﬁe
, 
ch
);

449 
	}
}

458 
PUBLIC
 
	$dump_ây_buf
()

460 
TTY
 * 
ây
 = &
ây_èbÀ
[1];

462 
£p
[] = "--------------------------------\n";

464 
	`¥öé
(
£p
);

466 
	`¥öé
("hód: %d\n", 
ây
->
ibuf_hód
 -Åty->
ibuf
);

467 
	`¥öé
("èû: %d\n", 
ây
->
ibuf_èû
 -Åty->
ibuf
);

468 
	`¥öé
("˙t: %d\n", 
ây
->
ibuf_˙t
);

470 
pid
 = 
ây
->
ây_ˇŒî
;

471 
	`¥öé
("ˇŒî: %†(%d)\n", 
¥oc_èbÀ
[
pid
].
«me
,Öid);

472 
pid
 = 
ây
->
ây_¥o˙r
;

473 
	`¥öé
("ˇŒî: %†(%d)\n", 
¥oc_èbÀ
[
pid
].
«me
,Öid);

475 
	`¥öé
("ªq_buf: %d\n", ()
ây
->
ây_ªq_buf
);

476 
	`¥öé
("À·_˙t: %d\n", 
ây
->
ây_À·_˙t
);

477 
	`¥öé
("å™s_˙t: %d\n", 
ây
->
ây_å™s_˙t
);

479 
	`¥öé
("--------------------------------\n");

481 
	`°r˝y
(
£p
, "\n");

482 
	}
}

	@lib/brk.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

35 * 
	g_brksize
;

45 
PUBLIC
 

46 
	$brk
 (* 
addr
)

48 i‡(
_brksize
 =
addr
 && 0 != _brksize) {

50 
	`¥ötf
("%†%dÇÿ√edÅÿch™gêthêbrk\n", 
__FILE__
, 
__LINE__
);

54 
MESSAGE
 
msg
;

55 
msg
.
ty≥
 = 
BRK
;

56 
msg
.
BRK_ADDR
 = 
addr
;

58 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

59 
	`¥ötf
("%†%d msg.BRK_ADDR %d\n", 
__FILE__
, 
__LINE__
, 
msg
.
BRK_ADDR
);

60 
_brksize
 = 
msg
.
BRK_ADDR
;

61 
	`¥ötf
("%†%d _brksizê%d\n", 
__FILE__
, 
__LINE__
, 
_brksize
);

63  
msg
.
RETVAL
;

64 
	}
}

74 
PUBLIC
 

75 
	$sbrk
 (
ö¸
)

77 * 
√wsize
, *
ﬁdsize
;

78 
ﬁdsize
 = 
_brksize
;

79 
√wsize
 = 
_brksize
 + 
ö¸
;

80 i‡((
ö¸
 > 0 && 
√wsize
 < 
ﬁdsize
) ||

81 (
ö¸
 < 0 && 
√wsize
 > 
ﬁdsize
)) {

84 
	`brk
(
√wsize
);

85 
	}
}

	@lib/chdir.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

43 
PUBLIC
 

44 
	$chdú
 (c⁄° * 
∑th
)

46 
MESSAGE
 
msg
;

48 
msg
.
ty≥
 = 
CHDIR
;

50 
msg
.
PATH
 = (*)
∑th
;

51 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th
);

53 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

54 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

56  
msg
.
RETVAL
;

57 
	}
}

	@lib/close.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

36 
PUBLIC
 
	$˛o£
(
fd
)

38 
MESSAGE
 
msg
;

39 
msg
.
ty≥
 = 
CLOSE
;

40 
msg
.
FD
 = 
fd
;

42 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

44  
msg
.
RETVAL
;

45 
	}
}

	@lib/closedir.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

43 
PUBLIC
 

44 
	$˛o£dú
 (
DIR
 *
dp
)

46 
d
;

48 i‡(
NULL
 =
dp
) {

51 
d
 = 
dp
->
_fd
;

52 
	`‰ì
((*Ë
dp
);

53  
	`˛o£
(
d
);

54 
	}
}

	@lib/dir.c

20 
	~"ty≥.h
"

21 
	~"°dio.h
"

22 
	~"c⁄°.h
"

23 
	~"¥Ÿe˘.h
"

24 
	~"°rög.h
"

25 
	~"fs.h
"

26 
	~"mm.h
"

27 
	~"dúít.h
"

28 
	~"uni°d.h
"

29 
	~"°dlib.h
"

30 
	~"¥oc.h
"

31 
	~"ây.h
"

32 
	~"c⁄sﬁe.h
"

33 
	~"globÆ.h
"

34 
	~"¥Ÿo.h
"

44 
PUBLIC
 
DIR
 *

45 
	$›ídú
 (c⁄° * 
__d_«me
)

47 
fd
;

48 
DIR
 *
dp
;

49 
°©
 
°
;

51 
	`¥öé
("{lib} BeginÅo open directory!\n");

53 i‡(-1 =
	`°©
(
__d_«me
, &
°
)) {

54  
NULL
;

58 i‡(
I_DIRECTORY
 !
°
.
°_mode
) {

59  
NULL
;

62 
	`¥öé
("{lib} Stat OK\n");

64 i‡(-1 =(
fd
 = 
	`›í
(
__d_«me
, 
O_RDWR
)) ) {

65  
NULL
;

68 
	`¥öé
("{lib} File descriptor opened\n");

71 
dp
 = (
DIR
 *)
	`mÆloc
((DIR) );

72 i‡(
NULL
 =
dp
) {

73 
	`¥öé
("{lib}Memoryállocate failed\n");

74  
NULL
;

77 
	`¥öé
("{lib} Memoryállocated\n");

79 
dp
->
_fd
 = 
fd
;

81 
dp
->
_cou¡
 = 0;

82 
	`¥öé
("d∞_cou¡: %d\n", 
dp
->
_cou¡
);

83 
dp
->
_pos
 = 0;

84 
	`¥öé
("d∞_pos: %d\n", 
dp
->
_pos
);

86  
dp
;

87 
	}
}

	@lib/exec.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

36 
PUBLIC
 
	$exec
(c⁄° * 
∑th
)

38 
MESSAGE
 
msg
;

39 
msg
.
ty≥
 = 
EXEC
;

40 
msg
.
PATHNAME
 = (*)
∑th
;

41 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th
);

42 
msg
.
BUF
 = 0;

43 
msg
.
BUF_LEN
 = 0;

45 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

46 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

48  
msg
.
RETVAL
;

49 
	}
}

54 
PUBLIC
 
	$exe˛
(c⁄° *
∑th
, c⁄° *
¨g
, ...)

56 
va_li°
 
∑rg
 = (va_li°)(&
¨g
);

57 **
p
 = (**)
∑rg
;

58  
	`execv
(
∑th
, 
p
);

59 
	}
}

64 
PUBLIC
 
	$execv
(c⁄° *
∑th
, * 
¨gv
[])

66 **
p
 = 
¨gv
;

67 
¨g_°ack
[
PROC_ORIGIN_STACK
];

68 
°ack_Àn
 = 0;

70 *
p
++) {

71 
	`as£π
(
°ack_Àn
 + 2 * (*Ë< 
PROC_ORIGIN_STACK
);

72 
°ack_Àn
 += (*);

75 *((*)(&
¨g_°ack
[
°ack_Àn
])) = 0;

76 
°ack_Àn
 += (*);

78 ** 
q
 = (**)
¨g_°ack
;

79 
p
 = 
¨gv
; *p != 0;Ö++) {

80 *
q
++ = &
¨g_°ack
[
°ack_Àn
];

82 
	`as£π
(
°ack_Àn
 + 
	`°æí
(*
p
Ë+ 1 < 
PROC_ORIGIN_STACK
);

83 
	`°r˝y
(&
¨g_°ack
[
°ack_Àn
], *
p
);

84 
°ack_Àn
 +
	`°æí
(*
p
);

85 
¨g_°ack
[
°ack_Àn
] = 0;

86 
°ack_Àn
++;

89 
MESSAGE
 
msg
;

90 
msg
.
ty≥
 = 
EXEC
;

91 
msg
.
PATHNAME
 = (*)
∑th
;

92 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th
);

93 
msg
.
BUF
 = (*)
¨g_°ack
;

94 
msg
.
BUF_LEN
 = 
°ack_Àn
;

96 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

97 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

99  
msg
.
RETVAL
;

100 
	}
}

	@lib/exit.c

11 
	~"ty≥.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"¥Ÿo.h
"

35 
PUBLIC
 
	$exô
(
°©us
)

37 
MESSAGE
 
msg
;

38 
msg
.
ty≥
 = 
EXIT
;

39 
msg
.
STATUS
 = 
°©us
;

41 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

42 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

43 
	}
}

	@lib/fork.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

39 
PUBLIC
 
	$f‹k
()

41 
MESSAGE
 
msg
;

42 
msg
.
ty≥
 = 
FORK
;

44 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

45 
	`¥ötf
("msg from : %d, PID : %d\n", 
msg
.
sour˚
, msg.
PID
);

46 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

47 
	`as£π
(
msg
.
RETVAL
 == 0);

49  
msg
.
PID
;

50 
	}
}

	@lib/getcwd.c

20 
	~"ty≥.h
"

21 
	~"°dio.h
"

22 
	~"c⁄°.h
"

23 
	~"¥Ÿe˘.h
"

24 
	~"°rög.h
"

25 
	~"fs.h
"

26 
	~"mm.h
"

27 
	~"dúít.h
"

28 
	~"uni°d.h
"

29 
	~"°dlib.h
"

30 
	~"¥oc.h
"

31 
	~"ây.h
"

32 
	~"c⁄sﬁe.h
"

33 
	~"globÆ.h
"

34 
	~"¥Ÿo.h
"

47 
PRIVATE
 

48 
	$add∑th
 (c⁄° *
∑th
, **
≠
, c⁄° *
íåy
)

50 c⁄° *
e

íåy
;

51 *
p
*
≠
;

53 *
e
 != 0)É++;

55 
e
 > 
íåy
 && 
p
 > 
∑th
) *--p = *--e;

57 i‡(
p
 =
∑th
)  -1;

58 *--
p
 = '/';

59 *
≠

p
;

61 
	}
}

72 
PRIVATE
 

73 
	$ªcovî
 ( * 
p
 )

75 
¶ash
;

76 *
p0
;

78 *
p
 != 0) {

79 
p0
++
p
;

81 dÿ
p
++; *p != 0 && *p != '/');

82 
¶ash
*
p
; *p= 0;

84 i‡(
	`chdú
(
p0
) != 0)  -1;

85 *
p

¶ash
;

88 
	}
}

98 
PUBLIC
 *

99 
	$gëcwd
 ( *
∑th
, 
size_t
 
size
)

101 
	`¥ötf
("%†%d gëcwd sèπed\n", 
__FILE__
, 
__LINE__
);

102 
°©
 
above
, 
cuºít
, 
tmp
;

103 
dúít
 *
íåy
;

104 
DIR
 *
d
;

105 *
p
, *
up
, *
dŸdŸ
;

106 
cy˛e
;

108 i‡(
NULL
 =
∑th
 || 
size
 <= 1) {

109 
	`¥ötf
("%†%dÇuŒÖ©hÖoöãr\n", 
__FILE__
, 
__LINE__
);

110  
NULL
;

113 
p
 = 
∑th
 + 
size
;

114 *--
p
 = '\0';

116 i‡(
	`°©
(".", &
cuºít
) < 0) {

117 
	`¥ötf
("%†%d sèàcuºíàÁûed\n", 
__FILE__
, 
__LINE__
);

118  
NULL
;

122 
dŸdŸ
 = "..";

123 i‡(
	`°©
(
dŸdŸ
, &
above
) < 0) {

124 
	`¥ötf
("%†%d sèàdŸdŸ faûed\n", 
__FILE__
, 
__LINE__
);

125 
	`ªcovî
(
p
);

126  
NULL
;

129 i‡(
above
.
°_dev
 =
cuºít
.st_dev

130 && 
above
.
°_öo
 =
cuºít
.st_ino) {

132 
	`¥ötf
("%†%d foundÅhêroŸ inodê: d_öÿ%d\n", 
__FILE__
, 
__LINE__
, 
cuºít
.
°_öo
);

136 i‡(
NULL
 =(
d
 = 
	`›ídú
(
dŸdŸ
)) ) {

137 
	`¥ötf
("%†%d o≥¿dŸdŸ faûed\n", 
__FILE__
, 
__LINE__
);

138 
	`ªcovî
(
p
);

139  
NULL
;

145 
cy˛e

above
.
°_dev
 =
cuºít
.st_dev ? 0 : 1;

148 
«me
[3 + 
MAX_FILENAME_LEN
 + 1];

150 
tmp
.
°_öo
 = 0;

151 i‡(
NULL
 =(
íåy
 = 
	`ªaddú
(
d
))) {

152 ++
cy˛e
) {

154 
	`ªwöddú
(
d
);

157 
	`¥ötf
("%†%dÑód dú faûed\n", 
__FILE__
, 
__LINE__
);

158 
	`˛o£dú
(
d
);

159 
	`ªcovî
(
p
);

160  
NULL
;

164 i‡(0 =
	`°rcmp
(
íåy
->
d_«me
, ".")) ;

165 i‡(0 =
	`°rcmp
(
íåy
->
d_«me
, "..")) ;

167 
cy˛e
) {

169 i‡(
íåy
->
d_öo
 !
cuºít
.
°_öo
) ;

171 
	`°r˝y
(
«me
, "../");

172 
	`°r˝y
(
«me
 + 3, 
íåy
->
d_«me
);

173 i‡(
	`°©
(
«me
, &
tmp
) < 0)

177 } 
tmp
.
°_öo
 !
cuºít
.st_ino

178 || 
tmp
.
°_dev
 !
cuºít
.st_dev);

180 
up
 = 
p
;

181 i‡(
	`add∑th
(
∑th
, &
up
, 
íåy
->
d_«me
) < 0) {

182 
	`¥ötf
("%†%dáddÖ©h faûed\n", 
__FILE__
, 
__LINE__
);

183 
	`˛o£dú
(
d
);

184 
	`ªcovî
(
p
);

185  
NULL
;

187 
	`˛o£dú
(
d
);

189 i‡(
	`chdú
(
dŸdŸ
) != 0) {

190 
	`¥ötf
("%†%d chdú dŸdŸ faûed\n", 
__FILE__
, 
__LINE__
);

191 
	`ªcovî
(
p
);

192  
NULL
;

195 
p
 = 
up
;

197 
cuºít
 = 
above
;

199 i‡(
	`ªcovî
(
p
) != 0) {

200 
	`¥ötf
("%†%d faûÅÿundÿÆ»thêchdú dŸdŸ\n", 
__FILE__
, 
__LINE__
);

201  
NULL
;

203 i‡(*
p
 == 0) {

204 *--
p
 = '/';

206 i‡(
p
 > 
∑th
) {

208 
	`°r˝y
(
∑th
, 
p
);

210  
∑th
;

211 
	}
}

	@lib/getpid.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

35 
PUBLIC
 
	$gëpid
()

37 
MESSAGE
 
msg
;

38 
msg
.
ty≥
 = 
GET_PID
;

40 
	`£nd_ªcv
(
BOTH
, 
TASK_SYS
, &
msg
);

41 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

43  
msg
.
PID
;

44 
	}
}

	@lib/lseek.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

40 
PUBLIC
 
	$l£ek
(
fd
, 
off£t
, 
whí˚
)

42 
MESSAGE
 
msg
;

43 
msg
.
ty≥
 = 
LSEEK
;

44 
msg
.
FD
 = 
fd
;

45 
msg
.
OFFSET
 = 
off£t
;

46 
msg
.
WHENCE
 = 
whí˚
;

48 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

50  
msg
.
OFFSET
;

51 
	}
}

	@lib/malloc.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

35 
	#MA_NIL
 ((
MEM_AREA
 *Ë0)

	)

36 
	#MA_USED
 1

	)

37 
	#MA_FREE
 0

	)

38 
	smem_¨ó
 {

39 * 
	m°¨t
;

40 
u32
 
	msize
;

41 
	m°©us
;

42 
mem_¨ó
 * 
	m√xt
;

43 }
	tMEM_AREA
;

45 * 
_brksize
;

46 * 
	g¥oc_u£
;

47 
MEM_AREA
 * 
	ghód
;

57 
PUBLIC
 *

58 
	$mÆloc
 (
size_t
 
_size
)

60 
	`¥ötf
("%†%d mÆlo¯°¨t\n", 
__FILE__
, 
__LINE__
, 
_brksize
);

62 i‡(0 =
¥oc_u£
 || 0 =
_brksize
) {

63 
	`sbrk
(0);

64 
¥oc_u£
 = 
_brksize
;

65 
	`¥ötf
("%†%d _brksizê%d\n", 
__FILE__
, 
__LINE__
, 
_brksize
);

69 
MEM_AREA
 * 
ma
 = 
hód
;

70 
MA_NIL
 !
ma
) {

71 i‡(
MA_FREE
 =
ma
->
°©us
 &&

72 
ma
->
size
 >
_size
) {

73 
ma
->
°©us
 = 
MA_USED
;

74 
	`¥ötf
("%†%dÅhê‰ì slŸ: %d\n", 
__FILE__
, 
__LINE__
, 
_brksize
, 
ma
->
°¨t
);

75  
ma
->
°¨t
;

77 
ma
 = ma->
√xt
;

80 
	`¥ötf
("%†%†ˇn'àföd fªê¶Ÿ\n", 
__FILE__
, 
__LINE__
, 
_brksize
);

83 
ma
 = 
hód
;

85 i‡(
MA_NIL
 =
ma
 ||

86 
MA_NIL
 =
ma
->
√xt
) {

89 
ma
 = ma->
√xt
;

90 } 
MA_NIL
 !
ma
->
√xt
);

93 
u32
 
√w_¥oc_u£
 = (u32)
¥oc_u£
 + (
MEM_AREA
Ë+ 
_size
;

94 i‡(
√w_¥oc_u£
 > (
u32
)
_brksize
) {

95 
	`sbrk
(
_size
);

98 
MEM_AREA
 * 
t
;

99 i‡(
MA_NIL
 =
hód
) {

100 
t
 = 
hód
 = (
MEM_AREA
 *)
¥oc_u£
;

101 } i‡(
MA_NIL
 =
ma
->
√xt
){

102 
t
 = 
ma
->
√xt
 = (
MEM_AREA
 *)
¥oc_u£
;

104 
t
->
°¨t
 = (*)((
u32
)
¥oc_u£
 + (
MEM_AREA
));

105 
t
->
size
 = 
_size
;

106 
t
->
°©us

MA_USED
;

108 
	`¥ötf
("%†%d mÆlo¯°¨à%d\n", 
__FILE__
, 
__LINE__
, (
u32
)(
t
->
°¨t
));

109  (*)(
t
->
°¨t
);

110 
	}
}

120 
	$‰ì
 (* 
addr
)

122 
MEM_AREA
 * 
ma
 = 
hód
;

123 i‡(
MA_NIL
 =
ma
) {

124 
	`¥ötf
("tryÅo free free slot\n");

127 
MA_NIL
 !
ma
) {

128 i‡(
addr
 =
ma
->
°¨t
) {

129 
ma
->
°©us
 = 
MA_FREE
;

133 
	`¥ötf
("no suchállocatedáddress\n");

134 
	}
}

	@lib/misc.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

42 
PUBLIC
 
	$£nd_ªcv
(
fun˘i⁄
, 
§c_de°
, 
MESSAGE
* 
msg
)

44 
ªt
 = 0;

46 i‡(
fun˘i⁄
 =
RECEIVE
)

47 
	`mem£t
(
msg
, 0, (
MESSAGE
));

49 
fun˘i⁄
) {

50 
BOTH
:

51 
ªt
 = 
	`£ndªc
(
SEND
, 
§c_de°
, 
msg
);

52 i‡(
ªt
 == 0)

53 
ªt
 = 
	`£ndªc
(
RECEIVE
, 
§c_de°
, 
msg
);

55 
SEND
:

56 
RECEIVE
:

57 
ªt
 = 
	`£ndªc
(
fun˘i⁄
, 
§c_de°
, 
msg
);

60 
	`as£π
((
fun˘i⁄
 =
BOTH
) ||

61 (
fun˘i⁄
 =
SEND
Ë|| (fun˘i⁄ =
RECEIVE
));

65  
ªt
;

66 
	}
}

82 
PUBLIC
 
	$memcmp
(c⁄° * 
s1
, c⁄° *
s2
, 
n
)

84 i‡((
s1
 =0Ë|| (
s2
 == 0)) {

85  (
s1
 - 
s2
);

88 c⁄° * 
p1
 = (c⁄° *)
s1
;

89 c⁄° * 
p2
 = (c⁄° *)
s2
;

90 
i
;

91 
i
 = 0; i < 
n
; i++,
p1
++,
p2
++) {

92 i‡(*
p1
 !*
p2
) {

93  (*
p1
 - *
p2
);

97 
	}
}

112 
PUBLIC
 
	$°rcmp
(c⁄° * 
s1
, c⁄° *
s2
)

114 i‡((
s1
 =0Ë|| (
s2
 == 0)) {

115  (
s1
 - 
s2
);

118 c⁄° * 
p1
 = 
s1
;

119 c⁄° * 
p2
 = 
s2
;

121 ; *
p1
 && *
p2
;Ö1++,p2++) {

122 i‡(*
p1
 !*
p2
) {

127  (*
p1
 - *
p2
);

128 
	}
}

141 
PUBLIC
 * 
	$°rˇt
(* 
s1
, c⁄° *
s2
)

143 i‡((
s1
 =0Ë|| (
s2
 == 0)) {

147 * 
p1
 = 
s1
;

148 ; *
p1
;Ö1++) {}

150 c⁄° * 
p2
 = 
s2
;

151 ; *
p2
; 
p1
++,p2++) {

152 *
p1
 = *
p2
;

154 *
p1
 = 0;

156  
s1
;

157 
	}
}

162 
PUBLIC
 
	$•ö
(* 
func_«me
)

164 
	`¥öé
("\n•önög i¿%†...\n", 
func_«me
);

166 
	}
}

179 
PUBLIC
 
	$as£πi⁄_Áûuª
(*
exp
, *
fûe
, *
ba£_fûe
, 
löe
)

181 
	`¥öé
("%cássert(%s) failed: file: %s, base_file: %s,Ün%d",

182 
MAG_CH_ASSERT
,

183 
exp
, 
fûe
, 
ba£_fûe
, 
löe
);

193 
	`•ö
("assertion_failure()");

196 
__asm__
 
	`__vﬁ©ûe__
("ud2");

197 
	}
}

	@lib/open.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

37 
PUBLIC
 
	$›í
(c⁄° *
∑th«me
, 
Êags
)

39 
MESSAGE
 
msg
;

41 
msg
.
ty≥
 = 
OPEN
;

43 
msg
.
PATHNAME
 = (*)
∑th«me
;

44 
msg
.
FLAGS
 = 
Êags
;

45 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th«me
);

47 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

48 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

50  
msg
.
FD
;

51 
	}
}

	@lib/printf.c

8 
	~"ty≥.h
"

9 
	~"°dio.h
"

10 
	~"c⁄°.h
"

11 
	~"¥Ÿe˘.h
"

12 
	~"°rög.h
"

13 
	~"fs.h
"

14 
	~"mm.h
"

15 
	~"dúít.h
"

16 
	~"uni°d.h
"

17 
	~"°dlib.h
"

18 
	~"¥oc.h
"

19 
	~"ây.h
"

20 
	~"c⁄sﬁe.h
"

21 
	~"globÆ.h
"

22 
	~"keybﬂrd.h
"

23 
	~"¥Ÿo.h
"

75 
PUBLIC
 
	$¥ötf
(c⁄° *
fmt
, ...)

77 
i
;

78 
buf
[
STR_DEFAULT_LEN
];

80 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

81 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨g
);

82 
c
 = 
	`wrôe
(1, 
buf
, 
i
);

84 
	`as£π
(
c
 =
i
);

86  
i
;

87 
	}
}

99 
PUBLIC
 
	$¥öé
(c⁄° *
fmt
, ...)

101 
i
;

102 
buf
[
STR_DEFAULT_LEN
];

104 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

108 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨g
);

109 
	`¥ötx
(
buf
);

111  
i
;

112 
	}
}

	@lib/read.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

39 
PUBLIC
 
	$ªad
(
fd
, *
buf
, 
cou¡
)

41 
MESSAGE
 
msg
;

42 
msg
.
ty≥
 = 
READ
;

43 
msg
.
FD
 = 
fd
;

44 
msg
.
BUF
 = 
buf
;

45 
msg
.
CNT
 = 
cou¡
;

47 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

49  
msg
.
CNT
;

50 
	}
}

	@lib/readdir.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

40 
	#nû
 0

	)

50 
PUBLIC
 
dúít
 *

51 
	$ªaddú
 (
DIR
 * 
__dúp
)

53 i‡(
nû
 =
__dúp
) {

54  
nû
;

57 
dúít
 * 
íåy
;

60 i‡(
__dúp
->
_cou¡
 <= 0) {

62 
__dúp
->
_cou¡
 = 
	`ªad
(__dúp->
_fd
, __dúp->
_buf
, (__dirp->_buf));

63 i‡(
__dúp
->
_cou¡
 <= 0) {

64  
nû
;

67 
__dúp
->
_cou¡
 /(__dúp->
_buf
[0]);

68 
__dúp
->
_±r
 = __dúp->
_buf
;

71 
íåy
 = (
dúít
 *Ë
__dúp
->
_±r
;

72 
__dúp
->
_±r
 += 1;

73 
__dúp
->
_cou¡
 -= 1;

74 
__dúp
->
_pos
 +(*
íåy
);

76 } 
íåy
->
d_öo
 == 0);

77  
íåy
;

78 
	}
}

	@lib/rewinddir.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

35 
	$ªwöddú
(
DIR
 * 
dp
)

37 (Ë
	`£ekdú
(
dp
, 0);

38 
	}
}

	@lib/seekdir.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

43 
PUBLIC
 

44 
	$£ekdú
 (
DIR
 * 
__dúp
, 
off_t
 
__pos
)

46 i‡(
NULL
 =
__dúp
) {

47 
	`¥ötf
("%†%dÇuŒ __dú∞poöãr\n", 
__FILE__
, 
__LINE__
);

51 
__dúp
->
_cou¡
 = 0;

53 i‡(-1 =
	`l£ek
(
__dúp
->
_fd
, 
__pos
, 
SEEK_SET
)) {

54 
	`¥ötf
("%†%dÜ£ek faûed\n", 
__FILE__
, 
__LINE__
);

59 
	}
}

	@lib/stat.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

37 
PUBLIC
 
	$°©
(c⁄° *
∑th
, 
°©
 *
buf
)

39 
MESSAGE
 
msg
;

41 
msg
.
ty≥
 = 
STAT
;

43 
msg
.
PATHNAME
 = (*)
∑th
;

44 
msg
.
BUF
 = (*)
buf
;

45 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th
);

47 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

48 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

50  
msg
.
RETVAL
;

51 
	}
}

62 
PUBLIC
 

63 
	$mkdú
 (c⁄° *
∑th«me
, 
mode
)

65 
MESSAGE
 
msg
;

67 
msg
.
ty≥
 = 
MKDIR
;

68 
	`¥öé
("{lib} MKDIR : %d\n", 
MKDIR
);

69 
msg
.
PATHNAME
 = (*)
∑th«me
;

70 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th«me
);

72 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

73 
	`as£π
(
msg
.
ty≥
 =
SYSCALL_RET
);

75  
msg
.
RETVAL
;

76 
	}
}

	@lib/syslog.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

37 
PUBLIC
 
	$sy¶og
(c⁄° *
fmt
, ...)

39 
i
;

40 
buf
[
STR_DEFAULT_LEN
];

42 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

46 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨g
);

47 
	`as£π
(
	`°æí
(
buf
Ë=
i
);

49  
	`disklog
(
buf
);

50 
	}
}

	@lib/unlink.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

36 
PUBLIC
 
	$u∆ök
(c⁄° * 
∑th«me
)

38 
MESSAGE
 
msg
;

39 
msg
.
ty≥
 = 
UNLINK
;

41 
msg
.
PATHNAME
 = (*)
∑th«me
;

42 
msg
.
NAME_LEN
 = 
	`°æí
(
∑th«me
);

44 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

46  
msg
.
RETVAL
;

47 
	}
}

	@lib/vsprintf.c

8 
	~"ty≥.h
"

9 
	~"°dio.h
"

10 
	~"c⁄°.h
"

11 
	~"¥Ÿe˘.h
"

12 
	~"°rög.h
"

13 
	~"fs.h
"

14 
	~"mm.h
"

15 
	~"dúít.h
"

16 
	~"uni°d.h
"

17 
	~"°dlib.h
"

18 
	~"¥oc.h
"

19 
	~"ây.h
"

20 
	~"c⁄sﬁe.h
"

21 
	~"globÆ.h
"

22 
	~"keybﬂrd.h
"

23 
	~"¥Ÿo.h
"

30 
PRIVATE
 * 
	$i2a
(
vÆ
, 
ba£
, ** 
ps
)

32 
m
 = 
vÆ
 % 
ba£
;

33 
q
 = 
vÆ
 / 
ba£
;

34 i‡(
q
) {

35 
	`i2a
(
q
, 
ba£
, 
ps
);

37 *(*
ps
)++ = (
m
 < 10) ? (m + '0') : (m - 10 + 'A');

39  *
ps
;

40 
	}
}

49 
PUBLIC
 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

51 * 
p
;

53 
va_li°
 
p_√xt_¨g
 = 
¨gs
;

54 
m
;

56 
ö√r_buf
[
STR_DEFAULT_LEN
];

57 
cs
;

58 
Æign_ƒ
;

60 
p
=
buf
;*
fmt
;fmt++) {

61 i‡(*
fmt
 != '%') {

62 *
p
++ = *
fmt
;

66 
Æign_ƒ
 = 0;

69 
fmt
++;

71 i‡(*
fmt
 == '%') {

72 *
p
++ = *
fmt
;

75 i‡(*
fmt
 == '0') {

76 
cs
 = '0';

77 
fmt
++;

80 
cs
 = ' ';

82 (()(*
fmt
) >= '0') && (()(*fmt) <= '9')) {

83 
Æign_ƒ
 *= 10;

84 
Æign_ƒ
 +*
fmt
 - '0';

85 
fmt
++;

88 * 
q
 = 
ö√r_buf
;

89 
	`mem£t
(
q
, 0, (
ö√r_buf
));

91 *
fmt
) {

93 *
q
++ = *((*)
p_√xt_¨g
);

94 
p_√xt_¨g
 += 4;

97 
m
 = *((*)
p_√xt_¨g
);

98 
	`i2a
(
m
, 16, &
q
);

99 
p_√xt_¨g
 += 4;

102 
m
 = *((*)
p_√xt_¨g
);

103 i‡(
m
 < 0) {

104 
m
 = m * (-1);

105 *
q
++ = '-';

107 
	`i2a
(
m
, 10, &
q
);

108 
p_√xt_¨g
 += 4;

111 
	`°r˝y
(
q
, (*((**)
p_√xt_¨g
)));

112 
q
 +
	`°æí
(*((**)
p_√xt_¨g
));

113 
p_√xt_¨g
 += 4;

119 
k
;

120 
k
 = 0; k < ((
Æign_ƒ
 > 
	`°æí
(
ö√r_buf
)) ? (align_nr - strlen(inner_buf)) : 0); k++) {

121 *
p
++ = 
cs
;

123 
q
 = 
ö√r_buf
;

124 *
q
) {

125 *
p
++ = *
q
++;

129 *
p
 = 0;

131  (
p
 - 
buf
);

132 
	}
}

138 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

140 
va_li°
 
¨g
 = (va_li°)((*)(&
fmt
) + 4);

141  
	`v•rötf
(
buf
, 
fmt
, 
¨g
);

142 
	}
}

	@lib/wait.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

36 
PUBLIC
 
	$waô
(* 
°©us
)

38 
MESSAGE
 
msg
;

39 
msg
.
ty≥
 = 
WAIT
;

41 
	`£nd_ªcv
(
BOTH
, 
TASK_MM
, &
msg
);

43 *
°©us
 = 
msg
.
STATUS
;

45  (
msg
.
PID
 =
NO_TASK
 ? -1 : msg.PID);

46 
	}
}

	@lib/write.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"¥Ÿo.h
"

39 
PUBLIC
 
	$wrôe
(
fd
, c⁄° *
buf
, 
cou¡
)

41 
MESSAGE
 
msg
;

42 
msg
.
ty≥
 = 
WRITE
;

43 
msg
.
FD
 = 
fd
;

44 
msg
.
BUF
 = (*)
buf
;

45 
msg
.
CNT
 = 
cou¡
;

47 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg
);

49  
msg
.
CNT
;

50 
	}
}

	@mm/break.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"°rög.h
"

24 
	~"fs.h
"

25 
	~"mm.h
"

26 
	~"dúít.h
"

27 
	~"uni°d.h
"

28 
	~"°dlib.h
"

29 
	~"¥oc.h
"

30 
	~"ây.h
"

31 
	~"c⁄sﬁe.h
"

32 
	~"globÆ.h
"

33 
	~"keybﬂrd.h
"

34 
	~"¥Ÿo.h
"

35 
	~"ñf.h
"

45 
PUBLIC
 

46 
	$do_brk
 ( )

49 
§c
 = 
mm_msg
.
sour˚
;

50 
¥oc
 * 
p
 = &(
¥oc_èbÀ
[
§c
]);

53 
u32
 
brk_addr
 = (u32)(
mm_msg
.
BRK_ADDR
);

54 i‡(
brk_addr
 >
p
->
íd_ãxt
 &&

55 
brk_addr
 < 
p
->
°¨t_°ack
 - 
MM_STACK_GAP
) {

56 
p
->
brk
 = 
brk_addr
;

60 
mm_msg
.
BRK_ADDR
 = 
p
->
brk
;

62 
	}
}

	@mm/exec.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

26 
	~"ñf.h
"

28 
PRIVATE
 
ãŒ_fs
(
wh©
, 
p1
, 
p2
, 
p3
);

40 
PRIVATE
 

41 
	$ãŒ_fs
 (
wh©
, 
p1
, 
p2
, 
p3
)

48 
MESSAGE
 
m
;

49 
m
.
ty≥

wh©
;

50 
m
.
PROC_NR
 = 
p1
;

51 
m
.
sour˚
 = 
TASK_MM
;

52 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
m
);

53 
	`as£π
(
SYSCALL_RET
 =
m
.
ty≥
);

54 
	}
}

64 
PUBLIC
 
	$do_exec
()

67 
«me_Àn
 = 
mm_msg
.
NAME_LEN
;

68 
§c
 = 
mm_msg
.
sour˚
;

69 
	`as£π
(
«me_Àn
 < 
MAX_PATH
);

71 
∑th«me
[
MAX_PATH
];

72 
	`phys_c›y
((*)
	`va2œ
(
TASK_MM
, 
∑th«me
),

73 (*)
	`va2œ
(
§c
, 
mm_msg
.
PATHNAME
),

74 
«me_Àn
);

75 
∑th«me
[
«me_Àn
] = 0;

78 
	`ãŒ_fs
(
CHDIR
, 
§c
, 0, 0);

81 
°©
 
s
;

82 
ªt
 = 
	`°©
(
∑th«me
, &
s
);

83 i‡(
ªt
 != 0) {

84 
	`¥öé
("{MM} MM::do_exec()::°©(Ëªtu∫†îr‹. %s", 
∑th«me
);

89 
fd
 = 
	`›í
(
∑th«me
, 
O_RDWR
);

90 i‡(
fd
 == -1)

92 
	`as£π
(
s
.
°_size
 < 
MMBUF_SIZE
);

93 
	`ªad
(
fd
, 
mmbuf
, 
s
.
°_size
);

94 
	`˛o£
(
fd
);

97 
‹ig_°ack_Àn
 = 
mm_msg
.
BUF_LEN
;

98 
°ackc›y
[
PROC_ORIGIN_STACK
];

99 
	`phys_c›y
((*)
	`va2œ
(
TASK_MM
, 
°ackc›y
),

100 (*)
	`va2œ
(
§c
, 
mm_msg
.
BUF
),

101 
‹ig_°ack_Àn
);

104 
	`‰ì_mem
(
§c
);

107 
u32
 
°¨t_ãxt
 = 0, 
íd_ãxt
 = 0, 
°¨t_d©a
 = 0, 
íd_d©a
 = 0;

110 
Elf32_Ehdr
* 
ñf_hdr
 = (Elf32_Ehdr*)(
mmbuf
);

111 
i
;

112 
i
 = 0; i < 
ñf_hdr
->
e_phnum
; i++) {

113 
Elf32_Phdr
* 
¥og_hdr
 = (Elf32_Phdr*)(
mmbuf
 + 
ñf_hdr
->
e_phoff
 +

114 (
i
 * 
ñf_hdr
->
e_phítsize
));

115 i‡(
¥og_hdr
->
p_ty≥
 =
PT_LOAD
) {

116 
	`as£π
(
¥og_hdr
->
p_vaddr
 +Örog_hdr->
p_memsz
 <

117 
PROC_IMAGE_SIZE_DEFAULT
);

118 
	`phys_c›y
((*)
	`va2œ
(
§c
, (*)
¥og_hdr
->
p_vaddr
),

119 (*)
	`va2œ
(
TASK_MM
,

120 
mmbuf
 + 
¥og_hdr
->
p_off£t
),

121 
¥og_hdr
->
p_fûesz
);

122 i‡((
PF_R
 | 
PF_W
Ë=
¥og_hdr
->
p_Êags
) {

126 
°¨t_d©a
 = 
¥og_hdr
->
p_vaddr
;

127 
íd_d©a
 = 
°¨t_d©a
 + 
¥og_hdr
->
p_memsz
;

128 } i‡((
PF_R
 | 
PF_X
Ë=
¥og_hdr
->
p_Êags
) {

132 
°¨t_ãxt
 = 
¥og_hdr
->
p_vaddr
;

133 
íd_ãxt
 = 
°¨t_ãxt
 + 
¥og_hdr
->
p_memsz
;

145 
	`öôül_brk
(
§c
, 
°¨t_ãxt
, 
íd_ãxt
, 
°¨t_d©a
, 
íd_d©a
);

147 * 
‹ig_°ack
 = (*)(
VM_SIZE
 - 
PROC_ORIGIN_STACK
);

149 
dñè
 = ()
‹ig_°ack
 - ()
mm_msg
.
BUF
;

151 
¨gc
 = 0;

152 i‡(
‹ig_°ack_Àn
) {

153 **
q
 = (**)
°ackc›y
;

154 ; *
q
 !0; q++,
¨gc
++)

155 *
q
 +
dñè
;

158 
	`phys_c›y
((*)
	`va2œ
(
§c
, 
‹ig_°ack
),

159 (*)
	`va2œ
(
TASK_MM
, 
°ackc›y
),

160 
‹ig_°ack_Àn
);

162 
¥oc_èbÀ
[
§c
].
ªgs
.
ecx
 = 
¨gc
;

163 
¥oc_èbÀ
[
§c
].
ªgs
.
óx
 = (
u32
)
‹ig_°ack
;

166 
¥oc_èbÀ
[
§c
].
ªgs
.
eù
 = 
ñf_hdr
->
e_íåy
;

167 
¥oc_èbÀ
[
§c
].
ªgs
.
e•
 = 
VM_SIZE
 - 
PROC_ORIGIN_STACK
;

169 
	`°r˝y
(
¥oc_èbÀ
[
§c
].
«me
, 
∑th«me
);

172 
	}
}

185 
PUBLIC
 

186 
	$öôül_brk
 ( 
pid
,

187 
u32
 
°¨t_ãxt
,

188 
u32
 
íd_ãxt
,

189 
u32
 
°¨t_d©a
,

190 
u32
 
íd_d©a
)

194 i‡((!
°¨t_d©a
Ë|| (!
íd_d©a
)) {

196 
°¨t_d©a
 = 
íd_d©a
 = (
íd_ãxt
 + 
PAGE_SIZE
);

198 
u32
 
brk
 = 
íd_d©a
;

199 
u32
 
°¨t_°ack
 = 
VM_SIZE
 - 
PROC_ORIGIN_STACK
 - 
MM_STACK_SIZE
;

201 
¥oc
 * 
p
 = &(
¥oc_èbÀ
[
pid
]);

202 
p
->
°¨t_ãxt
 = start_text;

203 
p
->
íd_ãxt
 =Énd_text;

204 
p
->
°¨t_d©a
 = start_data;

205 
p
->
íd_d©a
 =Énd_data;

206 
p
->
°¨t_°ack
 = start_stack;

207 
p
->
brk
 = brk;

208 
	}
}

	@mm/forkexit.c

10 
	~"ty≥.h
"

11 
	~"°dio.h
"

12 
	~"c⁄°.h
"

13 
	~"¥Ÿe˘.h
"

14 
	~"°rög.h
"

15 
	~"fs.h
"

16 
	~"mm.h
"

17 
	~"dúít.h
"

18 
	~"uni°d.h
"

19 
	~"°dlib.h
"

20 
	~"¥oc.h
"

21 
	~"ây.h
"

22 
	~"c⁄sﬁe.h
"

23 
	~"globÆ.h
"

24 
	~"keybﬂrd.h
"

25 
	~"¥Ÿo.h
"

28 
PRIVATE
 
˛ónup
(
¥oc
 *Öroc);

38 
PUBLIC
 
	$do_f‹k
()

41 
¥oc
* 
p
 = 
¥oc_èbÀ
;

42 
i
;

43 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++,
p
++)

44 i‡(
p
->
p_Êags
 =
FREE_SLOT
)

47 
chûd_pid
 = 
i
;

48 
	`as£π
(
p
 =&
¥oc_èbÀ
[
chûd_pid
]);

49 
	`as£π
(
chûd_pid
 >
NR_TASKS
 + 
NR_NATIVE_PROCS
);

50 i‡(
i
 =
NR_TASKS
 + 
NR_PROCS
)

52 
	`as£π
(
i
 < 
NR_TASKS
 + 
NR_PROCS
);

55 
pid
 = 
mm_msg
.
sour˚
;

56 
u16
 
chûd_ldt_£l
 = 
p
->
ldt_£l
;

57 *
p
 = 
¥oc_èbÀ
[
pid
];

58 
p
->
ldt_£l
 = 
chûd_ldt_£l
;

59 
p
->
p_∑ª¡
 = 
pid
;

60 
	`•rötf
(
p
->
«me
, "%s_%d", 
¥oc_èbÀ
[
pid
].«me, 
chûd_pid
);

63 
des¸ùt‹
 * 
µd
;

66 
µd
 = &
¥oc_èbÀ
[
pid
].
ldts
[
INDEX_LDT_C
];

68 
ˇŒî_T_ba£
 = 
	`ªas£mbly
(
µd
->
ba£_high
, 24,

69 
µd
->
ba£_mid
, 16,

70 
µd
->
ba£_low
);

73 
ˇŒî_T_limô
 = 
	`ªas£mbly
(0, 0,

74 (
µd
->
limô_high_©å2
 & 0xF), 16,

75 
µd
->
limô_low
);

77 
ˇŒî_T_size
 = ((
ˇŒî_T_limô
 + 1) *

78 ((
µd
->
limô_high_©å2
 & (
DA_LIMIT_4K
 >> 8)) ?

82 
µd
 = &
¥oc_èbÀ
[
pid
].
ldts
[
INDEX_LDT_RW
];

84 
ˇŒî_D_S_ba£
 = 
	`ªas£mbly
(
µd
->
ba£_high
, 24,

85 
µd
->
ba£_mid
, 16,

86 
µd
->
ba£_low
);

89 
ˇŒî_D_S_limô
 = 
	`ªas£mbly
((
µd
->
limô_high_©å2
 & 0xF), 16,

91 
µd
->
limô_low
);

93 
ˇŒî_D_S_size
 = ((
ˇŒî_T_limô
 + 1) *

94 ((
µd
->
limô_high_©å2
 & (
DA_LIMIT_4K
 >> 8)) ?

98 
	`as£π
((
ˇŒî_T_ba£
 =
ˇŒî_D_S_ba£
 ) &&

99 (
ˇŒî_T_limô
 <
ˇŒî_D_S_limô
) &&

100 (
ˇŒî_T_size
 <
ˇŒî_D_S_size
 ));

104 
chûd_ba£
 = 
	`Æloc_mem
(
chûd_pid
, 
ˇŒî_T_size
);

107 i‡(0 =
	`°rcmp
("INIT", 
¥oc_èbÀ
[
pid
].
«me
)) {

109 
	`phys_c›y
((*)
chûd_ba£
, (*)
ˇŒî_D_S_ba£
, 
ˇŒî_D_S_size
);

112 
	`c›y_⁄_wrôe
(
ˇŒî_D_S_ba£
, 
chûd_ba£
, 
ˇŒî_D_S_size
);

116 
	`öô_desc
(&
p
->
ldts
[
INDEX_LDT_C
],

117 
chûd_ba£
,

118 (
VM_SIZE
 - 1Ë>> 
LIMIT_4K_SHIFT
,

119 
DA_LIMIT_4K
 | 
DA_32
 | 
DA_C
 | 
PRIVILEGE_USER
 << 5);

120 
	`öô_desc
(&
p
->
ldts
[
INDEX_LDT_RW
],

121 
chûd_ba£
,

122 (
VM_SIZE
 - 1Ë>> 
LIMIT_4K_SHIFT
,

123 
DA_LIMIT_4K
 | 
DA_32
 | 
DA_DRW
 | 
PRIVILEGE_USER
 << 5);

126 
MESSAGE
 
msg2fs
;

127 
msg2fs
.
ty≥
 = 
FORK
;

128 
msg2fs
.
PID
 = 
chûd_pid
;

129 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg2fs
);

132 
mm_msg
.
PID
 = 
chûd_pid
;

135 
MESSAGE
 
m
;

136 
m
.
ty≥
 = 
SYSCALL_RET
;

137 
m
.
RETVAL
 = 0;

138 
m
.
PID
 = 0;

139 
	`£nd_ªcv
(
SEND
, 
chûd_pid
, &
m
);

142 
	}
}

185 
PUBLIC
 
	$do_exô
(
°©us
)

187 
i
;

188 
pid
 = 
mm_msg
.
sour˚
;

189 
∑ª¡_pid
 = 
¥oc_èbÀ
[
pid
].
p_∑ª¡
;

190 
¥oc
 * 
p
 = &
¥oc_èbÀ
[
pid
];

193 
MESSAGE
 
msg2fs
;

194 
msg2fs
.
ty≥
 = 
EXIT
;

195 
msg2fs
.
PID
 = 
pid
;

196 
	`£nd_ªcv
(
BOTH
, 
TASK_FS
, &
msg2fs
);

198 
	`‰ì_mem
(
pid
);

200 
p
->
exô_°©us
 = 
°©us
;

202 i‡(
¥oc_èbÀ
[
∑ª¡_pid
].
p_Êags
 & 
WAITING
) {

203 
¥oc_èbÀ
[
∑ª¡_pid
].
p_Êags
 &~
WAITING
;

204 
	`˛ónup
(&
¥oc_èbÀ
[
pid
]);

207 
¥oc_èbÀ
[
pid
].
p_Êags
 |
HANGING
;

211 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++) {

212 i‡(
¥oc_èbÀ
[
i
].
p_∑ª¡
 =
pid
) {

213 
¥oc_èbÀ
[
i
].
p_∑ª¡
 = 
INIT
;

214 i‡((
¥oc_èbÀ
[
INIT
].
p_Êags
 & 
WAITING
) &&

215 (
¥oc_èbÀ
[
i
].
p_Êags
 & 
HANGING
)) {

216 
¥oc_èbÀ
[
INIT
].
p_Êags
 &~
WAITING
;

217 
	`˛ónup
(&
¥oc_èbÀ
[
i
]);

221 
	}
}

233 
PRIVATE
 
	$˛ónup
(
¥oc
 *Öroc)

235 
MESSAGE
 
msg2∑ª¡
;

236 
msg2∑ª¡
.
ty≥
 = 
SYSCALL_RET
;

237 
msg2∑ª¡
.
PID
 = 
	`¥oc2pid
(
¥oc
);

238 
msg2∑ª¡
.
STATUS
 = 
¥oc
->
exô_°©us
;

239 
	`£nd_ªcv
(
SEND
, 
¥oc
->
p_∑ª¡
, &
msg2∑ª¡
);

241 
¥oc
->
p_Êags
 = 
FREE_SLOT
;

242 
	}
}

263 
PUBLIC
 
	$do_waô
()

265 
pid
 = 
mm_msg
.
sour˚
;

267 
i
;

268 
chûdªn
 = 0;

269 
¥oc
* 
p_¥oc
 = 
¥oc_èbÀ
;

270 
i
 = 0; i < 
NR_TASKS
 + 
NR_PROCS
; i++,
p_¥oc
++) {

271 i‡(
p_¥oc
->
p_∑ª¡
 =
pid
) {

272 
chûdªn
++;

273 i‡(
p_¥oc
->
p_Êags
 & 
HANGING
) {

274 
	`˛ónup
(
p_¥oc
);

280 i‡(
chûdªn
) {

282 
¥oc_èbÀ
[
pid
].
p_Êags
 |
WAITING
;

286 
MESSAGE
 
msg
;

287 
msg
.
ty≥
 = 
SYSCALL_RET
;

288 
msg
.
PID
 = 
NO_TASK
;

289 
	`£nd_ªcv
(
SEND
, 
pid
, &
msg
);

291 
	}
}

	@mm/main.c

10 
	~"ty≥.h
"

11 
	~"c⁄fig.h
"

12 
	~"°dio.h
"

13 
	~"c⁄°.h
"

14 
	~"¥Ÿe˘.h
"

15 
	~"°rög.h
"

16 
	~"fs.h
"

17 
	~"mm.h
"

18 
	~"dúít.h
"

19 
	~"uni°d.h
"

20 
	~"°dlib.h
"

21 
	~"¥oc.h
"

22 
	~"ây.h
"

23 
	~"c⁄sﬁe.h
"

24 
	~"globÆ.h
"

25 
	~"keybﬂrd.h
"

26 
	~"¥Ÿo.h
"

28 
PUBLIC
 
do_f‹k_ã°
();

30 
PRIVATE
 
öô_mm
();

39 
PUBLIC
 
	$èsk_mm
()

41 
	`öô_mm
();

44 
	`£nd_ªcv
(
RECEIVE
, 
ANY
, &
mm_msg
);

45 
§c
 = 
mm_msg
.
sour˚
;

46 
ª∂y
 = 1;

48 
msgty≥
 = 
mm_msg
.
ty≥
;

50 
msgty≥
) {

51 
FORK
:

52 
mm_msg
.
RETVAL
 = 
	`do_f‹k
();

54 
EXIT
:

55 
	`do_exô
(
mm_msg
.
STATUS
);

56 
ª∂y
 = 0;

58 
EXEC
:

59 
mm_msg
.
RETVAL
 = 
	`do_exec
();

61 
WAIT
:

62 
	`do_waô
();

63 
ª∂y
 = 0;

65 
BRK
:

66 
mm_msg
.
RETVAL
 = 
	`do_brk
();

69 
	`dump_msg
("MM::unknow¿msg", &
mm_msg
);

70 
	`as£π
(0);

74 i‡(
ª∂y
) {

75 
mm_msg
.
ty≥
 = 
SYSCALL_RET
;

76 
	`£nd_ªcv
(
SEND
, 
§c
, &
mm_msg
);

79 
	}
}

88 
PRIVATE
 
	$öô_mm_∑ge_èbÀ
()

90 
i
;

91 
i
 = 0; i < 
ƒ_∑ge
; i++) {

92 
∑ge_èbÀ
[
i
] = 
MM_PAGE_FREE
;

94 ; 
i
 < 
MM_NR_PAGE
; i++) {

95 
∑ge_èbÀ
[
i
] = 
MM_PAGE_UNAVAILABLE
;

97 
	}
}

108 
PRIVATE
 
	$öô_mm
()

110 
boŸ_∑øms
 
bp
;

111 
	`gë_boŸ_∑øms
(&
bp
);

113 
mem‹y_size
 = 
bp
.
mem_size
;

114 
mm_‰ì_mem
 = 
mem‹y_size
 - 
MM_KERNEL_END
;

115 
ƒ_∑ge
 = (
bp
.
mem_size
 - 
MM_KERNEL_END
Ë/ 
PAGE_SIZE
;

117 
	`öô_mm_∑ge_èbÀ
();

120 
	`¥öé
("{MM} memsize:%dMB\n", 
mem‹y_size
 / (1024 * 1024));

121 
	}
}

134 
PUBLIC
 
	$Æloc_mem
(
pid
, 
memsize
)

136 
	`as£π
(
pid
 >(
NR_TASKS
 + 
NR_NATIVE_PROCS
));

137 i‡(
memsize
 > 
VM_SIZE
) {

138 
	`∑nic
("unsupported memoryÑequest: %d. "

140 
memsize
,

141 
VM_SIZE
);

144 
ba£
 = (
pid
 - (
NR_TASKS
 + 
NR_NATIVE_PROCS
Ë+ 1Ë* 
VM_SIZE
;

146  
ba£
;

147 
	}
}

159 
PUBLIC
 
	$‰ì_mem
(
pid
)

162 
des¸ùt‹
 * 
µd
;

165 
µd
 = &
¥oc_èbÀ
[
pid
].
ldts
[
INDEX_LDT_C
];

167 
ˇŒî_T_ba£
 = 
	`ªas£mbly
(
µd
->
ba£_high
, 24,

168 
µd
->
ba£_mid
, 16,

169 
µd
->
ba£_low
);

172 
ˇŒî_T_limô
 = 
	`ªas£mbly
(0, 0,

173 (
µd
->
limô_high_©å2
 & 0xF), 16,

174 
µd
->
limô_low
);

176 
ˇŒî_T_size
 = ((
ˇŒî_T_limô
 + 1) *

177 ((
µd
->
limô_high_©å2
 & (
DA_LIMIT_4K
 >> 8)) ?

181 
µd
 = &
¥oc_èbÀ
[
pid
].
ldts
[
INDEX_LDT_RW
];

183 
ˇŒî_D_S_ba£
 = 
	`ªas£mbly
(
µd
->
ba£_high
, 24,

184 
µd
->
ba£_mid
, 16,

185 
µd
->
ba£_low
);

188 
ˇŒî_D_S_limô
 = 
	`ªas£mbly
((
µd
->
limô_high_©å2
 & 0xF), 16,

190 
µd
->
limô_low
);

192 
ˇŒî_D_S_size
 = ((
ˇŒî_T_limô
 + 1) *

193 ((
µd
->
limô_high_©å2
 & (
DA_LIMIT_4K
 >> 8)) ?

197 
	`as£π
((
ˇŒî_T_ba£
 =
ˇŒî_D_S_ba£
 ) &&

198 (
ˇŒî_T_limô
 <
ˇŒî_D_S_limô
) &&

199 (
ˇŒî_T_size
 <
ˇŒî_D_S_size
 ));

202 
	`‰ì_∑ge_èbÀs
(
ˇŒî_D_S_ba£
, 
ˇŒî_D_S_size
);

205 
	}
}

	@mm/memory.c

19 
	~"ty≥.h
"

20 
	~"°dio.h
"

21 
	~"c⁄°.h
"

22 
	~"¥Ÿe˘.h
"

23 
	~"fs.h
"

24 
	~"mm.h
"

25 
	~"dúít.h
"

26 
	~"uni°d.h
"

27 
	~"°dlib.h
"

28 
	~"ây.h
"

29 
	~"c⁄sﬁe.h
"

30 
	~"¥oc.h
"

31 
	~"°rög.h
"

32 
	~"globÆ.h
"

33 
	~"¥Ÿo.h
"

36 
PRIVATE
 
u32
 
gë_‰ì_∑ge
();

37 
PRIVATE
 
un_wp_∑ge
 (
u32
 * 
±e
);

38 
PRIVATE
 
wrôe_vîify
(
u32
 
addªss
);

39 
PRIVATE
 
‰ì_∑ge
 (
u32
 
addr
);

47 
	#övÆid©e
() \

48 
__asm__
 
	`__vﬁ©ûe__
 ("mov»%%óx, %%¸3"::"a"(
PDT_ADDR
))

	)

57 
PRIVATE
 
u32
 
	$gë_‰ì_∑ge
() {

58 
i
;

59 
i
 = 0; i < 
ƒ_∑ge
 && 
MM_PAGE_FREE
 !
∑ge_èbÀ
[i]; i++);

60 i‡(
ƒ_∑ge
 =
i
) {

61 
	`sys_¥ötx
(0, 0, "\002nÿíoughÖage\n", 
p_¥oc_ªady
);

64 
∑ge_èbÀ
[
i
]++;

66 
mm_‰ì_mem
 -
PAGE_SIZE
;

67 
u32
 
∑ge
 = 
MM_KERNEL_END
 + 0x1000 * 
i
;

69 
	`mem£t
((*)
∑ge
, 0, 
PAGE_SIZE
);

70  
∑ge
;

71 
	}
}

80 
PRIVATE
 

81 
	$‰ì_∑ge
 (
u32
 
addr
)

83 i‡(
addr
 < 
MM_KERNEL_END
) {

87 i‡(
addr
 >
mem‹y_size
) {

89 
	`sys_¥ötx
(0, 0, "\002åyÅÿ‰ìÇ⁄exi°íà∑ge\n", 
p_¥oc_ªady
);

91 
∑ge_öd
 = 
	`GET_IND_IN_PT
(
addr
);

92 i‡(
∑ge_èbÀ
[
∑ge_öd
] > 0) {

94 
∑ge_èbÀ
[
∑ge_öd
]--;

95 i‡(!
∑ge_èbÀ
[
∑ge_öd
]) {

96 
mm_‰ì_mem
 +
PAGE_SIZE
;

100 
∑ge_èbÀ
[
∑ge_öd
] = 0;

101 
	`sys_¥ötx
(0, 0, "\002åyÅÿ‰ì fªê∑ge\n", 
p_¥oc_ªady
);

103 
	}
}

113 
PUBLIC
 

114 
	$‰ì_∑ge_èbÀs
 (
u32
 
°¨t
, u32 
size
)

116 
u32
* 
pd
 = (u32 *)
PDT_ADDR
;

117 
u32
* 
±
;

118 
pde_Æign
;

119 
i
;

121 i‡(
°¨t
 & 
MM_4M_MASK
) {

122 
	`∑nic
("free_page_tables called with wrongálignment\n");

124 i‡(!
°¨t
) {

125 
	`∑nic
("tryÅo free kernel space");

128 
size
 = (sizê+ 
MM_4M_MASK
) >> 22;

129 
pde_Æign
 = (
°¨t
 >> 22);

131 
size
-->0) {

132 i‡(!(
pd
[
pde_Æign
] & 
MM_PG_P
)) {

136 
±
 = (
u32
 *)(
pd
[
pde_Æign
] & 
MM_PT_MASK
);

137 
i
 = 0; i < 
NR_ENTRY_PER_PAGE
; i++) {

138 i‡(
±
[
i
] & 
MM_PG_P
) {

139 
	`‰ì_∑ge
(
±
[
i
] & 
MM_PT_MASK
);

141 
±
[
i
] = 0;

143 
	`‰ì_∑ge
((
u32
)
±
);

144 
pd
[
pde_Æign
] = 0;

145 
pde_Æign
++;

147 
	}
}

157 
PUBLIC
 
	$do_no_∑ge
(
u32
 
îr‹_code
, u32 
addªss
) {

158 i‡(
addªss
 < 
MM_KERNEL_END
) {

159 
	`sys_¥ötx
(0, 0, "\002do_no_∑gê£gmíàÁu…\n", 
p_¥oc_ªady
);

162 
u32
 *
pd
 = (u32 *)
PDT_ADDR
;

163 
u32
 *
±
;

164 
addªss
 &
MM_PT_MASK
;

166 
±_Æign
 = 
addªss
 >> 22;

167 
±
 = (
u32
 *)
pd
[
±_Æign
];

168 i‡(! ((
u32
)
±
 & 
MM_PG_P
)) {

170 
±
 = (
u32
 *)
	`gë_‰ì_∑ge
();

171 
pd
[
±_Æign
] = (
u32
)
±


172 | 
MM_PG_P


173 | 
MM_PG_USU


174 | 
MM_PG_RWW
;

176 
±
 = (
u32
 *Ë((u32Ìà& 
MM_PT_MASK
);

179 
±
[(
addªss
 >> 12Ë& 
MM_PTE_MASK
] = 
	`gë_‰ì_∑ge
()

180 | 
MM_PG_P


181 | 
MM_PG_USU


182 | 
MM_PG_RWW
;

185 
	`övÆid©e
();

186 
	}
}

195 
PRIVATE
 

196 
	$un_wp_∑ge
 (
u32
 * 
±e
)

198 
u32
 
‹ig_∑ge
;

199 
‹ig_∑ge
 = *
±e
 & 
MM_PT_MASK
;

200 
ödex
 = 
	`GET_IND_IN_PT
(
‹ig_∑ge
);

201 i‡(1 =
∑ge_èbÀ
[
ödex
]) {

202 *
±e
 |
MM_PG_RWW
;

203 
	`övÆid©e
();

205 *
±e
 = 
	`gë_‰ì_∑ge
()

206 | 
MM_PG_P


207 | 
MM_PG_USU


208 | 
MM_PG_RWW
;

211 
∑ge_èbÀ
[
ödex
]--;

213 
	`övÆid©e
();

214 
	`phys_c›y
((*)(*
±e
 & 
MM_PT_MASK
),

215 (*)(
‹ig_∑ge
 & 
MM_PT_MASK
),

216 
PAGE_SIZE
);

219 
	}
}

229 
PRIVATE
 

230 
	$wrôe_vîify
 (
u32
 
addªss
)

232 i‡(
addªss
 < 
MM_KERNEL_END
) {

237 
u32
 *
pd
 = (u32 *)
PDT_ADDR
;

238 
u32
 *
±
;

239 
addªss
 &
MM_PT_MASK
;

241 
±_Æign
 = 
addªss
 >> 22;

242 
±
 = (
u32
 *)
pd
[
±_Æign
];

243 i‡(! ((
u32
)
±
 & 
MM_PG_P
)) {

247 
±
 = (
u32
 *Ë((u32Ìà& 
MM_PT_MASK
);

250 
±e_öd
 = ((
addªss
 >> 12Ë& 
MM_PTE_MASK
);

251 i‡(
MM_PG_P
 =(
±
[
±e_öd
] & (MM_PG_P | 
MM_PG_RWW
))) {

252 
	`un_wp_∑ge
(&(
±
[
±e_öd
]));

254 
	}
}

264 
PUBLIC
 

265 
	$vîify_¨ó
 (
u32
 
addªss
, 
size
)

268 
addªss
 &
MM_PT_MASK
;

270 
size
 +(
addªss
 & 
MM_PTE_MASK
);

271 
size
 > 0) {

272 
size
 -
PAGE_SIZE
;

273 
	`wrôe_vîify
(
addªss
);

274 
addªss
 +
PAGE_SIZE
;

276 
	}
}

286 
PUBLIC
 
	$do_wp_∑ge
(
u32
 
îr‹_code
, u32 
addªss
) {

287 i‡(
addªss
 < 
MM_KERNEL_END
) {

288 
	`sys_¥ötx
(0, 0, "\002do_wp_∑gê£gmíàÁu…\n", 
p_¥oc_ªady
);

291 
u32
 *
pd
 = (u32 *)
PDT_ADDR
;

292 
u32
 *
±
;

293 
addªss
 &
MM_PT_MASK
;

295 
±_Æign
 = 
addªss
 >> 22;

296 
±
 = (
u32
 *)
pd
[
±_Æign
];

297 i‡(! ((
u32
)
±
 & 
MM_PG_P
)) {

299 
±
 = (
u32
 *)
	`gë_‰ì_∑ge
();

300 
pd
[
±_Æign
] = (
u32
)
±


301 | 
MM_PG_P


302 | 
MM_PG_USU


303 | 
MM_PG_RWW
;

305 
±
 = (
u32
 *Ë((u32Ìà& 
MM_PT_MASK
);

308 
±e_öd
 = ((
addªss
 >> 12Ë& 
MM_PTE_MASK
);

309 
	`un_wp_∑ge
(&(
±
[
±e_öd
]));

310 
	}
}

322 
PUBLIC
 
	$c›y_⁄_wrôe
(
u32
 
l
, u32 
r
, u32 
size
)

325 i‡((
l
 & 
MM_4M_MASK
Ë|| (
r
 & MM_4M_MASK)) {

326 
	`∑nic
("copy_on_write called whenÇot startát (n * 4M)\n");

329 
u32
 * 
pdt
 = (u32 *)
PDT_ADDR
;

331 
u32
 
l_°¨t_pde
 = 
l
 >> 22;

332 
u32
 
r_°¨t_pde
 = 
r
 >> 22;

334 
u32
 
l_°¨t_±e
 = (
l
 >> 12Ë& 
MM_PTE_MASK
;

335 
u32
 
r_°¨t_±e
 = (
r
 >> 12Ë& 
MM_PTE_MASK
;

337 
i
 = 0;

338 
ƒ_c›y_∑ge
 = 
size
 >> 12;

348 
u32
 
cuº_l_pde
 = 
l_°¨t_pde
;

349 
u32
 
cuº_r_pde
 = 
r_°¨t_pde
;

350 
u32
 
cuº_l_±e
 = 
l_°¨t_±e
;

351 
u32
 
cuº_r_±e
 = 
r_°¨t_±e
;

352 
i
++ < 
ƒ_c›y_∑ge
) {

354 i‡(!(
pdt
[
cuº_l_pde
] & 
MM_PG_P
)) {

355 
pdt
[
cuº_l_pde
] = 
	`gë_‰ì_∑ge
()

356 | 
MM_PG_P


357 | 
MM_PG_USU


358 | 
MM_PG_RWW
;

360 
u32
 * 
l_±
 = (u32 *)(
pdt
[
cuº_l_pde
] & 
MM_PT_MASK
);

362 i‡(!(
pdt
[
cuº_r_pde
] & 
MM_PG_P
)) {

363 
pdt
[
cuº_r_pde
] = 
	`gë_‰ì_∑ge
()

364 | 
MM_PG_P


365 | 
MM_PG_USU


366 | 
MM_PG_RWW
;

368 
u32
 * 
r_±
 = (u32 *)(
pdt
[
cuº_r_pde
] & 
MM_PT_MASK
);

369 i‡(!(
l_±
[
cuº_l_±e
] & 
MM_PG_P
)) {

373 i‡((
r_±
[
cuº_r_±e
] & 
MM_PG_P
)) {

375 
	`∑nic
("copy_on_write whenÅhe des isálreadyÉxist\n");

377 
l_±
[
cuº_l_±e
] &= (~2);

378 
r_±
[
cuº_r_±e
] = 
l_±
[
cuº_l_±e
];

381 
ödex
 = 
	`GET_IND_IN_PT
(
l_±
[
cuº_l_±e
]);

382 
∑ge_èbÀ
[
ödex
]++;

385 
cuº_l_±e
++;

386 
cuº_r_±e
++;

388 i‡(!(
cuº_l_±e
 ^ 
MM_PTE_MASK
)) {

389 
cuº_l_±e
 = 0;

390 
cuº_l_pde
++;

392 i‡(!(
cuº_r_±e
 ^ 
MM_PTE_MASK
)) {

393 
cuº_r_±e
 = 0;

394 
cuº_r_pde
++;

397 
	}
}

	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_LINUX
 3

	)

146 
	#ELFOSABI_SOLARIS
 6

	)

147 
	#ELFOSABI_AIX
 7

	)

148 
	#ELFOSABI_IRIX
 8

	)

149 
	#ELFOSABI_FREEBSD
 9

	)

150 
	#ELFOSABI_TRU64
 10

	)

151 
	#ELFOSABI_MODESTO
 11

	)

152 
	#ELFOSABI_OPENBSD
 12

	)

153 
	#ELFOSABI_ARM_AEABI
 64

	)

154 
	#ELFOSABI_ARM
 97

	)

155 
	#ELFOSABI_STANDALONE
 255

	)

157 
	#EI_ABIVERSION
 8

	)

159 
	#EI_PAD
 9

	)

163 
	#ET_NONE
 0

	)

164 
	#ET_REL
 1

	)

165 
	#ET_EXEC
 2

	)

166 
	#ET_DYN
 3

	)

167 
	#ET_CORE
 4

	)

168 
	#ET_NUM
 5

	)

169 
	#ET_LOOS
 0x„00

	)

170 
	#ET_HIOS
 0x„f‡

	)

171 
	#ET_LOPROC
 0xff00

	)

172 
	#ET_HIPROC
 0xfff‡

	)

176 
	#EM_NONE
 0

	)

177 
	#EM_M32
 1

	)

178 
	#EM_SPARC
 2

	)

179 
	#EM_386
 3

	)

180 
	#EM_68K
 4

	)

181 
	#EM_88K
 5

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

188 
	#EM_VPP500
 17

	)

189 
	#EM_SPARC32PLUS
 18

	)

190 
	#EM_960
 19

	)

191 
	#EM_PPC
 20

	)

192 
	#EM_PPC64
 21

	)

193 
	#EM_S390
 22

	)

195 
	#EM_V800
 36

	)

196 
	#EM_FR20
 37

	)

197 
	#EM_RH32
 38

	)

198 
	#EM_RCE
 39

	)

199 
	#EM_ARM
 40

	)

200 
	#EM_FAKE_ALPHA
 41

	)

201 
	#EM_SH
 42

	)

202 
	#EM_SPARCV9
 43

	)

203 
	#EM_TRICORE
 44

	)

204 
	#EM_ARC
 45

	)

205 
	#EM_H8_300
 46

	)

206 
	#EM_H8_300H
 47

	)

207 
	#EM_H8S
 48

	)

208 
	#EM_H8_500
 49

	)

209 
	#EM_IA_64
 50

	)

210 
	#EM_MIPS_X
 51

	)

211 
	#EM_COLDFIRE
 52

	)

212 
	#EM_68HC12
 53

	)

213 
	#EM_MMA
 54

	)

214 
	#EM_PCP
 55

	)

215 
	#EM_NCPU
 56

	)

216 
	#EM_NDR1
 57

	)

217 
	#EM_STARCORE
 58

	)

218 
	#EM_ME16
 59

	)

219 
	#EM_ST100
 60

	)

220 
	#EM_TINYJ
 61

	)

221 
	#EM_X86_64
 62

	)

222 
	#EM_PDSP
 63

	)

224 
	#EM_FX66
 66

	)

225 
	#EM_ST9PLUS
 67

	)

226 
	#EM_ST7
 68

	)

227 
	#EM_68HC16
 69

	)

228 
	#EM_68HC11
 70

	)

229 
	#EM_68HC08
 71

	)

230 
	#EM_68HC05
 72

	)

231 
	#EM_SVX
 73

	)

232 
	#EM_ST19
 74

	)

233 
	#EM_VAX
 75

	)

234 
	#EM_CRIS
 76

	)

235 
	#EM_JAVELIN
 77

	)

236 
	#EM_FIREPATH
 78

	)

237 
	#EM_ZSP
 79

	)

238 
	#EM_MMIX
 80

	)

239 
	#EM_HUANY
 81

	)

240 
	#EM_PRISM
 82

	)

241 
	#EM_AVR
 83

	)

242 
	#EM_FR30
 84

	)

243 
	#EM_D10V
 85

	)

244 
	#EM_D30V
 86

	)

245 
	#EM_V850
 87

	)

246 
	#EM_M32R
 88

	)

247 
	#EM_MN10300
 89

	)

248 
	#EM_MN10200
 90

	)

249 
	#EM_PJ
 91

	)

250 
	#EM_OPENRISC
 92

	)

251 
	#EM_ARC_A5
 93

	)

252 
	#EM_XTENSA
 94

	)

253 
	#EM_NUM
 95

	)

259 
	#EM_ALPHA
 0x9026

	)

263 
	#EV_NONE
 0

	)

264 
	#EV_CURRENT
 1

	)

265 
	#EV_NUM
 2

	)

271 
Elf32_W‹d
 
	msh_«me
;

272 
Elf32_W‹d
 
	msh_ty≥
;

273 
Elf32_W‹d
 
	msh_Êags
;

274 
Elf32_Addr
 
	msh_addr
;

275 
Elf32_Off
 
	msh_off£t
;

276 
Elf32_W‹d
 
	msh_size
;

277 
Elf32_W‹d
 
	msh_lök
;

278 
Elf32_W‹d
 
	msh_öfo
;

279 
Elf32_W‹d
 
	msh_addølign
;

280 
Elf32_W‹d
 
	msh_ítsize
;

281 } 
	tElf32_Shdr
;

285 
Elf64_W‹d
 
	msh_«me
;

286 
Elf64_W‹d
 
	msh_ty≥
;

287 
Elf64_Xw‹d
 
	msh_Êags
;

288 
Elf64_Addr
 
	msh_addr
;

289 
Elf64_Off
 
	msh_off£t
;

290 
Elf64_Xw‹d
 
	msh_size
;

291 
Elf64_W‹d
 
	msh_lök
;

292 
Elf64_W‹d
 
	msh_öfo
;

293 
Elf64_Xw‹d
 
	msh_addølign
;

294 
Elf64_Xw‹d
 
	msh_ítsize
;

295 } 
	tElf64_Shdr
;

299 
	#SHN_UNDEF
 0

	)

300 
	#SHN_LORESERVE
 0xff00

	)

301 
	#SHN_LOPROC
 0xff00

	)

302 
	#SHN_BEFORE
 0xff00

	)

304 
	#SHN_AFTER
 0xff01

	)

306 
	#SHN_HIPROC
 0xff1‡

	)

307 
	#SHN_LOOS
 0xff20

	)

308 
	#SHN_HIOS
 0xff3‡

	)

309 
	#SHN_ABS
 0xfff1

	)

310 
	#SHN_COMMON
 0xfff2

	)

311 
	#SHN_XINDEX
 0xfff‡

	)

312 
	#SHN_HIRESERVE
 0xfff‡

	)

316 
	#SHT_NULL
 0

	)

317 
	#SHT_PROGBITS
 1

	)

318 
	#SHT_SYMTAB
 2

	)

319 
	#SHT_STRTAB
 3

	)

320 
	#SHT_RELA
 4

	)

321 
	#SHT_HASH
 5

	)

322 
	#SHT_DYNAMIC
 6

	)

323 
	#SHT_NOTE
 7

	)

324 
	#SHT_NOBITS
 8

	)

325 
	#SHT_REL
 9

	)

326 
	#SHT_SHLIB
 10

	)

327 
	#SHT_DYNSYM
 11

	)

328 
	#SHT_INIT_ARRAY
 14

	)

329 
	#SHT_FINI_ARRAY
 15

	)

330 
	#SHT_PREINIT_ARRAY
 16

	)

331 
	#SHT_GROUP
 17

	)

332 
	#SHT_SYMTAB_SHNDX
 18

	)

333 
	#SHT_NUM
 19

	)

334 
	#SHT_LOOS
 0x60000000

	)

335 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

336 
	#SHT_GNU_HASH
 0x6ffffff6

	)

337 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

338 
	#SHT_CHECKSUM
 0x6ffffff8

	)

339 
	#SHT_LOSUNW
 0x6fffffÁ

	)

340 
	#SHT_SUNW_move
 0x6fffffÁ

	)

341 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

342 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

343 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

344 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

345 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

346 
	#SHT_HISUNW
 0x6ffffff‡

	)

347 
	#SHT_HIOS
 0x6ffffff‡

	)

348 
	#SHT_LOPROC
 0x70000000

	)

349 
	#SHT_HIPROC
 0x7ffffff‡

	)

350 
	#SHT_LOUSER
 0x80000000

	)

351 
	#SHT_HIUSER
 0x8ffffff‡

	)

355 
	#SHF_WRITE
 (1 << 0Ë

	)

356 
	#SHF_ALLOC
 (1 << 1Ë

	)

357 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

358 
	#SHF_MERGE
 (1 << 4Ë

	)

359 
	#SHF_STRINGS
 (1 << 5Ë

	)

360 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

361 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

362 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

364 
	#SHF_GROUP
 (1 << 9Ë

	)

365 
	#SHF_TLS
 (1 << 10Ë

	)

366 
	#SHF_MASKOS
 0x0ff00000

	)

367 
	#SHF_MASKPROC
 0xf0000000

	)

368 
	#SHF_ORDERED
 (1 << 30Ë

	)

370 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

374 
	#GRP_COMDAT
 0x1

	)

380 
Elf32_W‹d
 
	m°_«me
;

381 
Elf32_Addr
 
	m°_vÆue
;

382 
Elf32_W‹d
 
	m°_size
;

383 
	m°_öfo
;

384 
	m°_Ÿhî
;

385 
Elf32_Se˘i⁄
 
	m°_shndx
;

386 } 
	tElf32_Sym
;

390 
Elf64_W‹d
 
	m°_«me
;

391 
	m°_öfo
;

392 
	m°_Ÿhî
;

393 
Elf64_Se˘i⁄
 
	m°_shndx
;

394 
Elf64_Addr
 
	m°_vÆue
;

395 
Elf64_Xw‹d
 
	m°_size
;

396 } 
	tElf64_Sym
;

403 
Elf32_HÆf
 
	msi_boundto
;

404 
Elf32_HÆf
 
	msi_Êags
;

405 } 
	tElf32_Symöfo
;

409 
Elf64_HÆf
 
	msi_boundto
;

410 
Elf64_HÆf
 
	msi_Êags
;

411 } 
	tElf64_Symöfo
;

414 
	#SYMINFO_BT_SELF
 0xfff‡

	)

415 
	#SYMINFO_BT_PARENT
 0xff„

	)

416 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

419 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

420 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

421 
	#SYMINFO_FLG_COPY
 0x0004

	)

422 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

425 
	#SYMINFO_NONE
 0

	)

426 
	#SYMINFO_CURRENT
 1

	)

427 
	#SYMINFO_NUM
 2

	)

432 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

433 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

434 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

437 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

438 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

439 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

443 
	#STB_LOCAL
 0

	)

444 
	#STB_GLOBAL
 1

	)

445 
	#STB_WEAK
 2

	)

446 
	#STB_NUM
 3

	)

447 
	#STB_LOOS
 10

	)

448 
	#STB_GNU_UNIQUE
 10

	)

449 
	#STB_HIOS
 12

	)

450 
	#STB_LOPROC
 13

	)

451 
	#STB_HIPROC
 15

	)

455 
	#STT_NOTYPE
 0

	)

456 
	#STT_OBJECT
 1

	)

457 
	#STT_FUNC
 2

	)

458 
	#STT_SECTION
 3

	)

459 
	#STT_FILE
 4

	)

460 
	#STT_COMMON
 5

	)

461 
	#STT_TLS
 6

	)

462 
	#STT_NUM
 7

	)

463 
	#STT_LOOS
 10

	)

464 
	#STT_GNU_IFUNC
 10

	)

465 
	#STT_HIOS
 12

	)

466 
	#STT_LOPROC
 13

	)

467 
	#STT_HIPROC
 15

	)

474 
	#STN_UNDEF
 0

	)

479 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

482 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

485 
	#STV_DEFAULT
 0

	)

486 
	#STV_INTERNAL
 1

	)

487 
	#STV_HIDDEN
 2

	)

488 
	#STV_PROTECTED
 3

	)

495 
Elf32_Addr
 
	mr_off£t
;

496 
Elf32_W‹d
 
	mr_öfo
;

497 } 
	tElf32_Rñ
;

506 
Elf64_Addr
 
	mr_off£t
;

507 
Elf64_Xw‹d
 
	mr_öfo
;

508 } 
	tElf64_Rñ
;

514 
Elf32_Addr
 
	mr_off£t
;

515 
Elf32_W‹d
 
	mr_öfo
;

516 
Elf32_Sw‹d
 
	mr_addíd
;

517 } 
	tElf32_Rña
;

521 
Elf64_Addr
 
	mr_off£t
;

522 
Elf64_Xw‹d
 
	mr_öfo
;

523 
Elf64_Sxw‹d
 
	mr_addíd
;

524 } 
	tElf64_Rña
;

528 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

529 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

530 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

532 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

533 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

534 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

540 
Elf32_W‹d
 
	mp_ty≥
;

541 
Elf32_Off
 
	mp_off£t
;

542 
Elf32_Addr
 
	mp_vaddr
;

543 
Elf32_Addr
 
	mp_∑ddr
;

544 
Elf32_W‹d
 
	mp_fûesz
;

545 
Elf32_W‹d
 
	mp_memsz
;

546 
Elf32_W‹d
 
	mp_Êags
;

547 
Elf32_W‹d
 
	mp_Æign
;

548 } 
	tElf32_Phdr
;

552 
Elf64_W‹d
 
	mp_ty≥
;

553 
Elf64_W‹d
 
	mp_Êags
;

554 
Elf64_Off
 
	mp_off£t
;

555 
Elf64_Addr
 
	mp_vaddr
;

556 
Elf64_Addr
 
	mp_∑ddr
;

557 
Elf64_Xw‹d
 
	mp_fûesz
;

558 
Elf64_Xw‹d
 
	mp_memsz
;

559 
Elf64_Xw‹d
 
	mp_Æign
;

560 } 
	tElf64_Phdr
;

566 
	#PN_XNUM
 0xffff

	)

570 
	#PT_NULL
 0

	)

571 
	#PT_LOAD
 1

	)

572 
	#PT_DYNAMIC
 2

	)

573 
	#PT_INTERP
 3

	)

574 
	#PT_NOTE
 4

	)

575 
	#PT_SHLIB
 5

	)

576 
	#PT_PHDR
 6

	)

577 
	#PT_TLS
 7

	)

578 
	#PT_NUM
 8

	)

579 
	#PT_LOOS
 0x60000000

	)

580 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

581 
	#PT_GNU_STACK
 0x6474e551

	)

582 
	#PT_GNU_RELRO
 0x6474e552

	)

583 
	#PT_LOSUNW
 0x6fffffÁ

	)

584 
	#PT_SUNWBSS
 0x6fffffÁ

	)

585 
	#PT_SUNWSTACK
 0x6ffffffb

	)

586 
	#PT_HISUNW
 0x6fffffff

	)

587 
	#PT_HIOS
 0x6ffffff‡

	)

588 
	#PT_LOPROC
 0x70000000

	)

589 
	#PT_HIPROC
 0x7ffffff‡

	)

593 
	#PF_X
 (1 << 0Ë

	)

594 
	#PF_W
 (1 << 1Ë

	)

595 
	#PF_R
 (1 << 2Ë

	)

596 
	#PF_MASKOS
 0x0ff00000

	)

597 
	#PF_MASKPROC
 0xf0000000

	)

601 
	#NT_PRSTATUS
 1

	)

602 
	#NT_FPREGSET
 2

	)

603 
	#NT_PRPSINFO
 3

	)

604 
	#NT_PRXREG
 4

	)

605 
	#NT_TASKSTRUCT
 4

	)

606 
	#NT_PLATFORM
 5

	)

607 
	#NT_AUXV
 6

	)

608 
	#NT_GWINDOWS
 7

	)

609 
	#NT_ASRS
 8

	)

610 
	#NT_PSTATUS
 10

	)

611 
	#NT_PSINFO
 13

	)

612 
	#NT_PRCRED
 14

	)

613 
	#NT_UTSNAME
 15

	)

614 
	#NT_LWPSTATUS
 16

	)

615 
	#NT_LWPSINFO
 17

	)

616 
	#NT_PRFPXREG
 20

	)

617 
	#NT_PRXFPREG
 0x46e62b7‡

	)

618 
	#NT_PPC_VMX
 0x100

	)

619 
	#NT_PPC_SPE
 0x101

	)

620 
	#NT_PPC_VSX
 0x102

	)

621 
	#NT_386_TLS
 0x200

	)

622 
	#NT_386_IOPERM
 0x201

	)

623 
	#NT_X86_XSTATE
 0x202

	)

627 
	#NT_VERSION
 1

	)

634 
Elf32_Sw‹d
 
	md_èg
;

637 
Elf32_W‹d
 
	md_vÆ
;

638 
Elf32_Addr
 
	md_±r
;

639 } 
	md_un
;

640 } 
	tElf32_Dyn
;

644 
Elf64_Sxw‹d
 
	md_èg
;

647 
Elf64_Xw‹d
 
	md_vÆ
;

648 
Elf64_Addr
 
	md_±r
;

649 } 
	md_un
;

650 } 
	tElf64_Dyn
;

654 
	#DT_NULL
 0

	)

655 
	#DT_NEEDED
 1

	)

656 
	#DT_PLTRELSZ
 2

	)

657 
	#DT_PLTGOT
 3

	)

658 
	#DT_HASH
 4

	)

659 
	#DT_STRTAB
 5

	)

660 
	#DT_SYMTAB
 6

	)

661 
	#DT_RELA
 7

	)

662 
	#DT_RELASZ
 8

	)

663 
	#DT_RELAENT
 9

	)

664 
	#DT_STRSZ
 10

	)

665 
	#DT_SYMENT
 11

	)

666 
	#DT_INIT
 12

	)

667 
	#DT_FINI
 13

	)

668 
	#DT_SONAME
 14

	)

669 
	#DT_RPATH
 15

	)

670 
	#DT_SYMBOLIC
 16

	)

671 
	#DT_REL
 17

	)

672 
	#DT_RELSZ
 18

	)

673 
	#DT_RELENT
 19

	)

674 
	#DT_PLTREL
 20

	)

675 
	#DT_DEBUG
 21

	)

676 
	#DT_TEXTREL
 22

	)

677 
	#DT_JMPREL
 23

	)

678 
	#DT_BIND_NOW
 24

	)

679 
	#DT_INIT_ARRAY
 25

	)

680 
	#DT_FINI_ARRAY
 26

	)

681 
	#DT_INIT_ARRAYSZ
 27

	)

682 
	#DT_FINI_ARRAYSZ
 28

	)

683 
	#DT_RUNPATH
 29

	)

684 
	#DT_FLAGS
 30

	)

685 
	#DT_ENCODING
 32

	)

686 
	#DT_PREINIT_ARRAY
 32

	)

687 
	#DT_PREINIT_ARRAYSZ
 33

	)

688 
	#DT_NUM
 34

	)

689 
	#DT_LOOS
 0x6000000d

	)

690 
	#DT_HIOS
 0x6ffff000

	)

691 
	#DT_LOPROC
 0x70000000

	)

692 
	#DT_HIPROC
 0x7ffffff‡

	)

693 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

698 
	#DT_VALRNGLO
 0x6ffffd00

	)

699 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

700 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

701 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

702 
	#DT_CHECKSUM
 0x6ffffdf8

	)

703 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

704 
	#DT_MOVEENT
 0x6ffffdÁ

	)

705 
	#DT_MOVESZ
 0x6ffffdfb

	)

706 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

707 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

709 
	#DT_SYMINSZ
 0x6ffffd„

	)

710 
	#DT_SYMINENT
 0x6ffffdf‡

	)

711 
	#DT_VALRNGHI
 0x6ffffdff

	)

712 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

713 
	#DT_VALNUM
 12

	)

720 
	#DT_ADDRRNGLO
 0x6fff„00

	)

721 
	#DT_GNU_HASH
 0x6fff„f5

	)

722 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

723 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

724 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

725 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

726 
	#DT_CONFIG
 0x6fff„Á

	)

727 
	#DT_DEPAUDIT
 0x6fff„fb

	)

728 
	#DT_AUDIT
 0x6fff„f¯

	)

729 
	#DT_PLTPAD
 0x6fff„fd

	)

730 
	#DT_MOVETAB
 0x6fff„„

	)

731 
	#DT_SYMINFO
 0x6fff„f‡

	)

732 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

733 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

734 
	#DT_ADDRNUM
 11

	)

738 
	#DT_VERSYM
 0x6ffffff0

	)

740 
	#DT_RELACOUNT
 0x6ffffff9

	)

741 
	#DT_RELCOUNT
 0x6fffffÁ

	)

744 
	#DT_FLAGS_1
 0x6ffffffb

	)

745 
	#DT_VERDEF
 0x6ffffff¯

	)

747 
	#DT_VERDEFNUM
 0x6ffffffd

	)

748 
	#DT_VERNEED
 0x6fffff„

	)

750 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

751 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

752 
	#DT_VERSIONTAGNUM
 16

	)

756 
	#DT_AUXILIARY
 0x7ffffffd

	)

757 
	#DT_FILTER
 0x7ffffff‡

	)

758 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

759 
	#DT_EXTRANUM
 3

	)

762 
	#DF_ORIGIN
 0x00000001

	)

763 
	#DF_SYMBOLIC
 0x00000002

	)

764 
	#DF_TEXTREL
 0x00000004

	)

765 
	#DF_BIND_NOW
 0x00000008

	)

766 
	#DF_STATIC_TLS
 0x00000010

	)

770 
	#DF_1_NOW
 0x00000001

	)

771 
	#DF_1_GLOBAL
 0x00000002

	)

772 
	#DF_1_GROUP
 0x00000004

	)

773 
	#DF_1_NODELETE
 0x00000008

	)

774 
	#DF_1_LOADFLTR
 0x00000010

	)

775 
	#DF_1_INITFIRST
 0x00000020

	)

776 
	#DF_1_NOOPEN
 0x00000040

	)

777 
	#DF_1_ORIGIN
 0x00000080

	)

778 
	#DF_1_DIRECT
 0x00000100

	)

779 
	#DF_1_TRANS
 0x00000200

	)

780 
	#DF_1_INTERPOSE
 0x00000400

	)

781 
	#DF_1_NODEFLIB
 0x00000800

	)

782 
	#DF_1_NODUMP
 0x00001000

	)

783 
	#DF_1_CONFALT
 0x00002000

	)

784 
	#DF_1_ENDFILTEE
 0x00004000

	)

785 
	#DF_1_DISPRELDNE
 0x00008000

	)

786 
	#DF_1_DISPRELPND
 0x00010000

	)

789 
	#DTF_1_PARINIT
 0x00000001

	)

790 
	#DTF_1_CONFEXP
 0x00000002

	)

793 
	#DF_P1_LAZYLOAD
 0x00000001

	)

794 
	#DF_P1_GROUPPERM
 0x00000002

	)

801 
Elf32_HÆf
 
	mvd_vîsi⁄
;

802 
Elf32_HÆf
 
	mvd_Êags
;

803 
Elf32_HÆf
 
	mvd_ndx
;

804 
Elf32_HÆf
 
	mvd_˙t
;

805 
Elf32_W‹d
 
	mvd_hash
;

806 
Elf32_W‹d
 
	mvd_aux
;

807 
Elf32_W‹d
 
	mvd_√xt
;

809 } 
	tElf32_Vîdef
;

813 
Elf64_HÆf
 
	mvd_vîsi⁄
;

814 
Elf64_HÆf
 
	mvd_Êags
;

815 
Elf64_HÆf
 
	mvd_ndx
;

816 
Elf64_HÆf
 
	mvd_˙t
;

817 
Elf64_W‹d
 
	mvd_hash
;

818 
Elf64_W‹d
 
	mvd_aux
;

819 
Elf64_W‹d
 
	mvd_√xt
;

821 } 
	tElf64_Vîdef
;

825 
	#VER_DEF_NONE
 0

	)

826 
	#VER_DEF_CURRENT
 1

	)

827 
	#VER_DEF_NUM
 2

	)

830 
	#VER_FLG_BASE
 0x1

	)

831 
	#VER_FLG_WEAK
 0x2

	)

834 
	#VER_NDX_LOCAL
 0

	)

835 
	#VER_NDX_GLOBAL
 1

	)

836 
	#VER_NDX_LORESERVE
 0xff00

	)

837 
	#VER_NDX_ELIMINATE
 0xff01

	)

843 
Elf32_W‹d
 
	mvda_«me
;

844 
Elf32_W‹d
 
	mvda_√xt
;

846 } 
	tElf32_Vîdaux
;

850 
Elf64_W‹d
 
	mvda_«me
;

851 
Elf64_W‹d
 
	mvda_√xt
;

853 } 
	tElf64_Vîdaux
;

860 
Elf32_HÆf
 
	mvn_vîsi⁄
;

861 
Elf32_HÆf
 
	mvn_˙t
;

862 
Elf32_W‹d
 
	mvn_fûe
;

864 
Elf32_W‹d
 
	mvn_aux
;

865 
Elf32_W‹d
 
	mvn_√xt
;

867 } 
	tElf32_Vî√ed
;

871 
Elf64_HÆf
 
	mvn_vîsi⁄
;

872 
Elf64_HÆf
 
	mvn_˙t
;

873 
Elf64_W‹d
 
	mvn_fûe
;

875 
Elf64_W‹d
 
	mvn_aux
;

876 
Elf64_W‹d
 
	mvn_√xt
;

878 } 
	tElf64_Vî√ed
;

882 
	#VER_NEED_NONE
 0

	)

883 
	#VER_NEED_CURRENT
 1

	)

884 
	#VER_NEED_NUM
 2

	)

890 
Elf32_W‹d
 
	mv«_hash
;

891 
Elf32_HÆf
 
	mv«_Êags
;

892 
Elf32_HÆf
 
	mv«_Ÿhî
;

893 
Elf32_W‹d
 
	mv«_«me
;

894 
Elf32_W‹d
 
	mv«_√xt
;

896 } 
	tElf32_Vî«ux
;

900 
Elf64_W‹d
 
	mv«_hash
;

901 
Elf64_HÆf
 
	mv«_Êags
;

902 
Elf64_HÆf
 
	mv«_Ÿhî
;

903 
Elf64_W‹d
 
	mv«_«me
;

904 
Elf64_W‹d
 
	mv«_√xt
;

906 } 
	tElf64_Vî«ux
;

910 
	#VER_FLG_WEAK
 0x2

	)

924 
uöt32_t
 
	ma_ty≥
;

927 
uöt32_t
 
	ma_vÆ
;

931 } 
	ma_un
;

932 } 
	tElf32_auxv_t
;

936 
uöt64_t
 
	ma_ty≥
;

939 
uöt64_t
 
	ma_vÆ
;

943 } 
	ma_un
;

944 } 
	tElf64_auxv_t
;

948 
	#AT_NULL
 0

	)

949 
	#AT_IGNORE
 1

	)

950 
	#AT_EXECFD
 2

	)

951 
	#AT_PHDR
 3

	)

952 
	#AT_PHENT
 4

	)

953 
	#AT_PHNUM
 5

	)

954 
	#AT_PAGESZ
 6

	)

955 
	#AT_BASE
 7

	)

956 
	#AT_FLAGS
 8

	)

957 
	#AT_ENTRY
 9

	)

958 
	#AT_NOTELF
 10

	)

959 
	#AT_UID
 11

	)

960 
	#AT_EUID
 12

	)

961 
	#AT_GID
 13

	)

962 
	#AT_EGID
 14

	)

963 
	#AT_CLKTCK
 17

	)

966 
	#AT_PLATFORM
 15

	)

967 
	#AT_HWCAP
 16

	)

972 
	#AT_FPUCW
 18

	)

975 
	#AT_DCACHEBSIZE
 19

	)

976 
	#AT_ICACHEBSIZE
 20

	)

977 
	#AT_UCACHEBSIZE
 21

	)

981 
	#AT_IGNOREPPC
 22

	)

983 
	#AT_SECURE
 23

	)

985 
	#AT_BASE_PLATFORM
 24

	)

987 
	#AT_RANDOM
 25

	)

989 
	#AT_EXECFN
 31

	)

993 
	#AT_SYSINFO
 32

	)

994 
	#AT_SYSINFO_EHDR
 33

	)

998 
	#AT_L1I_CACHESHAPE
 34

	)

999 
	#AT_L1D_CACHESHAPE
 35

	)

1000 
	#AT_L2_CACHESHAPE
 36

	)

1001 
	#AT_L3_CACHESHAPE
 37

	)

1008 
Elf32_W‹d
 
	mn_«mesz
;

1009 
Elf32_W‹d
 
	mn_descsz
;

1010 
Elf32_W‹d
 
	mn_ty≥
;

1011 } 
	tElf32_Nhdr
;

1015 
Elf64_W‹d
 
	mn_«mesz
;

1016 
Elf64_W‹d
 
	mn_descsz
;

1017 
Elf64_W‹d
 
	mn_ty≥
;

1018 } 
	tElf64_Nhdr
;

1023 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1026 
	#ELF_NOTE_GNU
 "GNU"

	)

1032 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1043 
	#NT_GNU_ABI_TAG
 1

	)

1044 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1048 
	#ELF_NOTE_OS_LINUX
 0

	)

1049 
	#ELF_NOTE_OS_GNU
 1

	)

1050 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1051 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1059 
	#NT_GNU_HWCAP
 2

	)

1063 
	#NT_GNU_BUILD_ID
 3

	)

1066 
	#NT_GNU_GOLD_VERSION
 4

	)

1072 
Elf32_Xw‹d
 
	mm_vÆue
;

1073 
Elf32_W‹d
 
	mm_öfo
;

1074 
Elf32_W‹d
 
	mm_poff£t
;

1075 
Elf32_HÆf
 
	mm_ª≥©
;

1076 
Elf32_HÆf
 
	mm_°ride
;

1077 } 
	tElf32_Move
;

1081 
Elf64_Xw‹d
 
	mm_vÆue
;

1082 
Elf64_Xw‹d
 
	mm_öfo
;

1083 
Elf64_Xw‹d
 
	mm_poff£t
;

1084 
Elf64_HÆf
 
	mm_ª≥©
;

1085 
Elf64_HÆf
 
	mm_°ride
;

1086 } 
	tElf64_Move
;

1089 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1090 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1091 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1093 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1094 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1095 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1101 
	#EF_CPU32
 0x00810000

	)

1105 
	#R_68K_NONE
 0

	)

1106 
	#R_68K_32
 1

	)

1107 
	#R_68K_16
 2

	)

1108 
	#R_68K_8
 3

	)

1109 
	#R_68K_PC32
 4

	)

1110 
	#R_68K_PC16
 5

	)

1111 
	#R_68K_PC8
 6

	)

1112 
	#R_68K_GOT32
 7

	)

1113 
	#R_68K_GOT16
 8

	)

1114 
	#R_68K_GOT8
 9

	)

1115 
	#R_68K_GOT32O
 10

	)

1116 
	#R_68K_GOT16O
 11

	)

1117 
	#R_68K_GOT8O
 12

	)

1118 
	#R_68K_PLT32
 13

	)

1119 
	#R_68K_PLT16
 14

	)

1120 
	#R_68K_PLT8
 15

	)

1121 
	#R_68K_PLT32O
 16

	)

1122 
	#R_68K_PLT16O
 17

	)

1123 
	#R_68K_PLT8O
 18

	)

1124 
	#R_68K_COPY
 19

	)

1125 
	#R_68K_GLOB_DAT
 20

	)

1126 
	#R_68K_JMP_SLOT
 21

	)

1127 
	#R_68K_RELATIVE
 22

	)

1128 
	#R_68K_TLS_GD32
 25

	)

1129 
	#R_68K_TLS_GD16
 26

	)

1130 
	#R_68K_TLS_GD8
 27

	)

1131 
	#R_68K_TLS_LDM32
 28

	)

1132 
	#R_68K_TLS_LDM16
 29

	)

1133 
	#R_68K_TLS_LDM8
 30

	)

1134 
	#R_68K_TLS_LDO32
 31

	)

1135 
	#R_68K_TLS_LDO16
 32

	)

1136 
	#R_68K_TLS_LDO8
 33

	)

1137 
	#R_68K_TLS_IE32
 34

	)

1138 
	#R_68K_TLS_IE16
 35

	)

1139 
	#R_68K_TLS_IE8
 36

	)

1140 
	#R_68K_TLS_LE32
 37

	)

1142 
	#R_68K_TLS_LE16
 38

	)

1144 
	#R_68K_TLS_LE8
 39

	)

1146 
	#R_68K_TLS_DTPMOD32
 40

	)

1147 
	#R_68K_TLS_DTPREL32
 41

	)

1148 
	#R_68K_TLS_TPREL32
 42

	)

1150 
	#R_68K_NUM
 43

	)

1156 
	#R_386_NONE
 0

	)

1157 
	#R_386_32
 1

	)

1158 
	#R_386_PC32
 2

	)

1159 
	#R_386_GOT32
 3

	)

1160 
	#R_386_PLT32
 4

	)

1161 
	#R_386_COPY
 5

	)

1162 
	#R_386_GLOB_DAT
 6

	)

1163 
	#R_386_JMP_SLOT
 7

	)

1164 
	#R_386_RELATIVE
 8

	)

1165 
	#R_386_GOTOFF
 9

	)

1166 
	#R_386_GOTPC
 10

	)

1167 
	#R_386_32PLT
 11

	)

1168 
	#R_386_TLS_TPOFF
 14

	)

1169 
	#R_386_TLS_IE
 15

	)

1171 
	#R_386_TLS_GOTIE
 16

	)

1173 
	#R_386_TLS_LE
 17

	)

1175 
	#R_386_TLS_GD
 18

	)

1177 
	#R_386_TLS_LDM
 19

	)

1180 
	#R_386_16
 20

	)

1181 
	#R_386_PC16
 21

	)

1182 
	#R_386_8
 22

	)

1183 
	#R_386_PC8
 23

	)

1184 
	#R_386_TLS_GD_32
 24

	)

1186 
	#R_386_TLS_GD_PUSH
 25

	)

1187 
	#R_386_TLS_GD_CALL
 26

	)

1189 
	#R_386_TLS_GD_POP
 27

	)

1190 
	#R_386_TLS_LDM_32
 28

	)

1192 
	#R_386_TLS_LDM_PUSH
 29

	)

1193 
	#R_386_TLS_LDM_CALL
 30

	)

1195 
	#R_386_TLS_LDM_POP
 31

	)

1196 
	#R_386_TLS_LDO_32
 32

	)

1197 
	#R_386_TLS_IE_32
 33

	)

1199 
	#R_386_TLS_LE_32
 34

	)

1201 
	#R_386_TLS_DTPMOD32
 35

	)

1202 
	#R_386_TLS_DTPOFF32
 36

	)

1203 
	#R_386_TLS_TPOFF32
 37

	)

1205 
	#R_386_TLS_GOTDESC
 39

	)

1206 
	#R_386_TLS_DESC_CALL
 40

	)

1209 
	#R_386_TLS_DESC
 41

	)

1213 
	#R_386_IRELATIVE
 42

	)

1215 
	#R_386_NUM
 43

	)

1221 
	#STT_SPARC_REGISTER
 13

	)

1225 
	#EF_SPARCV9_MM
 3

	)

1226 
	#EF_SPARCV9_TSO
 0

	)

1227 
	#EF_SPARCV9_PSO
 1

	)

1228 
	#EF_SPARCV9_RMO
 2

	)

1229 
	#EF_SPARC_LEDATA
 0x800000

	)

1230 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1231 
	#EF_SPARC_32PLUS
 0x000100

	)

1232 
	#EF_SPARC_SUN_US1
 0x000200

	)

1233 
	#EF_SPARC_HAL_R1
 0x000400

	)

1234 
	#EF_SPARC_SUN_US3
 0x000800

	)

1238 
	#R_SPARC_NONE
 0

	)

1239 
	#R_SPARC_8
 1

	)

1240 
	#R_SPARC_16
 2

	)

1241 
	#R_SPARC_32
 3

	)

1242 
	#R_SPARC_DISP8
 4

	)

1243 
	#R_SPARC_DISP16
 5

	)

1244 
	#R_SPARC_DISP32
 6

	)

1245 
	#R_SPARC_WDISP30
 7

	)

1246 
	#R_SPARC_WDISP22
 8

	)

1247 
	#R_SPARC_HI22
 9

	)

1248 
	#R_SPARC_22
 10

	)

1249 
	#R_SPARC_13
 11

	)

1250 
	#R_SPARC_LO10
 12

	)

1251 
	#R_SPARC_GOT10
 13

	)

1252 
	#R_SPARC_GOT13
 14

	)

1253 
	#R_SPARC_GOT22
 15

	)

1254 
	#R_SPARC_PC10
 16

	)

1255 
	#R_SPARC_PC22
 17

	)

1256 
	#R_SPARC_WPLT30
 18

	)

1257 
	#R_SPARC_COPY
 19

	)

1258 
	#R_SPARC_GLOB_DAT
 20

	)

1259 
	#R_SPARC_JMP_SLOT
 21

	)

1260 
	#R_SPARC_RELATIVE
 22

	)

1261 
	#R_SPARC_UA32
 23

	)

1265 
	#R_SPARC_PLT32
 24

	)

1266 
	#R_SPARC_HIPLT22
 25

	)

1267 
	#R_SPARC_LOPLT10
 26

	)

1268 
	#R_SPARC_PCPLT32
 27

	)

1269 
	#R_SPARC_PCPLT22
 28

	)

1270 
	#R_SPARC_PCPLT10
 29

	)

1271 
	#R_SPARC_10
 30

	)

1272 
	#R_SPARC_11
 31

	)

1273 
	#R_SPARC_64
 32

	)

1274 
	#R_SPARC_OLO10
 33

	)

1275 
	#R_SPARC_HH22
 34

	)

1276 
	#R_SPARC_HM10
 35

	)

1277 
	#R_SPARC_LM22
 36

	)

1278 
	#R_SPARC_PC_HH22
 37

	)

1279 
	#R_SPARC_PC_HM10
 38

	)

1280 
	#R_SPARC_PC_LM22
 39

	)

1281 
	#R_SPARC_WDISP16
 40

	)

1282 
	#R_SPARC_WDISP19
 41

	)

1283 
	#R_SPARC_GLOB_JMP
 42

	)

1284 
	#R_SPARC_7
 43

	)

1285 
	#R_SPARC_5
 44

	)

1286 
	#R_SPARC_6
 45

	)

1287 
	#R_SPARC_DISP64
 46

	)

1288 
	#R_SPARC_PLT64
 47

	)

1289 
	#R_SPARC_HIX22
 48

	)

1290 
	#R_SPARC_LOX10
 49

	)

1291 
	#R_SPARC_H44
 50

	)

1292 
	#R_SPARC_M44
 51

	)

1293 
	#R_SPARC_L44
 52

	)

1294 
	#R_SPARC_REGISTER
 53

	)

1295 
	#R_SPARC_UA64
 54

	)

1296 
	#R_SPARC_UA16
 55

	)

1297 
	#R_SPARC_TLS_GD_HI22
 56

	)

1298 
	#R_SPARC_TLS_GD_LO10
 57

	)

1299 
	#R_SPARC_TLS_GD_ADD
 58

	)

1300 
	#R_SPARC_TLS_GD_CALL
 59

	)

1301 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1302 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1303 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1304 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1305 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1306 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1307 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1308 
	#R_SPARC_TLS_IE_HI22
 67

	)

1309 
	#R_SPARC_TLS_IE_LO10
 68

	)

1310 
	#R_SPARC_TLS_IE_LD
 69

	)

1311 
	#R_SPARC_TLS_IE_LDX
 70

	)

1312 
	#R_SPARC_TLS_IE_ADD
 71

	)

1313 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1314 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1315 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1316 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1317 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1318 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1319 
	#R_SPARC_TLS_TPOFF32
 78

	)

1320 
	#R_SPARC_TLS_TPOFF64
 79

	)

1321 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1322 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1323 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1324 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1325 
	#R_SPARC_GOTDATA_OP
 84

	)

1326 
	#R_SPARC_H34
 85

	)

1327 
	#R_SPARC_SIZE32
 86

	)

1328 
	#R_SPARC_SIZE64
 87

	)

1329 
	#R_SPARC_JMP_IREL
 248

	)

1330 
	#R_SPARC_IRELATIVE
 249

	)

1331 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1332 
	#R_SPARC_GNU_VTENTRY
 251

	)

1333 
	#R_SPARC_REV32
 252

	)

1335 
	#R_SPARC_NUM
 253

	)

1339 
	#DT_SPARC_REGISTER
 0x70000001

	)

1340 
	#DT_SPARC_NUM
 2

	)

1344 
	#HWCAP_SPARC_FLUSH
 1

	)

1345 
	#HWCAP_SPARC_STBAR
 2

	)

1346 
	#HWCAP_SPARC_SWAP
 4

	)

1347 
	#HWCAP_SPARC_MULDIV
 8

	)

1348 
	#HWCAP_SPARC_V9
 16

	)

1349 
	#HWCAP_SPARC_ULTRA3
 32

	)

1350 
	#HWCAP_SPARC_BLKINIT
 64

	)

1351 
	#HWCAP_SPARC_N2
 128

	)

1357 
	#EF_MIPS_NOREORDER
 1

	)

1358 
	#EF_MIPS_PIC
 2

	)

1359 
	#EF_MIPS_CPIC
 4

	)

1360 
	#EF_MIPS_XGOT
 8

	)

1361 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1362 
	#EF_MIPS_ABI2
 32

	)

1363 
	#EF_MIPS_ABI_ON32
 64

	)

1364 
	#EF_MIPS_ARCH
 0xf0000000

	)

1368 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1369 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1370 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1371 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1372 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1373 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1374 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1378 
	#E_MIPS_ARCH_1
 0x00000000

	)

1379 
	#E_MIPS_ARCH_2
 0x10000000

	)

1380 
	#E_MIPS_ARCH_3
 0x20000000

	)

1381 
	#E_MIPS_ARCH_4
 0x30000000

	)

1382 
	#E_MIPS_ARCH_5
 0x40000000

	)

1383 
	#E_MIPS_ARCH_32
 0x60000000

	)

1384 
	#E_MIPS_ARCH_64
 0x70000000

	)

1388 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1389 
	#SHN_MIPS_TEXT
 0xff01

	)

1390 
	#SHN_MIPS_DATA
 0xff02

	)

1391 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1392 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1396 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1397 
	#SHT_MIPS_MSYM
 0x70000001

	)

1398 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1399 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1400 
	#SHT_MIPS_UCODE
 0x70000004

	)

1401 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1402 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1403 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1404 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1405 
	#SHT_MIPS_RELD
 0x70000009

	)

1406 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1407 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1408 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1409 
	#SHT_MIPS_SHDR
 0x70000010

	)

1410 
	#SHT_MIPS_FDESC
 0x70000011

	)

1411 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1412 
	#SHT_MIPS_DENSE
 0x70000013

	)

1413 
	#SHT_MIPS_PDESC
 0x70000014

	)

1414 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1415 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1416 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1417 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1418 
	#SHT_MIPS_LINE
 0x70000019

	)

1419 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1420 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1421 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1422 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1423 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1424 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1425 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1426 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1427 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1428 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1429 
	#SHT_MIPS_XLATE
 0x70000024

	)

1430 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1431 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1432 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1433 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1434 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1438 
	#SHF_MIPS_GPREL
 0x10000000

	)

1439 
	#SHF_MIPS_MERGE
 0x20000000

	)

1440 
	#SHF_MIPS_ADDR
 0x40000000

	)

1441 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1442 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1443 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1444 
	#SHF_MIPS_NAMES
 0x02000000

	)

1445 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1451 
	#STO_MIPS_DEFAULT
 0x0

	)

1452 
	#STO_MIPS_INTERNAL
 0x1

	)

1453 
	#STO_MIPS_HIDDEN
 0x2

	)

1454 
	#STO_MIPS_PROTECTED
 0x3

	)

1455 
	#STO_MIPS_PLT
 0x8

	)

1456 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1459 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1467 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1468 
Elf32_W‹d
 
	mgt_unu£d
;

1469 } 
	mgt_hódî
;

1472 
Elf32_W‹d
 
	mgt_g_vÆue
;

1473 
Elf32_W‹d
 
	mgt_byãs
;

1474 } 
	mgt_íåy
;

1475 } 
	tElf32_g±ab
;

1481 
Elf32_W‹d
 
	mri_g¥mask
;

1482 
Elf32_W‹d
 
	mri_˝rmask
[4];

1483 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1484 } 
	tElf32_RegInfo
;

1490 
	mköd
;

1492 
	msize
;

1493 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1495 
Elf32_W‹d
 
	möfo
;

1496 } 
	tElf_O±i⁄s
;

1500 
	#ODK_NULL
 0

	)

1501 
	#ODK_REGINFO
 1

	)

1502 
	#ODK_EXCEPTIONS
 2

	)

1503 
	#ODK_PAD
 3

	)

1504 
	#ODK_HWPATCH
 4

	)

1505 
	#ODK_FILL
 5

	)

1506 
	#ODK_TAGS
 6

	)

1507 
	#ODK_HWAND
 7

	)

1508 
	#ODK_HWOR
 8

	)

1512 
	#OEX_FPU_MIN
 0x1‡

	)

1513 
	#OEX_FPU_MAX
 0x1f00

	)

1514 
	#OEX_PAGE0
 0x10000

	)

1515 
	#OEX_SMM
 0x20000

	)

1516 
	#OEX_FPDBUG
 0x40000

	)

1517 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1518 
	#OEX_DISMISS
 0x80000

	)

1520 
	#OEX_FPU_INVAL
 0x10

	)

1521 
	#OEX_FPU_DIV0
 0x08

	)

1522 
	#OEX_FPU_OFLO
 0x04

	)

1523 
	#OEX_FPU_UFLO
 0x02

	)

1524 
	#OEX_FPU_INEX
 0x01

	)

1528 
	#OHW_R4KEOP
 0x1

	)

1529 
	#OHW_R8KPFETCH
 0x2

	)

1530 
	#OHW_R5KEOP
 0x4

	)

1531 
	#OHW_R5KCVTL
 0x8

	)

1533 
	#OPAD_PREFIX
 0x1

	)

1534 
	#OPAD_POSTFIX
 0x2

	)

1535 
	#OPAD_SYMBOL
 0x4

	)

1541 
Elf32_W‹d
 
	mhwp_Êags1
;

1542 
Elf32_W‹d
 
	mhwp_Êags2
;

1543 } 
	tElf_O±i⁄s_Hw
;

1547 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1548 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1552 
	#R_MIPS_NONE
 0

	)

1553 
	#R_MIPS_16
 1

	)

1554 
	#R_MIPS_32
 2

	)

1555 
	#R_MIPS_REL32
 3

	)

1556 
	#R_MIPS_26
 4

	)

1557 
	#R_MIPS_HI16
 5

	)

1558 
	#R_MIPS_LO16
 6

	)

1559 
	#R_MIPS_GPREL16
 7

	)

1560 
	#R_MIPS_LITERAL
 8

	)

1561 
	#R_MIPS_GOT16
 9

	)

1562 
	#R_MIPS_PC16
 10

	)

1563 
	#R_MIPS_CALL16
 11

	)

1564 
	#R_MIPS_GPREL32
 12

	)

1566 
	#R_MIPS_SHIFT5
 16

	)

1567 
	#R_MIPS_SHIFT6
 17

	)

1568 
	#R_MIPS_64
 18

	)

1569 
	#R_MIPS_GOT_DISP
 19

	)

1570 
	#R_MIPS_GOT_PAGE
 20

	)

1571 
	#R_MIPS_GOT_OFST
 21

	)

1572 
	#R_MIPS_GOT_HI16
 22

	)

1573 
	#R_MIPS_GOT_LO16
 23

	)

1574 
	#R_MIPS_SUB
 24

	)

1575 
	#R_MIPS_INSERT_A
 25

	)

1576 
	#R_MIPS_INSERT_B
 26

	)

1577 
	#R_MIPS_DELETE
 27

	)

1578 
	#R_MIPS_HIGHER
 28

	)

1579 
	#R_MIPS_HIGHEST
 29

	)

1580 
	#R_MIPS_CALL_HI16
 30

	)

1581 
	#R_MIPS_CALL_LO16
 31

	)

1582 
	#R_MIPS_SCN_DISP
 32

	)

1583 
	#R_MIPS_REL16
 33

	)

1584 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1585 
	#R_MIPS_PJUMP
 35

	)

1586 
	#R_MIPS_RELGOT
 36

	)

1587 
	#R_MIPS_JALR
 37

	)

1588 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1589 
	#R_MIPS_TLS_DTPREL32
 39

	)

1590 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1591 
	#R_MIPS_TLS_DTPREL64
 41

	)

1592 
	#R_MIPS_TLS_GD
 42

	)

1593 
	#R_MIPS_TLS_LDM
 43

	)

1594 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1595 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1596 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1597 
	#R_MIPS_TLS_TPREL32
 47

	)

1598 
	#R_MIPS_TLS_TPREL64
 48

	)

1599 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1600 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1601 
	#R_MIPS_GLOB_DAT
 51

	)

1602 
	#R_MIPS_COPY
 126

	)

1603 
	#R_MIPS_JUMP_SLOT
 127

	)

1605 
	#R_MIPS_NUM
 128

	)

1609 
	#PT_MIPS_REGINFO
 0x70000000

	)

1610 
	#PT_MIPS_RTPROC
 0x70000001

	)

1611 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1615 
	#PF_MIPS_LOCAL
 0x10000000

	)

1619 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1620 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1621 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1622 
	#DT_MIPS_IVERSION
 0x70000004

	)

1623 
	#DT_MIPS_FLAGS
 0x70000005

	)

1624 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1625 
	#DT_MIPS_MSYM
 0x70000007

	)

1626 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1627 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1628 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1629 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1630 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1631 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1632 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1633 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1634 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1635 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1636 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1637 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1639 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1640 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1642 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1643 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1645 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1647 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1649 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1651 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1653 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1654 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1655 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1656 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1657 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1658 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1659 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1660 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1661 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1662 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1663 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1664 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1666 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1668 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1669 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1670 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1672 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1676 
	#DT_MIPS_RWPLT
 0x70000034

	)

1677 
	#DT_MIPS_NUM
 0x35

	)

1681 
	#RHF_NONE
 0

	)

1682 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1683 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1684 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1685 
	#RHF_NO_MOVE
 (1 << 3)

	)

1686 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1687 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1688 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1689 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1690 
	#RHF_PIXIE
 (1 << 8)

	)

1691 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1692 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1693 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1694 
	#RHF_CORD
 (1 << 12)

	)

1695 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1696 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1702 
Elf32_W‹d
 
	ml_«me
;

1703 
Elf32_W‹d
 
	ml_time_°amp
;

1704 
Elf32_W‹d
 
	ml_checksum
;

1705 
Elf32_W‹d
 
	ml_vîsi⁄
;

1706 
Elf32_W‹d
 
	ml_Êags
;

1707 } 
	tElf32_Lib
;

1711 
Elf64_W‹d
 
	ml_«me
;

1712 
Elf64_W‹d
 
	ml_time_°amp
;

1713 
Elf64_W‹d
 
	ml_checksum
;

1714 
Elf64_W‹d
 
	ml_vîsi⁄
;

1715 
Elf64_W‹d
 
	ml_Êags
;

1716 } 
	tElf64_Lib
;

1721 
	#LL_NONE
 0

	)

1722 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1723 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1724 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1725 
	#LL_EXPORTS
 (1 << 3)

	)

1726 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1727 
	#LL_DELTA
 (1 << 5)

	)

1731 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1738 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1739 
	#EF_PARISC_EXT
 0x00020000

	)

1740 
	#EF_PARISC_LSB
 0x00040000

	)

1741 
	#EF_PARISC_WIDE
 0x00080000

	)

1742 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1744 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1745 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1749 
	#EFA_PARISC_1_0
 0x020b

	)

1750 
	#EFA_PARISC_1_1
 0x0210

	)

1751 
	#EFA_PARISC_2_0
 0x0214

	)

1755 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1757 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1761 
	#SHT_PARISC_EXT
 0x70000000

	)

1762 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1763 
	#SHT_PARISC_DOC
 0x70000002

	)

1767 
	#SHF_PARISC_SHORT
 0x20000000

	)

1768 
	#SHF_PARISC_HUGE
 0x40000000

	)

1769 
	#SHF_PARISC_SBP
 0x80000000

	)

1773 
	#STT_PARISC_MILLICODE
 13

	)

1775 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1776 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1780 
	#R_PARISC_NONE
 0

	)

1781 
	#R_PARISC_DIR32
 1

	)

1782 
	#R_PARISC_DIR21L
 2

	)

1783 
	#R_PARISC_DIR17R
 3

	)

1784 
	#R_PARISC_DIR17F
 4

	)

1785 
	#R_PARISC_DIR14R
 6

	)

1786 
	#R_PARISC_PCREL32
 9

	)

1787 
	#R_PARISC_PCREL21L
 10

	)

1788 
	#R_PARISC_PCREL17R
 11

	)

1789 
	#R_PARISC_PCREL17F
 12

	)

1790 
	#R_PARISC_PCREL14R
 14

	)

1791 
	#R_PARISC_DPREL21L
 18

	)

1792 
	#R_PARISC_DPREL14R
 22

	)

1793 
	#R_PARISC_GPREL21L
 26

	)

1794 
	#R_PARISC_GPREL14R
 30

	)

1795 
	#R_PARISC_LTOFF21L
 34

	)

1796 
	#R_PARISC_LTOFF14R
 38

	)

1797 
	#R_PARISC_SECREL32
 41

	)

1798 
	#R_PARISC_SEGBASE
 48

	)

1799 
	#R_PARISC_SEGREL32
 49

	)

1800 
	#R_PARISC_PLTOFF21L
 50

	)

1801 
	#R_PARISC_PLTOFF14R
 54

	)

1802 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1803 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1804 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1805 
	#R_PARISC_FPTR64
 64

	)

1806 
	#R_PARISC_PLABEL32
 65

	)

1807 
	#R_PARISC_PLABEL21L
 66

	)

1808 
	#R_PARISC_PLABEL14R
 70

	)

1809 
	#R_PARISC_PCREL64
 72

	)

1810 
	#R_PARISC_PCREL22F
 74

	)

1811 
	#R_PARISC_PCREL14WR
 75

	)

1812 
	#R_PARISC_PCREL14DR
 76

	)

1813 
	#R_PARISC_PCREL16F
 77

	)

1814 
	#R_PARISC_PCREL16WF
 78

	)

1815 
	#R_PARISC_PCREL16DF
 79

	)

1816 
	#R_PARISC_DIR64
 80

	)

1817 
	#R_PARISC_DIR14WR
 83

	)

1818 
	#R_PARISC_DIR14DR
 84

	)

1819 
	#R_PARISC_DIR16F
 85

	)

1820 
	#R_PARISC_DIR16WF
 86

	)

1821 
	#R_PARISC_DIR16DF
 87

	)

1822 
	#R_PARISC_GPREL64
 88

	)

1823 
	#R_PARISC_GPREL14WR
 91

	)

1824 
	#R_PARISC_GPREL14DR
 92

	)

1825 
	#R_PARISC_GPREL16F
 93

	)

1826 
	#R_PARISC_GPREL16WF
 94

	)

1827 
	#R_PARISC_GPREL16DF
 95

	)

1828 
	#R_PARISC_LTOFF64
 96

	)

1829 
	#R_PARISC_LTOFF14WR
 99

	)

1830 
	#R_PARISC_LTOFF14DR
 100

	)

1831 
	#R_PARISC_LTOFF16F
 101

	)

1832 
	#R_PARISC_LTOFF16WF
 102

	)

1833 
	#R_PARISC_LTOFF16DF
 103

	)

1834 
	#R_PARISC_SECREL64
 104

	)

1835 
	#R_PARISC_SEGREL64
 112

	)

1836 
	#R_PARISC_PLTOFF14WR
 115

	)

1837 
	#R_PARISC_PLTOFF14DR
 116

	)

1838 
	#R_PARISC_PLTOFF16F
 117

	)

1839 
	#R_PARISC_PLTOFF16WF
 118

	)

1840 
	#R_PARISC_PLTOFF16DF
 119

	)

1841 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1842 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1843 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1844 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1845 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1846 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1847 
	#R_PARISC_LORESERVE
 128

	)

1848 
	#R_PARISC_COPY
 128

	)

1849 
	#R_PARISC_IPLT
 129

	)

1850 
	#R_PARISC_EPLT
 130

	)

1851 
	#R_PARISC_TPREL32
 153

	)

1852 
	#R_PARISC_TPREL21L
 154

	)

1853 
	#R_PARISC_TPREL14R
 158

	)

1854 
	#R_PARISC_LTOFF_TP21L
 162

	)

1855 
	#R_PARISC_LTOFF_TP14R
 166

	)

1856 
	#R_PARISC_LTOFF_TP14F
 167

	)

1857 
	#R_PARISC_TPREL64
 216

	)

1858 
	#R_PARISC_TPREL14WR
 219

	)

1859 
	#R_PARISC_TPREL14DR
 220

	)

1860 
	#R_PARISC_TPREL16F
 221

	)

1861 
	#R_PARISC_TPREL16WF
 222

	)

1862 
	#R_PARISC_TPREL16DF
 223

	)

1863 
	#R_PARISC_LTOFF_TP64
 224

	)

1864 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1865 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1866 
	#R_PARISC_LTOFF_TP16F
 229

	)

1867 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1868 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1869 
	#R_PARISC_GNU_VTENTRY
 232

	)

1870 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1871 
	#R_PARISC_TLS_GD21L
 234

	)

1872 
	#R_PARISC_TLS_GD14R
 235

	)

1873 
	#R_PARISC_TLS_GDCALL
 236

	)

1874 
	#R_PARISC_TLS_LDM21L
 237

	)

1875 
	#R_PARISC_TLS_LDM14R
 238

	)

1876 
	#R_PARISC_TLS_LDMCALL
 239

	)

1877 
	#R_PARISC_TLS_LDO21L
 240

	)

1878 
	#R_PARISC_TLS_LDO14R
 241

	)

1879 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1880 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1881 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1882 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1883 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1884 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1885 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1886 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1887 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1888 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1889 
	#R_PARISC_HIRESERVE
 255

	)

1893 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1894 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1895 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1896 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1897 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1898 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1899 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1900 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1901 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1902 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1903 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1904 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1905 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1906 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1907 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1909 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1910 
	#PT_PARISC_UNWIND
 0x70000001

	)

1914 
	#PF_PARISC_SBP
 0x08000000

	)

1916 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1917 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1918 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1919 
	#PF_HP_CODE
 0x01000000

	)

1920 
	#PF_HP_MODIFY
 0x02000000

	)

1921 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1922 
	#PF_HP_SBP
 0x08000000

	)

1929 
	#EF_ALPHA_32BIT
 1

	)

1930 
	#EF_ALPHA_CANRELAX
 2

	)

1935 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1936 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1940 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1943 
	#STO_ALPHA_NOPV
 0x80

	)

1944 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1948 
	#R_ALPHA_NONE
 0

	)

1949 
	#R_ALPHA_REFLONG
 1

	)

1950 
	#R_ALPHA_REFQUAD
 2

	)

1951 
	#R_ALPHA_GPREL32
 3

	)

1952 
	#R_ALPHA_LITERAL
 4

	)

1953 
	#R_ALPHA_LITUSE
 5

	)

1954 
	#R_ALPHA_GPDISP
 6

	)

1955 
	#R_ALPHA_BRADDR
 7

	)

1956 
	#R_ALPHA_HINT
 8

	)

1957 
	#R_ALPHA_SREL16
 9

	)

1958 
	#R_ALPHA_SREL32
 10

	)

1959 
	#R_ALPHA_SREL64
 11

	)

1960 
	#R_ALPHA_GPRELHIGH
 17

	)

1961 
	#R_ALPHA_GPRELLOW
 18

	)

1962 
	#R_ALPHA_GPREL16
 19

	)

1963 
	#R_ALPHA_COPY
 24

	)

1964 
	#R_ALPHA_GLOB_DAT
 25

	)

1965 
	#R_ALPHA_JMP_SLOT
 26

	)

1966 
	#R_ALPHA_RELATIVE
 27

	)

1967 
	#R_ALPHA_TLS_GD_HI
 28

	)

1968 
	#R_ALPHA_TLSGD
 29

	)

1969 
	#R_ALPHA_TLS_LDM
 30

	)

1970 
	#R_ALPHA_DTPMOD64
 31

	)

1971 
	#R_ALPHA_GOTDTPREL
 32

	)

1972 
	#R_ALPHA_DTPREL64
 33

	)

1973 
	#R_ALPHA_DTPRELHI
 34

	)

1974 
	#R_ALPHA_DTPRELLO
 35

	)

1975 
	#R_ALPHA_DTPREL16
 36

	)

1976 
	#R_ALPHA_GOTTPREL
 37

	)

1977 
	#R_ALPHA_TPREL64
 38

	)

1978 
	#R_ALPHA_TPRELHI
 39

	)

1979 
	#R_ALPHA_TPRELLO
 40

	)

1980 
	#R_ALPHA_TPREL16
 41

	)

1982 
	#R_ALPHA_NUM
 46

	)

1985 
	#LITUSE_ALPHA_ADDR
 0

	)

1986 
	#LITUSE_ALPHA_BASE
 1

	)

1987 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1988 
	#LITUSE_ALPHA_JSR
 3

	)

1989 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1990 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1993 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1994 
	#DT_ALPHA_NUM
 1

	)

1999 
	#EF_PPC_EMB
 0x80000000

	)

2002 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2003 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2007 
	#R_PPC_NONE
 0

	)

2008 
	#R_PPC_ADDR32
 1

	)

2009 
	#R_PPC_ADDR24
 2

	)

2010 
	#R_PPC_ADDR16
 3

	)

2011 
	#R_PPC_ADDR16_LO
 4

	)

2012 
	#R_PPC_ADDR16_HI
 5

	)

2013 
	#R_PPC_ADDR16_HA
 6

	)

2014 
	#R_PPC_ADDR14
 7

	)

2015 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2016 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2017 
	#R_PPC_REL24
 10

	)

2018 
	#R_PPC_REL14
 11

	)

2019 
	#R_PPC_REL14_BRTAKEN
 12

	)

2020 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2021 
	#R_PPC_GOT16
 14

	)

2022 
	#R_PPC_GOT16_LO
 15

	)

2023 
	#R_PPC_GOT16_HI
 16

	)

2024 
	#R_PPC_GOT16_HA
 17

	)

2025 
	#R_PPC_PLTREL24
 18

	)

2026 
	#R_PPC_COPY
 19

	)

2027 
	#R_PPC_GLOB_DAT
 20

	)

2028 
	#R_PPC_JMP_SLOT
 21

	)

2029 
	#R_PPC_RELATIVE
 22

	)

2030 
	#R_PPC_LOCAL24PC
 23

	)

2031 
	#R_PPC_UADDR32
 24

	)

2032 
	#R_PPC_UADDR16
 25

	)

2033 
	#R_PPC_REL32
 26

	)

2034 
	#R_PPC_PLT32
 27

	)

2035 
	#R_PPC_PLTREL32
 28

	)

2036 
	#R_PPC_PLT16_LO
 29

	)

2037 
	#R_PPC_PLT16_HI
 30

	)

2038 
	#R_PPC_PLT16_HA
 31

	)

2039 
	#R_PPC_SDAREL16
 32

	)

2040 
	#R_PPC_SECTOFF
 33

	)

2041 
	#R_PPC_SECTOFF_LO
 34

	)

2042 
	#R_PPC_SECTOFF_HI
 35

	)

2043 
	#R_PPC_SECTOFF_HA
 36

	)

2046 
	#R_PPC_TLS
 67

	)

2047 
	#R_PPC_DTPMOD32
 68

	)

2048 
	#R_PPC_TPREL16
 69

	)

2049 
	#R_PPC_TPREL16_LO
 70

	)

2050 
	#R_PPC_TPREL16_HI
 71

	)

2051 
	#R_PPC_TPREL16_HA
 72

	)

2052 
	#R_PPC_TPREL32
 73

	)

2053 
	#R_PPC_DTPREL16
 74

	)

2054 
	#R_PPC_DTPREL16_LO
 75

	)

2055 
	#R_PPC_DTPREL16_HI
 76

	)

2056 
	#R_PPC_DTPREL16_HA
 77

	)

2057 
	#R_PPC_DTPREL32
 78

	)

2058 
	#R_PPC_GOT_TLSGD16
 79

	)

2059 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2060 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2061 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2062 
	#R_PPC_GOT_TLSLD16
 83

	)

2063 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2064 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2065 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2066 
	#R_PPC_GOT_TPREL16
 87

	)

2067 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2068 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2069 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2070 
	#R_PPC_GOT_DTPREL16
 91

	)

2071 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2072 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2073 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2077 
	#R_PPC_EMB_NADDR32
 101

	)

2078 
	#R_PPC_EMB_NADDR16
 102

	)

2079 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2080 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2081 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2082 
	#R_PPC_EMB_SDAI16
 106

	)

2083 
	#R_PPC_EMB_SDA2I16
 107

	)

2084 
	#R_PPC_EMB_SDA2REL
 108

	)

2085 
	#R_PPC_EMB_SDA21
 109

	)

2086 
	#R_PPC_EMB_MRKREF
 110

	)

2087 
	#R_PPC_EMB_RELSEC16
 111

	)

2088 
	#R_PPC_EMB_RELST_LO
 112

	)

2089 
	#R_PPC_EMB_RELST_HI
 113

	)

2090 
	#R_PPC_EMB_RELST_HA
 114

	)

2091 
	#R_PPC_EMB_BIT_FLD
 115

	)

2092 
	#R_PPC_EMB_RELSDA
 116

	)

2095 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2096 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2097 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2098 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2099 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2100 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2103 
	#R_PPC_IRELATIVE
 248

	)

2106 
	#R_PPC_REL16
 249

	)

2107 
	#R_PPC_REL16_LO
 250

	)

2108 
	#R_PPC_REL16_HI
 251

	)

2109 
	#R_PPC_REL16_HA
 252

	)

2113 
	#R_PPC_TOC16
 255

	)

2116 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2117 
	#DT_PPC_NUM
 1

	)

2120 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2121 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2122 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2123 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2124 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2125 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2126 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2127 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2128 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2129 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2130 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2131 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2132 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2133 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2134 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2135 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2136 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2137 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2139 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2140 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2141 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2142 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2144 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2145 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2146 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2147 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2148 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2149 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2150 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2151 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2153 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2154 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2155 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2156 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2157 
	#R_PPC64_ADDR30
 37

	)

2158 
	#R_PPC64_ADDR64
 38

	)

2159 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2160 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2161 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2162 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2163 
	#R_PPC64_UADDR64
 43

	)

2164 
	#R_PPC64_REL64
 44

	)

2165 
	#R_PPC64_PLT64
 45

	)

2166 
	#R_PPC64_PLTREL64
 46

	)

2167 
	#R_PPC64_TOC16
 47

	)

2168 
	#R_PPC64_TOC16_LO
 48

	)

2169 
	#R_PPC64_TOC16_HI
 49

	)

2170 
	#R_PPC64_TOC16_HA
 50

	)

2171 
	#R_PPC64_TOC
 51

	)

2172 
	#R_PPC64_PLTGOT16
 52

	)

2173 
	#R_PPC64_PLTGOT16_LO
 53

	)

2174 
	#R_PPC64_PLTGOT16_HI
 54

	)

2175 
	#R_PPC64_PLTGOT16_HA
 55

	)

2177 
	#R_PPC64_ADDR16_DS
 56

	)

2178 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2179 
	#R_PPC64_GOT16_DS
 58

	)

2180 
	#R_PPC64_GOT16_LO_DS
 59

	)

2181 
	#R_PPC64_PLT16_LO_DS
 60

	)

2182 
	#R_PPC64_SECTOFF_DS
 61

	)

2183 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2184 
	#R_PPC64_TOC16_DS
 63

	)

2185 
	#R_PPC64_TOC16_LO_DS
 64

	)

2186 
	#R_PPC64_PLTGOT16_DS
 65

	)

2187 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2190 
	#R_PPC64_TLS
 67

	)

2191 
	#R_PPC64_DTPMOD64
 68

	)

2192 
	#R_PPC64_TPREL16
 69

	)

2193 
	#R_PPC64_TPREL16_LO
 70

	)

2194 
	#R_PPC64_TPREL16_HI
 71

	)

2195 
	#R_PPC64_TPREL16_HA
 72

	)

2196 
	#R_PPC64_TPREL64
 73

	)

2197 
	#R_PPC64_DTPREL16
 74

	)

2198 
	#R_PPC64_DTPREL16_LO
 75

	)

2199 
	#R_PPC64_DTPREL16_HI
 76

	)

2200 
	#R_PPC64_DTPREL16_HA
 77

	)

2201 
	#R_PPC64_DTPREL64
 78

	)

2202 
	#R_PPC64_GOT_TLSGD16
 79

	)

2203 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2204 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2205 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2206 
	#R_PPC64_GOT_TLSLD16
 83

	)

2207 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2208 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2209 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2210 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2211 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2212 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2213 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2214 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2215 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2216 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2217 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2218 
	#R_PPC64_TPREL16_DS
 95

	)

2219 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2220 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2221 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2222 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2223 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2224 
	#R_PPC64_DTPREL16_DS
 101

	)

2225 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2226 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2227 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2228 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2229 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2232 
	#R_PPC64_JMP_IREL
 247

	)

2233 
	#R_PPC64_IRELATIVE
 248

	)

2234 
	#R_PPC64_REL16
 249

	)

2235 
	#R_PPC64_REL16_LO
 250

	)

2236 
	#R_PPC64_REL16_HI
 251

	)

2237 
	#R_PPC64_REL16_HA
 252

	)

2240 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2241 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2242 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2243 
	#DT_PPC64_NUM
 3

	)

2249 
	#EF_ARM_RELEXEC
 0x01

	)

2250 
	#EF_ARM_HASENTRY
 0x02

	)

2251 
	#EF_ARM_INTERWORK
 0x04

	)

2252 
	#EF_ARM_APCS_26
 0x08

	)

2253 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2254 
	#EF_ARM_PIC
 0x20

	)

2255 
	#EF_ARM_ALIGN8
 0x40

	)

2256 
	#EF_ARM_NEW_ABI
 0x80

	)

2257 
	#EF_ARM_OLD_ABI
 0x100

	)

2258 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2259 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2260 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2265 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2266 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2267 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2268 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2271 
	#EF_ARM_BE8
 0x00800000

	)

2272 
	#EF_ARM_LE8
 0x00400000

	)

2274 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2275 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2276 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2277 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2278 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2279 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2280 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2283 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2284 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2287 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2288 
	#SHF_ARM_COMDEF
 0x80000000

	)

2292 
	#PF_ARM_SB
 0x10000000

	)

2294 
	#PF_ARM_PI
 0x20000000

	)

2295 
	#PF_ARM_ABS
 0x40000000

	)

2298 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2301 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2302 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2303 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2308 
	#R_ARM_NONE
 0

	)

2309 
	#R_ARM_PC24
 1

	)

2310 
	#R_ARM_ABS32
 2

	)

2311 
	#R_ARM_REL32
 3

	)

2312 
	#R_ARM_PC13
 4

	)

2313 
	#R_ARM_ABS16
 5

	)

2314 
	#R_ARM_ABS12
 6

	)

2315 
	#R_ARM_THM_ABS5
 7

	)

2316 
	#R_ARM_ABS8
 8

	)

2317 
	#R_ARM_SBREL32
 9

	)

2318 
	#R_ARM_THM_PC22
 10

	)

2319 
	#R_ARM_THM_PC8
 11

	)

2320 
	#R_ARM_AMP_VCALL9
 12

	)

2321 
	#R_ARM_SWI24
 13

	)

2322 
	#R_ARM_THM_SWI8
 14

	)

2323 
	#R_ARM_XPC25
 15

	)

2324 
	#R_ARM_THM_XPC22
 16

	)

2325 
	#R_ARM_TLS_DTPMOD32
 17

	)

2326 
	#R_ARM_TLS_DTPOFF32
 18

	)

2327 
	#R_ARM_TLS_TPOFF32
 19

	)

2328 
	#R_ARM_COPY
 20

	)

2329 
	#R_ARM_GLOB_DAT
 21

	)

2330 
	#R_ARM_JUMP_SLOT
 22

	)

2331 
	#R_ARM_RELATIVE
 23

	)

2332 
	#R_ARM_GOTOFF
 24

	)

2333 
	#R_ARM_GOTPC
 25

	)

2334 
	#R_ARM_GOT32
 26

	)

2335 
	#R_ARM_PLT32
 27

	)

2336 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2337 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2338 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2339 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2340 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2341 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2342 
	#R_ARM_GNU_VTENTRY
 100

	)

2343 
	#R_ARM_GNU_VTINHERIT
 101

	)

2344 
	#R_ARM_THM_PC11
 102

	)

2345 
	#R_ARM_THM_PC9
 103

	)

2346 
	#R_ARM_TLS_GD32
 104

	)

2348 
	#R_ARM_TLS_LDM32
 105

	)

2350 
	#R_ARM_TLS_LDO32
 106

	)

2352 
	#R_ARM_TLS_IE32
 107

	)

2354 
	#R_ARM_TLS_LE32
 108

	)

2356 
	#R_ARM_RXPC25
 249

	)

2357 
	#R_ARM_RSBREL32
 250

	)

2358 
	#R_ARM_THM_RPC22
 251

	)

2359 
	#R_ARM_RREL32
 252

	)

2360 
	#R_ARM_RABS22
 253

	)

2361 
	#R_ARM_RPC24
 254

	)

2362 
	#R_ARM_RBASE
 255

	)

2364 
	#R_ARM_NUM
 256

	)

2369 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2370 
	#EF_IA_64_ABI64
 0x00000010

	)

2371 
	#EF_IA_64_ARCH
 0xff000000

	)

2374 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2375 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2376 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2377 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2378 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2381 
	#PF_IA_64_NORECOV
 0x80000000

	)

2384 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2385 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2388 
	#SHF_IA_64_SHORT
 0x10000000

	)

2389 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2392 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2393 
	#DT_IA_64_NUM
 1

	)

2396 
	#R_IA64_NONE
 0x00

	)

2397 
	#R_IA64_IMM14
 0x21

	)

2398 
	#R_IA64_IMM22
 0x22

	)

2399 
	#R_IA64_IMM64
 0x23

	)

2400 
	#R_IA64_DIR32MSB
 0x24

	)

2401 
	#R_IA64_DIR32LSB
 0x25

	)

2402 
	#R_IA64_DIR64MSB
 0x26

	)

2403 
	#R_IA64_DIR64LSB
 0x27

	)

2404 
	#R_IA64_GPREL22
 0x2®

	)

2405 
	#R_IA64_GPREL64I
 0x2b

	)

2406 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2407 
	#R_IA64_GPREL32LSB
 0x2d

	)

2408 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2409 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2410 
	#R_IA64_LTOFF22
 0x32

	)

2411 
	#R_IA64_LTOFF64I
 0x33

	)

2412 
	#R_IA64_PLTOFF22
 0x3®

	)

2413 
	#R_IA64_PLTOFF64I
 0x3b

	)

2414 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2415 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2416 
	#R_IA64_FPTR64I
 0x43

	)

2417 
	#R_IA64_FPTR32MSB
 0x44

	)

2418 
	#R_IA64_FPTR32LSB
 0x45

	)

2419 
	#R_IA64_FPTR64MSB
 0x46

	)

2420 
	#R_IA64_FPTR64LSB
 0x47

	)

2421 
	#R_IA64_PCREL60B
 0x48

	)

2422 
	#R_IA64_PCREL21B
 0x49

	)

2423 
	#R_IA64_PCREL21M
 0x4®

	)

2424 
	#R_IA64_PCREL21F
 0x4b

	)

2425 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2426 
	#R_IA64_PCREL32LSB
 0x4d

	)

2427 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2428 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2429 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2430 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2431 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2432 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2433 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2434 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2435 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2436 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2437 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2438 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2439 
	#R_IA64_SECREL32MSB
 0x64

	)

2440 
	#R_IA64_SECREL32LSB
 0x65

	)

2441 
	#R_IA64_SECREL64MSB
 0x66

	)

2442 
	#R_IA64_SECREL64LSB
 0x67

	)

2443 
	#R_IA64_REL32MSB
 0x6¯

	)

2444 
	#R_IA64_REL32LSB
 0x6d

	)

2445 
	#R_IA64_REL64MSB
 0x6ê

	)

2446 
	#R_IA64_REL64LSB
 0x6‡

	)

2447 
	#R_IA64_LTV32MSB
 0x74

	)

2448 
	#R_IA64_LTV32LSB
 0x75

	)

2449 
	#R_IA64_LTV64MSB
 0x76

	)

2450 
	#R_IA64_LTV64LSB
 0x77

	)

2451 
	#R_IA64_PCREL21BI
 0x79

	)

2452 
	#R_IA64_PCREL22
 0x7®

	)

2453 
	#R_IA64_PCREL64I
 0x7b

	)

2454 
	#R_IA64_IPLTMSB
 0x80

	)

2455 
	#R_IA64_IPLTLSB
 0x81

	)

2456 
	#R_IA64_COPY
 0x84

	)

2457 
	#R_IA64_SUB
 0x85

	)

2458 
	#R_IA64_LTOFF22X
 0x86

	)

2459 
	#R_IA64_LDXMOV
 0x87

	)

2460 
	#R_IA64_TPREL14
 0x91

	)

2461 
	#R_IA64_TPREL22
 0x92

	)

2462 
	#R_IA64_TPREL64I
 0x93

	)

2463 
	#R_IA64_TPREL64MSB
 0x96

	)

2464 
	#R_IA64_TPREL64LSB
 0x97

	)

2465 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2466 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2467 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2468 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2469 
	#R_IA64_DTPREL14
 0xb1

	)

2470 
	#R_IA64_DTPREL22
 0xb2

	)

2471 
	#R_IA64_DTPREL64I
 0xb3

	)

2472 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2473 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2474 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2475 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2476 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2481 
	#EF_SH_MACH_MASK
 0x1f

	)

2482 
	#EF_SH_UNKNOWN
 0x0

	)

2483 
	#EF_SH1
 0x1

	)

2484 
	#EF_SH2
 0x2

	)

2485 
	#EF_SH3
 0x3

	)

2486 
	#EF_SH_DSP
 0x4

	)

2487 
	#EF_SH3_DSP
 0x5

	)

2488 
	#EF_SH4AL_DSP
 0x6

	)

2489 
	#EF_SH3E
 0x8

	)

2490 
	#EF_SH4
 0x9

	)

2491 
	#EF_SH2E
 0xb

	)

2492 
	#EF_SH4A
 0xc

	)

2493 
	#EF_SH2A
 0xd

	)

2494 
	#EF_SH4_NOFPU
 0x10

	)

2495 
	#EF_SH4A_NOFPU
 0x11

	)

2496 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2497 
	#EF_SH2A_NOFPU
 0x13

	)

2498 
	#EF_SH3_NOMMU
 0x14

	)

2499 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2500 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2501 
	#EF_SH2A_SH4
 0x17

	)

2502 
	#EF_SH2A_SH3E
 0x18

	)

2505 
	#R_SH_NONE
 0

	)

2506 
	#R_SH_DIR32
 1

	)

2507 
	#R_SH_REL32
 2

	)

2508 
	#R_SH_DIR8WPN
 3

	)

2509 
	#R_SH_IND12W
 4

	)

2510 
	#R_SH_DIR8WPL
 5

	)

2511 
	#R_SH_DIR8WPZ
 6

	)

2512 
	#R_SH_DIR8BP
 7

	)

2513 
	#R_SH_DIR8W
 8

	)

2514 
	#R_SH_DIR8L
 9

	)

2515 
	#R_SH_SWITCH16
 25

	)

2516 
	#R_SH_SWITCH32
 26

	)

2517 
	#R_SH_USES
 27

	)

2518 
	#R_SH_COUNT
 28

	)

2519 
	#R_SH_ALIGN
 29

	)

2520 
	#R_SH_CODE
 30

	)

2521 
	#R_SH_DATA
 31

	)

2522 
	#R_SH_LABEL
 32

	)

2523 
	#R_SH_SWITCH8
 33

	)

2524 
	#R_SH_GNU_VTINHERIT
 34

	)

2525 
	#R_SH_GNU_VTENTRY
 35

	)

2526 
	#R_SH_TLS_GD_32
 144

	)

2527 
	#R_SH_TLS_LD_32
 145

	)

2528 
	#R_SH_TLS_LDO_32
 146

	)

2529 
	#R_SH_TLS_IE_32
 147

	)

2530 
	#R_SH_TLS_LE_32
 148

	)

2531 
	#R_SH_TLS_DTPMOD32
 149

	)

2532 
	#R_SH_TLS_DTPOFF32
 150

	)

2533 
	#R_SH_TLS_TPOFF32
 151

	)

2534 
	#R_SH_GOT32
 160

	)

2535 
	#R_SH_PLT32
 161

	)

2536 
	#R_SH_COPY
 162

	)

2537 
	#R_SH_GLOB_DAT
 163

	)

2538 
	#R_SH_JMP_SLOT
 164

	)

2539 
	#R_SH_RELATIVE
 165

	)

2540 
	#R_SH_GOTOFF
 166

	)

2541 
	#R_SH_GOTPC
 167

	)

2543 
	#R_SH_NUM
 256

	)

2549 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2553 
	#R_390_NONE
 0

	)

2554 
	#R_390_8
 1

	)

2555 
	#R_390_12
 2

	)

2556 
	#R_390_16
 3

	)

2557 
	#R_390_32
 4

	)

2558 
	#R_390_PC32
 5

	)

2559 
	#R_390_GOT12
 6

	)

2560 
	#R_390_GOT32
 7

	)

2561 
	#R_390_PLT32
 8

	)

2562 
	#R_390_COPY
 9

	)

2563 
	#R_390_GLOB_DAT
 10

	)

2564 
	#R_390_JMP_SLOT
 11

	)

2565 
	#R_390_RELATIVE
 12

	)

2566 
	#R_390_GOTOFF32
 13

	)

2567 
	#R_390_GOTPC
 14

	)

2568 
	#R_390_GOT16
 15

	)

2569 
	#R_390_PC16
 16

	)

2570 
	#R_390_PC16DBL
 17

	)

2571 
	#R_390_PLT16DBL
 18

	)

2572 
	#R_390_PC32DBL
 19

	)

2573 
	#R_390_PLT32DBL
 20

	)

2574 
	#R_390_GOTPCDBL
 21

	)

2575 
	#R_390_64
 22

	)

2576 
	#R_390_PC64
 23

	)

2577 
	#R_390_GOT64
 24

	)

2578 
	#R_390_PLT64
 25

	)

2579 
	#R_390_GOTENT
 26

	)

2580 
	#R_390_GOTOFF16
 27

	)

2581 
	#R_390_GOTOFF64
 28

	)

2582 
	#R_390_GOTPLT12
 29

	)

2583 
	#R_390_GOTPLT16
 30

	)

2584 
	#R_390_GOTPLT32
 31

	)

2585 
	#R_390_GOTPLT64
 32

	)

2586 
	#R_390_GOTPLTENT
 33

	)

2587 
	#R_390_PLTOFF16
 34

	)

2588 
	#R_390_PLTOFF32
 35

	)

2589 
	#R_390_PLTOFF64
 36

	)

2590 
	#R_390_TLS_LOAD
 37

	)

2591 
	#R_390_TLS_GDCALL
 38

	)

2593 
	#R_390_TLS_LDCALL
 39

	)

2595 
	#R_390_TLS_GD32
 40

	)

2597 
	#R_390_TLS_GD64
 41

	)

2599 
	#R_390_TLS_GOTIE12
 42

	)

2601 
	#R_390_TLS_GOTIE32
 43

	)

2603 
	#R_390_TLS_GOTIE64
 44

	)

2605 
	#R_390_TLS_LDM32
 45

	)

2607 
	#R_390_TLS_LDM64
 46

	)

2609 
	#R_390_TLS_IE32
 47

	)

2611 
	#R_390_TLS_IE64
 48

	)

2613 
	#R_390_TLS_IEENT
 49

	)

2615 
	#R_390_TLS_LE32
 50

	)

2617 
	#R_390_TLS_LE64
 51

	)

2619 
	#R_390_TLS_LDO32
 52

	)

2621 
	#R_390_TLS_LDO64
 53

	)

2623 
	#R_390_TLS_DTPMOD
 54

	)

2624 
	#R_390_TLS_DTPOFF
 55

	)

2625 
	#R_390_TLS_TPOFF
 56

	)

2627 
	#R_390_20
 57

	)

2628 
	#R_390_GOT20
 58

	)

2629 
	#R_390_GOTPLT20
 59

	)

2630 
	#R_390_TLS_GOTIE20
 60

	)

2633 
	#R_390_NUM
 61

	)

2637 
	#R_CRIS_NONE
 0

	)

2638 
	#R_CRIS_8
 1

	)

2639 
	#R_CRIS_16
 2

	)

2640 
	#R_CRIS_32
 3

	)

2641 
	#R_CRIS_8_PCREL
 4

	)

2642 
	#R_CRIS_16_PCREL
 5

	)

2643 
	#R_CRIS_32_PCREL
 6

	)

2644 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2645 
	#R_CRIS_GNU_VTENTRY
 8

	)

2646 
	#R_CRIS_COPY
 9

	)

2647 
	#R_CRIS_GLOB_DAT
 10

	)

2648 
	#R_CRIS_JUMP_SLOT
 11

	)

2649 
	#R_CRIS_RELATIVE
 12

	)

2650 
	#R_CRIS_16_GOT
 13

	)

2651 
	#R_CRIS_32_GOT
 14

	)

2652 
	#R_CRIS_16_GOTPLT
 15

	)

2653 
	#R_CRIS_32_GOTPLT
 16

	)

2654 
	#R_CRIS_32_GOTREL
 17

	)

2655 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2656 
	#R_CRIS_32_PLT_PCREL
 19

	)

2658 
	#R_CRIS_NUM
 20

	)

2662 
	#R_X86_64_NONE
 0

	)

2663 
	#R_X86_64_64
 1

	)

2664 
	#R_X86_64_PC32
 2

	)

2665 
	#R_X86_64_GOT32
 3

	)

2666 
	#R_X86_64_PLT32
 4

	)

2667 
	#R_X86_64_COPY
 5

	)

2668 
	#R_X86_64_GLOB_DAT
 6

	)

2669 
	#R_X86_64_JUMP_SLOT
 7

	)

2670 
	#R_X86_64_RELATIVE
 8

	)

2671 
	#R_X86_64_GOTPCREL
 9

	)

2673 
	#R_X86_64_32
 10

	)

2674 
	#R_X86_64_32S
 11

	)

2675 
	#R_X86_64_16
 12

	)

2676 
	#R_X86_64_PC16
 13

	)

2677 
	#R_X86_64_8
 14

	)

2678 
	#R_X86_64_PC8
 15

	)

2679 
	#R_X86_64_DTPMOD64
 16

	)

2680 
	#R_X86_64_DTPOFF64
 17

	)

2681 
	#R_X86_64_TPOFF64
 18

	)

2682 
	#R_X86_64_TLSGD
 19

	)

2684 
	#R_X86_64_TLSLD
 20

	)

2686 
	#R_X86_64_DTPOFF32
 21

	)

2687 
	#R_X86_64_GOTTPOFF
 22

	)

2689 
	#R_X86_64_TPOFF32
 23

	)

2690 
	#R_X86_64_PC64
 24

	)

2691 
	#R_X86_64_GOTOFF64
 25

	)

2692 
	#R_X86_64_GOTPC32
 26

	)

2694 
	#R_X86_64_GOT64
 27

	)

2695 
	#R_X86_64_GOTPCREL64
 28

	)

2697 
	#R_X86_64_GOTPC64
 29

	)

2698 
	#R_X86_64_GOTPLT64
 30

	)

2699 
	#R_X86_64_PLTOFF64
 31

	)

2701 
	#R_X86_64_SIZE32
 32

	)

2702 
	#R_X86_64_SIZE64
 33

	)

2703 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2704 
	#R_X86_64_TLSDESC_CALL
 35

	)

2706 
	#R_X86_64_TLSDESC
 36

	)

2707 
	#R_X86_64_IRELATIVE
 37

	)

2709 
	#R_X86_64_NUM
 38

	)

2713 
	#R_MN10300_NONE
 0

	)

2714 
	#R_MN10300_32
 1

	)

2715 
	#R_MN10300_16
 2

	)

2716 
	#R_MN10300_8
 3

	)

2717 
	#R_MN10300_PCREL32
 4

	)

2718 
	#R_MN10300_PCREL16
 5

	)

2719 
	#R_MN10300_PCREL8
 6

	)

2720 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2721 
	#R_MN10300_GNU_VTENTRY
 8

	)

2722 
	#R_MN10300_24
 9

	)

2723 
	#R_MN10300_GOTPC32
 10

	)

2724 
	#R_MN10300_GOTPC16
 11

	)

2725 
	#R_MN10300_GOTOFF32
 12

	)

2726 
	#R_MN10300_GOTOFF24
 13

	)

2727 
	#R_MN10300_GOTOFF16
 14

	)

2728 
	#R_MN10300_PLT32
 15

	)

2729 
	#R_MN10300_PLT16
 16

	)

2730 
	#R_MN10300_GOT32
 17

	)

2731 
	#R_MN10300_GOT24
 18

	)

2732 
	#R_MN10300_GOT16
 19

	)

2733 
	#R_MN10300_COPY
 20

	)

2734 
	#R_MN10300_GLOB_DAT
 21

	)

2735 
	#R_MN10300_JMP_SLOT
 22

	)

2736 
	#R_MN10300_RELATIVE
 23

	)

2738 
	#R_MN10300_NUM
 24

	)

2742 
	#R_M32R_NONE
 0

	)

2743 
	#R_M32R_16
 1

	)

2744 
	#R_M32R_32
 2

	)

2745 
	#R_M32R_24
 3

	)

2746 
	#R_M32R_10_PCREL
 4

	)

2747 
	#R_M32R_18_PCREL
 5

	)

2748 
	#R_M32R_26_PCREL
 6

	)

2749 
	#R_M32R_HI16_ULO
 7

	)

2750 
	#R_M32R_HI16_SLO
 8

	)

2751 
	#R_M32R_LO16
 9

	)

2752 
	#R_M32R_SDA16
 10

	)

2753 
	#R_M32R_GNU_VTINHERIT
 11

	)

2754 
	#R_M32R_GNU_VTENTRY
 12

	)

2756 
	#R_M32R_16_RELA
 33

	)

2757 
	#R_M32R_32_RELA
 34

	)

2758 
	#R_M32R_24_RELA
 35

	)

2759 
	#R_M32R_10_PCREL_RELA
 36

	)

2760 
	#R_M32R_18_PCREL_RELA
 37

	)

2761 
	#R_M32R_26_PCREL_RELA
 38

	)

2762 
	#R_M32R_HI16_ULO_RELA
 39

	)

2763 
	#R_M32R_HI16_SLO_RELA
 40

	)

2764 
	#R_M32R_LO16_RELA
 41

	)

2765 
	#R_M32R_SDA16_RELA
 42

	)

2766 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2767 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2768 
	#R_M32R_REL32
 45

	)

2770 
	#R_M32R_GOT24
 48

	)

2771 
	#R_M32R_26_PLTREL
 49

	)

2772 
	#R_M32R_COPY
 50

	)

2773 
	#R_M32R_GLOB_DAT
 51

	)

2774 
	#R_M32R_JMP_SLOT
 52

	)

2775 
	#R_M32R_RELATIVE
 53

	)

2776 
	#R_M32R_GOTOFF
 54

	)

2777 
	#R_M32R_GOTPC24
 55

	)

2778 
	#R_M32R_GOT16_HI_ULO
 56

	)

2780 
	#R_M32R_GOT16_HI_SLO
 57

	)

2782 
	#R_M32R_GOT16_LO
 58

	)

2783 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2785 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2787 
	#R_M32R_GOTPC_LO
 61

	)

2789 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2791 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2793 
	#R_M32R_GOTOFF_LO
 64

	)

2794 
	#R_M32R_NUM
 256

	)

2797 
	g__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] |
	`__FDMASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] &~
	`__FDMASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@
1
.
1
/usr/include
161
3493
UnitTest/fs/v1.0/alloc_bit/alloc_bit.c
UnitTest/fs/v1.0/alloc_bit/alloc_bit.h
UnitTest/fs/v1.0/alloc_bit/const.h
UnitTest/fs/v1.0/alloc_bit/fs.h
UnitTest/fs/v1.0/alloc_bit/type.h
UnitTest/fs/v1.0/alloc_zone/alloc_zone.c
UnitTest/fs/v1.0/alloc_zone/alloc_zone.h
UnitTest/fs/v1.0/alloc_zone/const.h
UnitTest/fs/v1.0/alloc_zone/fs.h
UnitTest/fs/v1.0/alloc_zone/type.h
UnitTest/fs/v1.0/rdwt_zone/const.h
UnitTest/fs/v1.0/rdwt_zone/fs.h
UnitTest/fs/v1.0/rdwt_zone/rdwt_zone.c
UnitTest/fs/v1.0/rdwt_zone/rdwt_zone.h
UnitTest/fs/v1.0/rdwt_zone/type.h
UnitTest/fs/v1.0/read_write.c
UnitTest/read_write.c
command/echo.c
command/ls.c
command/mkdir.c
command/pwd.c
command/rm.c
fs/disklog.c
fs/fs_stat.c
fs/link.c
fs/ls.c
fs/main.c
fs/misc.c
fs/open.c
fs/read_write.c
include/dirent.h
include/stdio.h
include/stdlib.h
include/string.h
include/sys/config.h
include/sys/console.h
include/sys/const.h
include/sys/fs.h
include/sys/global.h
include/sys/hd.h
include/sys/keyboard.h
include/sys/keymap.h
include/sys/mm.h
include/sys/proc.h
include/sys/protect.h
include/sys/proto.h
include/sys/tty.h
include/type.h
include/unistd.h
kernel/clock.c
kernel/console.c
kernel/global.c
kernel/hd.c
kernel/i8259.c
kernel/keyboard.c
kernel/klib.c
kernel/main.c
kernel/proc.c
kernel/protect.c
kernel/start.c
kernel/systask.c
kernel/tty.c
lib/brk.c
lib/chdir.c
lib/close.c
lib/closedir.c
lib/dir.c
lib/exec.c
lib/exit.c
lib/fork.c
lib/getcwd.c
lib/getpid.c
lib/lseek.c
lib/malloc.c
lib/misc.c
lib/open.c
lib/printf.c
lib/read.c
lib/readdir.c
lib/rewinddir.c
lib/seekdir.c
lib/stat.c
lib/syslog.c
lib/unlink.c
lib/vsprintf.c
lib/wait.c
lib/write.c
mm/break.c
mm/exec.c
mm/forkexit.c
mm/main.c
mm/memory.c
/usr/include/dirent.h
/usr/include/elf.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/stdint.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/errno.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
/usr/include/linux/errno.h
